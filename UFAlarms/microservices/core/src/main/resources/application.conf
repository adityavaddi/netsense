
env-suffix = ""
env-suffix = ${?env_suffix}

stream-parallelism = 1000
stream-parallelism = ${?stream_parallelism}

mqtt {
  clientId = "test-scala-client"
  businessclientId = "sse-business-client"
  auth_user = "mqtt_user"
  auth_pw = "WZDRw8S9p3s#5&b2=9#bT5^fgUv=eFa"
  cleanSession = true
  will = "None"
  fromTopic = "v1/+/out/va-v1/evt/#"
  toTopic = "TO_TOPIC"
  broker = ${?mqtt_broker}
  clientId = ${?mqtt_clientid}
  businessclientId = ${?mqtt_businessclientid}
  auth_user = ${?mqtt_auth_user}
  auth_pw = ${?mqtt_auth_pw}
  cleanSession = ${?mqtt_clean_session}
  fromTopic = ${?mqtt_from_topic}
  toTopic = ${?mqtt_to_topic}
  buffer_size = 1000
  buffer_size = ${?mqtt_buffer_size}
  retry.count = 20
  retry.count = ${?mqtt_retry_count}
  internal = {
    host = "127.0.0.1"
    port = 1883
    host = ${?mosquitto_service}
    port = ${?mosquitto_port}
  },
  external = {
    host = "127.0.0.1"
    port = 1883
    host = ${?mqtt_service}
    port = ${?mqtt_port}
  }
  //certfile = ""
  //cacertfile = ""
  //keyfile = ""
  password = ""
  usessl = "false"
  usessl = ${?mqtt_use_ssl}
  //certfile = ${?mqtt_certfile}
  //keyfile = ${?mqtt_keyfile}
  //cacertfile = ${?mqtt_cacertfile}
  password = ${?mqtt_key_password}
}


amqp {
  addresses = [{
    host = 127.0.0.1
    port = 5672
    host = ${?rabbitmq_service}
    port = ${?rabbitmq_port}
  }],
  username = "farallones"
  username = ${?rabbitmq_user}
  password = "sensity1"
  password = ${?rabbitmq_password}
  virtual-host = "/"
  heartbeat = "disable"
  timeout = "infinite"
  automatic-recovery = true
  recovery-interval = 5000
  ssl = "disable"
  retry.count = 12
  retry.count = ${?amqp_retry_count}
}

neo4j {

  host = "127.0.0.1"
  port = 7687
  username = "neo4j"
  password = "neo4j1"
  host = ${?neo4j_service}
  port = ${?neo4j_port}
  username = ${?neo4j_user}
  password = ${?neo4j_pwd}
}

cassandra {
  host = "127.0.0.1"
  port = 9042
  test-host = "127.0.0.1"
  test-port = 9142
  keyspace = "farallones"
  host = ${?cassandra_service}
  port = ${?cassandra_port}
  keyspace = ${?cassandra_keyspace}
}

kafka {
  host = "127.0.0.1"
  port = 9092
  group-name = "group1"
  topic-name = "config"
  to-device-topic = "node.command"${?env_suffix}
  to-core-node-topic = "corenode.command"${?env_suffix}

  device-to-lss-topic   = "schedule.loginreq"${?env_suffix}
  dd-to-lss-topic       = "ms.request.schedule"${?env_suffix}
  lfs-to-lss-topic      = "ms.command.schedule"${?env_suffix}
  cron-to-lss-topic     = "ms.trigger.schedule"${?env_suffix}
  lss-to-is-topic       = "api.reply.interface"${?env_suffix}
  lss-to-sts-topic      = "schedule.command"${?env_suffix}
  lss-to-sts-lfs-topic  = "light.command"${?env_suffix}
  node-systeminfo-topic = "node.systeminfo"${?env_suffix}

  request-topic-name    = "ms.request.config"
  host = ${?kafka_service}
  port = ${?kafka_port}
  group-name = ${?kafka_group_name}
  topic-name = ${?kafka_topic_name}
  request-topic-name = ${?kafka_is_req_topic}
  to-device-topic = ${?kafka_to_device_topic}
  to-core-node-topic = ${?kafka_to_core_device_topic}
}

graphite {
  host = "127.0.0.1"
  port = 2003
  host = ${?graphite_service}
  port = ${?graphite_port}
}

metrics {
  enabled = "false"
  enabled = ${?metrics_enabled}
  enabled-jvm-metrics = "false"
  enabled-jvm-metrics = ${?metrics_enabled_jvm}
  period = 5
  period = ${?metrics_period_in_sec}
}

health-check {
  host = "127.0.0.1"
  port = "9002"
  port = ${?health_check_port}
}

akka {

  actor {
    provider = cluster
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }


  loglevel = "ERROR"

  loglevel = ${?akka_log_level}

  log-dead-letters = 10

  log-dead-letters-during-shutdown = off

  logger-startup-timeout = 30s

  jvm-exit-on-fatal-error = true

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "ERROR"

  stdout-loglevel = ${?akka_stdout_log_level}





}
