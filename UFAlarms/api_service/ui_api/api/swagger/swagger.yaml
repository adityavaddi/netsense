swagger: "2.0"
info:
  version: "0.0.1"
  title: NSN API
# basePath prefixes all resource paths
basePath: /v3.0
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# security:
securityDefinitions:
     apiKey:
       type: apiKey
       name: api_key
       in: header
security:
  - apiKey: []
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

tags:
  - name: Alarms
  - name: Alerts
    # description: Alerts APIs  
  - name: Audits
  - name: AutoComplete
  - name: BusinessAlerts
  - name: Commands
  - name: Configs
  - name: Customers
  - name: Firmwares
  - name: Fixtures
  - name: GroupPolicy
  - name: Groups
  - name: HistoricalData
  - name: LightControl
  - name: Login
  - name: Nodes
  - name: Notifications
  - name: Overlays
  - name: ParkingMetadata
  - name: ParkingPolicy
  - name: ParkingZones
  - name: PolicyTag
  - name: Schedules
  - name: Sites
  - name: Traffic
  - name: Triggers
  - name: Users
  - name: Test
  - name: WhatIfAnalysis
  - name: WhatIfPolicy
  - name: WhatIfTag

paths:
  # Alarams APIs
  /manage/alarms:
    x-swagger-router-controller: alarms
    get:
      tags:
        - Alarms
      description: 'Get all user friendly alarms'
      operationId: getAllUFAlarms
      responses:
        '200': { description: Success, schema: { type: array, items: { $ref: '#/definitions/UFAlarmResponse' } } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    post:
      tags:
        - Alarms
      description: 'Create a user friendly alarm'
      operationId: createUFAlarm
      parameters:
        - { name: alarm, in: body, description: 'New Alarm', required: true, schema: { $ref: '#/definitions/UserFriendlyAlarm' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  /manage/bulkalarms:
    x-swagger-router-controller: alarms
    post:
      tags:
        - Alarms
      description: 'Create bulk of user friendly alarms'
      operationId: createBulkUFAlarms
      consumes:
        - multipart/form-data
      parameters:
        - { name: jsonAlarmList, in: formData, type: file, description: Alarm list in JSON, required: false}
      responses:
        '200': { description: Success, schema: { type: array, $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    put:
      tags:
        - Alarms
      description: 'Create bulk of user friendly alarms'
      operationId: createBulkUFAlarms
      parameters:
        - { name: jsonAlarmList, in: body, description: Alarm list in JSON, required: true, schema: { type: array, items: { $ref: '#/definitions/UserFriendlyAlarm' } }}
      responses:
        '200': { description: Success, schema: { type: array, $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  /manage/alarms/{mappingid}:
    x-swagger-router-controller: alarms
    get:
      tags:
        - Alarms
      description: 'Get alarm details for a specified mapping id'
      operationId: getUFAlarm
      parameters:
        - { name: mappingid, in: path, description: 'Mapping ID', required: true, type: string }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    put:
      tags:
        - Alarms
      description: 'Update alarm details for a specified mapping id'
      operationId: updateUFAlarm
      parameters:
        - { name: mappingid, in: path, description: 'Mapping ID', required: true, type: string }
        - { name: alarm, in: body, description: 'Update Alarm', required: true, schema: { $ref: '#/definitions/UpdateUserFriendlyAlarm' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    delete:
      tags:
        - Alarms
      description: 'Delete an alarm for a specified mapping id'
      operationId: deleteUFAlarm
      parameters:
        - { name: mappingid, in: path, description: 'Mapping ID', required: true, type: string }
      responses:
        '200': { description: Success }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
  
  /manage/alarms/{mappingid}/reset:
    x-swagger-router-controller: alarms
    put:
      tags:
        - Alarms
      description: 'Reset alarm for a specified mapping id'
      operationId: resetUFAlarm
      parameters:
        - { name: mappingid, in: path, description: 'Mapping ID', required: true, type: string }        
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/UFAlarmResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
  
  /notificationtypes:
    x-swagger-router-controller: notifications
    get:
      tags: 
        - Notifications
      description: 'Get all notification types for a specific user type'
      operationId: getNotificationTypes     
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/NotificationTypes' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } } 

  # What-if-analysis APIs  
  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/jobs:
    x-swagger-router-controller: whatifanalysis
    get:
      tags:
        - WhatIfAnalysis
      description: 'Get all what-if job details'
      operationId: getAllWhatIfJobs
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: filter, in: query, description: "Filter query to search what-if jobs (e.g. sname eq 'job2', startTime eq '2017-11-19T14:25:23Z' and endTime eq '2017-12-19T14:25:23Z', createdBy eq 'userid')", required: false, type: string }
      responses:
        '200': { description: Success, schema: { type: array, items: { $ref: '#/definitions/WhatIfResponse' } } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    post:
      tags:
        - WhatIfAnalysis
      description: 'Create a what-if job'
      operationId: createWhatIfJob
      parameters:
        - {name: orgid, in: path, description: 'Org ID', required: true, type: string}
        - {name: siteid, in: path, description: 'Site ID', required: true, type: string}
        - { name: whatifjob, in: body, description: 'New what-if job', required: true, schema: { $ref: '#/definitions/WhatIfJob' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/WhatIfResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/jobs/{jobid}:
    x-swagger-router-controller: whatifanalysis
    get:
      tags:
        - WhatIfAnalysis
      description: 'Get what-if job details for a specified job id'
      operationId: getWhatIfJob
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: jobid, in: path, description: 'Job ID', required: true, type: string }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/WhatIfResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    put:
      tags:
        - WhatIfAnalysis
      description: 'Update a what-if job for a specified job id'
      operationId: updateWhatIfJob
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: jobid, in: path, description: 'Job ID', required: true, type: string }
        - { name: whatifjob, in: body, description: 'Update what-if job', required: true, schema: { $ref: '#/definitions/WhatIfJob' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/WhatIfResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }        
    delete:
      tags:
        - WhatIfAnalysis
      description: 'Delete a what-if job for a specified job id'
      operationId: deleteWhatIfJob
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: jobid, in: path, description: 'Job ID', required: true, type: string }
      responses:
        '200': { description: Success }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/jobs/{jobid}/abort:
    x-swagger-router-controller: whatifanalysis
    put:
      tags:
        - WhatIfAnalysis
      description: 'Abort what-if job for a specified job id'
      operationId: abortWhatIfJob
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: jobid, in: path, description: 'Job ID', required: true, type: string }
      responses:
        '200': { description: Success }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  # What-if Policy APIs
  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/parkingpolicies:
    x-swagger-router-controller: whatifpolicy
    get:
      tags:
        - WhatIfPolicy
      description: 'Get all what-if policies details'
      operationId: getAllWhatIfPolicies
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }       
      responses:
        '200': { description: Success, schema: { type: array, items: { $ref: '#/definitions/getAllParkingPolicyResponse' } } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    post:
      tags:
        - WhatIfPolicy
      description: Create a what-if policy in a site
      operationId: createWhatIfPolicy
      parameters:
        - {name: orgid, in: path, description: 'Org ID', required: true, type: string}
        - {name: siteid, in: path, description: 'Site ID', required: true, type: string}
        - { name: whatifpolicy, in: body, description: 'New what-if policy', required: true, schema: { $ref: '#/definitions/NewParkingPolicy' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/CreateParkingPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/parkingpolicies/{policyid}:
    x-swagger-router-controller: whatifpolicy
    get:
      tags:
        - WhatIfPolicy
      description: 'Get what-if policy details for a specified policy id'
      operationId: getWhatIfPolicy
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: policyid, in: path, description: 'Policy ID', required: true, type: string }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/GetParkingPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    put:
      tags:
        - WhatIfPolicy
      description: 'Update a what-if policy for a specified policy id'
      operationId: updateWhatIfPolicy
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: policyid, in: path, description: 'Policy ID', required: true, type: string }
        - { name: whatifpolicy, in: body, description: 'Update what-if policy', required: true, schema: { $ref: '#/definitions/NewParkingPolicy' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/UpdateParkingPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }        
    delete:
      tags:
        - WhatIfPolicy
      description: 'Delete a what-if policy for a specified policy id'
      operationId: deleteWhatIfPolicy
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: policyid, in: path, description: 'Policy ID', required: true, type: string }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/DeleteParkingPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }   

  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/parkingpolicies/{policyid}/associatedtags:
    x-swagger-router-controller: whatifpolicy
    put:
      tags:
        - WhatIfPolicy
      description: 'Associate what-if policy to what-if tag'
      operationId: whatIfPolicyTagsAssociation
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: policyid, in: path, description: 'Policy ID', required: true, type: string }
        - { name: tagspolicylink, in: body, description: 'Associating Tags Policy Details', required: true, schema: { $ref: '#/definitions/TagsPolicy' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/AssociateTagsPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }  
    delete:
      tags:
        - WhatIfPolicy
      description: 'Disassociate what-if policy to what-if tag'
      operationId: whatIfPolicyTagsDisassociation
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: policyid, in: path, description: 'Policy ID', required: true, type: string }
        - { name: tagspolicylink, in: body, description: 'Disassociating Tags Policy Details', required: true, schema: { $ref: '#/definitions/TagsPolicy' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/DisassociateTagsPolicyResponse' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }  

  # What-if Tag APIs
  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/tags:       
    x-swagger-router-controller: whatiftag
    get:
      tags:
        - WhatIfTag
      description: 'Get all what-if tags details'
      operationId: getAllWhatIfTags
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }       
      responses:
        '200': { description: Success, schema: { type: array, items: { $ref: '#/definitions/ParkingPolicyTag' } } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    post:
      tags:
        - WhatIfTag
      description: Create a what-if tag in a site
      operationId: createWhatIfTag
      parameters:
        - {name: orgid, in: path, description: 'Org ID', required: true, type: string}
        - {name: siteid, in: path, description: 'Site ID', required: true, type: string}
        - { name: whatiftag, in: body, description: 'New what-if tag', required: true, schema: { $ref: '#/definitions/NewTag' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/ParkingPolicyTag' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }

  /customers/{orgid}/sites/{siteid}/parking-what-if-analysis/tags/{tagid}:
    x-swagger-router-controller: whatiftag
    get:
      tags:
        - WhatIfTag
      description: 'Get what-if policy details for a specified policy id'
      operationId: getWhatIfTag
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: tagid, in: path, description: 'Tag ID', required: true, type: string }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/ParkingPolicyTag' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    put:
      tags:
        - WhatIfTag
      description: 'Update a what-if policy for a specified policy id'
      operationId: updateWhatIfTag
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: tagid, in: path, description: 'Tag ID', required: true, type: string }
        - { name: whatiftag, in: body, description: 'Update what-if tag', required: true, schema: { $ref: '#/definitions/NewTag' } }
      responses:
        '200': { description: Success, schema: { $ref: '#/definitions/ParkingPolicyTag' } }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }
    delete:
      tags:
        - WhatIfTag
      description: 'Delete a what-if policy for a specified policy id'
      operationId: deleteWhatIfTag
      parameters:
        - { name: orgid, in: path, description: 'Org ID', required: true, type: string }
        - { name: siteid, in: path, description: 'Site ID', required: true, type: string }
        - { name: tagid, in: path, description: 'Tag ID', required: true, type: string }
      responses:
        '200': { description: Success }
        default: { description: Error, schema: { $ref: '#/definitions/ErrorResponse' } }    

  # UserData related APIs
  /applications/{appid}/users/{userid}/userdata:
    x-swagger-router-controller: appuserdata
    get:
      tags:
        - UserData
      description: Get Application Data in a site
      operationId: getAllAppUserData
      parameters:
        - name: appid
          in: path
          description: The App ID
          required: true
          type: string
        - name: userid
          in: path
          description: The User ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/AppUserDataResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - UserData
      description: Login user
      operationId: createAppUserData
      parameters:
        - name: appid
          in: path
          description: The App ID
          required: true
          type: string
        - name: userid
          in: path
          description: The User ID
          required: true
          type: string
        - name: appuserdata
          in: body
          description: New App User
          required: true
          schema:
            $ref: "#/definitions/AppUserData"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AppUserDataResponse"
        "404":
          description: Account Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /applications/{appid}/users/{userid}/userdata/{userdataid}:
    x-swagger-router-controller: appuserdata
    get:
      tags:
        - UserData
      description: Get a specific piece of Application User Data in a site
      # used as the method name of the controller
      operationId: getAppUserData
      parameters:
        - name: appid
          in: path
          description: The App ID
          required: true
          type: string
        - name: userid
          in: path
          description: The User ID
          required: true
          type: string
        - name: userdataid
          in: path
          description: The User Data ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AppUserDataResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - UserData
      description: Update Application User Data in a site
      operationId: updateAppUserData
      parameters:
        - name: appid
          in: path
          description: The App ID
          required: true
          type: string
        - name: userid
          in: path
          description: The User ID
          required: true
          type: string
        - name: userdataid
          in: path
          description: The User Data ID
          required: true
          type: string
        - name: appuserdata
          in: body
          description: Update App User
          required: true
          schema:
            $ref: "#/definitions/AppUserData"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AppUserDataResponse"
        "404":
          description: Account Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - UserData
      description: Delete Application User Data in a site
      operationId: deleteAppUserData
      parameters:
        - name: appid
          in: path
          description: The App ID
          required: true
          type: string
        - name: userid
          in: path
          description: The User ID
          required: true
          type: string
        - name: userdataid
          in: path
          description: The User Data ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DeleteAppUserDataResponse"
        "404":
          description: Account Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Login endpoints
  /login:
    x-swagger-router-controller: login
    get:
      tags:
        - Login
      description: Returns all customer information to the caller
      # used as the method name of the controller
      operationId: whoAmI
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Account"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Login
      description: Login user
      operationId: auth
      parameters:
        - name: login_data
          in: body
          description: Login data
          required: true
          schema:
            $ref: "#/definitions/LoginData"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Account"
        "404":
          description: Account Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /logout:
    x-swagger-router-controller: login
    get:
      tags:
        - Login
      description: Logout user
      # used as the method name of the controller
      operationId: logout
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /forgot-password:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Send email with link to reset password
      operationId: forgotPassword
      parameters:
        - name: data
          in: body
          description: Email
          required: true
          schema:
            $ref: "#/definitions/Email"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Node commands - reserved for admins
  /nodes/{nodeid}/command/{cmd}/{p1}/{p2}/{p3}/{p4}:
    x-swagger-router-controller: commands
    get:
      tags:
        - Commands
      description: Issue commands to node over sms
      operationId: smsCommand
      parameters:
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: cmd
          in: path
          description: Command (send/read/status)
          required: true
          type: string
        - name: p1
          in: path
          description: First parameter (for status it doesn't exist, for read it is the number of messages, for send it's the type of command)
          required: true
          type: string
        - name: p2
          in: path
          description: Second parameter - depends on P1
          required: true
          type: string
        - name: p3
          in: path
          description: Third parameter - depends on P1
          required: true
          type: string
        - name: p4
          in: path
          description: Fourth parameter - depends on P1
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CmdOutput"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Light override endpoints
  /customers/{orgid}/sites/{siteid}/lightcontrol/groups/{groupid}:
    x-swagger-router-controller: lightcontrol
    post:
      tags:
        - LightControl
      description: Override light level
      operationId: setLightLevelInGroup
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
        - name: state
          in: body
          description: Clear the override
          required: true
          schema:
            $ref: "#/definitions/LightingState"
      responses:
        "204":
          description: Success
        "404":
          description: Group Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/lightcontrol:
    x-swagger-router-controller: lightcontrol
    post:
      tags:
        - LightControl
      description: Override light level
      operationId: setLightLevelOnSite
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: state
          in: body
          description: Clear the override
          required: true
          schema:
            $ref: "#/definitions/LightingState"
      responses:
        "204":
          description: Success
        "404":
          description: Site Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/lightcontrol/node/{nodeid}:
    x-swagger-router-controller: lightcontrol
    post:
      tags:
        - LightControl
      description: Override light level
      operationId: setLightLevelForDevice
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: state
          in: body
          description: Clear the override
          required: true
          schema:
            $ref: "#/definitions/LightingState"
      responses:
        "204":
          description: Success
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Customers end-points
  /customers/{orgid}/of:
    x-swagger-router-controller: customers
    post:
      tags:
        - Customers
      description: Add new customer
      operationId: addCustomerOf
      parameters:
        - name: orgid
          in: path
          description: ID of the parent org
          required: true
          type: string
        - name: customer
          in: body
          description: New customer info
          required: true
          schema:
            $ref: "#/definitions/NewOrg"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Org"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers:
    x-swagger-router-controller: customers
    get:
      tags:
        - Customers
      description: Returns all customer information to the caller
      # used as the method name of the controller
      operationId: getAllCustomers
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Org"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Customers
      description: Add new customer
      operationId: addCustomer
      parameters:
        - name: customer
          in: body
          description: New customer info
          required: true
          schema:
            $ref: "#/definitions/NewOrg"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Org"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}:
    x-swagger-router-controller: customers
    get:
      tags:
        - Customers
      description: Returns customer information to the caller
      operationId: getCustomer
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Org"
        "404":
          description: Customer Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Customers
      description: Update a customer
      operationId: updateCustomer
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: customer
          in: body
          description: Updated customer info
          required: true
          schema:
            $ref: "#/definitions/NewOrg"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Org"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Customers
      description: Delete a customer based on ID
      operationId: deleteCustomer
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /suspended-customers/:
    x-swagger-router-controller: customers
    get:
      tags:
        - Customers
      description: Get all suspend orgs
      operationId: getAllSuspendedCustomers
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Org"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /suspended-customers/{orgid}:
    x-swagger-router-controller: customers
    put:
      tags:
        - Customers
      description: Suspend org
      operationId: suspendCustomer
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Customers
      description: Activate org
      operationId: activateCustomer
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Sites end-points
  /customers/{orgid}/sites:
    x-swagger-router-controller: sites
    get:
      tags:
        - Sites
      description: Returns all site information for a customer
      # used as the method name of the controller
      operationId: getAllSites
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Site"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Sites
      description: Add new Site
      operationId: addSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: site
          in: body
          description: New site info
          required: true
          schema:
            $ref: "#/definitions/NewSite"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Site"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}:
    x-swagger-router-controller: sites
    get:
      tags:
        - Sites
      description: Returns site information to the caller
      operationId: getSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Site"
        "404":
          description: Site Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Sites
      description: Update a site
      operationId: updateSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: site
          in: body
          description: Updated site info
          required: true
          schema:
            $ref: "#/definitions/NewSite"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Site"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/suspended-sites:
    x-swagger-router-controller: sites
    get:
      tags:
        - Sites
      description: Returns all suspended site information for a customer
      # used as the method name of the controller
      operationId: getAllSuspendedSites
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Site"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/suspended-sites/{siteid}:
    x-swagger-router-controller: sites
    put:
      tags:
        - Sites
      description: Suspend site
      operationId: suspendSite
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The UUID for a Site
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Sites
      description: Activate site
      operationId: activateSite
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The UUID for a Site
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # User end-points
  /user/update-password:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Update user password
      operationId: updateUserPassword
      parameters:
        - name: passwords
          in: body
          description: password
          required: true
          schema:
            $ref: "#/definitions/Passwords"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/set-password:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Set user password
      operationId: setUserPassword
      parameters:
        - name: password
          in: body
          description: password
          required: true
          schema:
            $ref: "#/definitions/Passwords"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/request-password-reset:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Request user password reset
      operationId: requestUserPasswordReset
      parameters:
        - name: data
          in: body
          description: Email
          required: true
          schema:
            $ref: "#/definitions/Email"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/user/{userid}/reset-password:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Reset user password
      operationId: resetUserPassword
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/generate-api-key:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Request user api key
      operationId: requestUserApiKey
      parameters:
        - name: data
          in: body
          description: Email
          required: true
          schema:
            $ref: "#/definitions/Email"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/revoke-api-key:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Revoke user api key
      operationId: revokeUserApiKey
      parameters:
        - name: data
          in: body
          description: Api key
          required: true
          schema:
            $ref: "#/definitions/ApiKey"
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/remove-user-from-ldap:
    x-swagger-router-controller: users
    post:
      tags:
        - Users
      description: Delete user from LDAP if not in db
      operationId: deleteUserFromLDAP
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: data
          in: body
          description: Email
          required: true
          schema:
            $ref: "#/definitions/Email"
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/users/{userid}:
    x-swagger-router-controller: users
    get:
      tags:
        - Users
      description: Gets a user
      # used as the method name of the controller
      operationId: getUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Users
      description: Update a user
      operationId: updateUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
        - name: user
          in: body
          description: user
          required: true
          schema:
            $ref: "#/definitions/NewUser"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Users
      description: Deletes a user
      # used as the method name of the controller
      operationId: deleteUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
      responses:
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/users:
    x-swagger-router-controller: users
    get:
      tags:
        - Users
      description: Get customer users
      operationId: getAllUsers
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Users
      description: Add a new user
      operationId: addUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: user
          in: body
          description: user
          required: true
          schema:
            $ref: "#/definitions/NewUser"
      responses:
        "204":
          description: Success
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/suspended-users:
    x-swagger-router-controller: users
    get:
      tags:
        - Users
      description: Get customer users
      operationId: getAllSuspendedUsers
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/suspended-users/{userid}:
    x-swagger-router-controller: users
    put:
      tags:
        - Users
      description: Suspend user
      operationId: suspendUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Users
      description: Activate user
      operationId: activateUser
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: userid
          in: path
          description: The UUID for a User
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Nodes end-points
  /nodes/{nodeid}:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Create a new node
      # used to create an empty node
      operationId: createNode
      parameters:
        - name: data
          in: body
          description: Node model
          required: true
          schema:
            $ref: "#/definitions/EmptyNode"
        - name: nodeid
          in: path
          description: Node id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/EmptyNode"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /nodes:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Create nodes
      # used to create lots of nodes
      operationId: bulkCreateNode
      consumes:
        - multipart/form-data
      parameters:
        - name: csvNodeList
          in: formData
          type: file
          description: Node list in CSV format
          required: false
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - Nodes
      description: Create nodes
      # used to create lots of nodes
      operationId: bulkCreateNode
      parameters:
        - name: csvNodeList
          in: body
          schema:
            $ref: "#/definitions/CSVNodeList"
          description: Node list in CSV format
          required: true
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/light_status:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets node light status
      # used as the method name of the controller
      operationId: getNodeLightStatus
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LightState"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/connection_status:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets node connectiom status
      # used as the method name of the controller
      operationId: getNodeConnectionStatus
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/connectionStatus"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/node_status:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets node connectiom status for selected site
      # used as the method name of the controller
      operationId: getSiteNodesStatuses
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/nodeStatus"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/sensors/{sensorid}/date/{date}/limit/{limit}:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets historical sensor data for a node
      # used as the method name of the controller
      operationId: getSensorHistory
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: sensorid
          in: path
          description: The sensor ID
          required: true
          type: string
        - name: date
          in: path
          description: The date
          required: true
          type: string
          format: date-time
        - name: limit
          in: path
          description: The limit
          required: true
          type: integer
          minimum: 1
          maximum: 20000
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/hdata"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/sensors/{sensorid}/from/{date1}/to/{date2}/limit/{limit}/period/{period}:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets historical sensor data for a site for a period of time, granularity is implicit
      # used as the method name of the controller
      operationId: getSiteSensorHistoryFromTo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: sensorid
          in: path
          description: The sensor ID
          required: true
          type: string
        - name: date1
          in: path
          description: The start date
          required: true
          type: string
          format: date-time
        - name: date2
          in: path
          description: The end date
          required: true
          type: string
        - name: limit
          in: path
          description: The limit
          required: true
          type: integer
          minimum: 1
          maximum: 20000
        - name: period
          in: path
          description: Aggregation time
          required: true
          type: string
          default: 15min
          enum:
            - 15min
            - 1hr
            - 1day
            - 1wk
            - 1mth
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/hdata"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/sensors/{sensorid}/from/{date1}/to/{date2}/limit/{limit}:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets historical sensor data for a node for a period of time, granularity is implicit
      # used as the method name of the controller
      operationId: getSensorHistoryFromTo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: sensorid
          in: path
          description: The sensor ID
          required: true
          type: string
        - name: date1
          in: path
          description: The start date
          required: true
          type: string
          format: date-time
        - name: date2
          in: path
          description: The end date
          required: true
          type: string
        - name: limit
          in: path
          description: The limit
          required: true
          type: integer
          minimum: 1
          maximum: 20000
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/hdata"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/sensors/{sensorid}/from/{date1}/to/{date2}/limit/{limit}/period/{period}:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Gets historical sensor data for a node for a period of time, granularity is implicit
      # used as the method name of the controller
      operationId: getSensorHistoryFromTo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: sensorid
          in: path
          description: The sensor ID
          required: true
          type: string
        - name: date1
          in: path
          description: The start date
          required: true
          type: string
          format: date-time
        - name: date2
          in: path
          description: The end date
          required: true
          type: string
        - name: limit
          in: path
          description: The limit
          required: true
          type: integer
          minimum: 1
          maximum: 20000
        - name: period
          in: path
          description: Aggregation time
          required: true
          type: string
          default: 15min
          enum:
            - 15min
            - 1hr
            - 1day
            - 1wk
            - 1mth
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/hdata"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/activate/{nodeid}:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Activates a node
      # used as the method name of the controller
      operationId: activateNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/deactivate/{nodeid}:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Deactivates a node
      # used as the method name of the controller
      operationId: deactivateNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{cid}/sites/{sid}/minnodes:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Returns minimal set of node information for a site
      # used as the method name of the controller
      operationId: getAllMinNodes
      parameters:
        - name: cid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: sid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Node"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Returns all node information for a site
      # used as the method name of the controller
      operationId: getAllNodes
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Node"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Nodes
      description: Add new Node
      operationId: addNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: node
          in: body
          description: New node info
          required: true
          schema:
            $ref: "#/definitions/Node"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Node"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/deviceaction/{cmd}:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Send a command to node
      operationId: commandNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: cmd
          in: path
          description: The command to send ColdReset, ResetFactory, ResetProvisioning or ChangeFWPartition
          required: true
          type: string
        - name: nodeParams
          in: body
          description: The list of node IDs
          required: true
          schema:
            $ref: "#/definitions/Nodes"
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/redirect:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Redirect nodes
      operationId: redirectNodes
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: server
          in: body
          required: true
          description: The list of node IDs and server fqdn for node redirection
          schema:
            $ref: "#/definitions/Server"
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/assign:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Assign a node
      operationId: assignNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/assign:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Assign a node
      operationId: bulkAssignNode
      consumes:
        - multipart/form-data
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: csvNodeList
          in: formData
          type: file
          description: Node list in CSV format
          required: false
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/delete:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: Deletes nodes in bulk
      operationId: bulkDeleteNode
      consumes:
        - multipart/form-data
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: csvNodeList
          in: formData
          type: file
          description: Node list in CSV format
          required: false
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}:
    x-swagger-router-controller: nodes
    get:
      tags:
        - Nodes
      description: Returns node information to the caller
      operationId: getNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/NodePlusGroups"
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Nodes
      description: Update a node
      operationId: updateNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: node
          in: body
          description: Updated node info
          required: true
          schema:
            $ref: "#/definitions/Node"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Node"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Nodes
      description: Delete a node based on ID
      operationId: deleteNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/schedule_push:
    x-swagger-router-controller: nodes
    post:
      tags:
        - Nodes
      description: "Resend a Node's Schedule"
      operationId: resendScheduleToNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Groups end-points
  /customers/{orgid}/sites/{siteid}/groups/{groupid}/remove/{nodeid}:
    x-swagger-router-controller: groups
    post:
      tags:
        - Groups
      description: Remove node from a group
      operationId: removeNodeFromGroup
      parameters:
        - name: orgid
          in: path
          description: Organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: groupid
          in: path
          description: group ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/groups/{groupid}/add/{nodeid}:
    x-swagger-router-controller: groups
    post:
      tags:
        - Groups
      description: Add node to a group
      operationId: addNodeToGroup
      parameters:
        - name: orgid
          in: path
          description: Organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: groupid
          in: path
          description: group ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/groups:
    x-swagger-router-controller: groups
    get:
      tags:
        - Groups
      description: Returns all group information for a site
      # used as the method name of the controller
      operationId: getAllGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Group"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Groups
      description: Add new Group
      operationId: addGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: group
          in: body
          description: New group info
          required: true
          schema:
            $ref: "#/definitions/NewGroup"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Group"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/groups/{gid}:
    x-swagger-router-controller: groups
    get:
      tags:
        - Groups
      description: Returns group information to the caller
      operationId: getGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: gid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Group"
        "404":
          description: Group Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Groups
      description: Update a group
      operationId: updateGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: gid
          in: path
          description: The group ID
          required: true
          type: string
        - name: group
          in: body
          description: Updated group info
          required: true
          schema:
            $ref: "#/definitions/NewGroup"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Group"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Groups
      description: Delete a group based on ID
      operationId: deleteGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: gid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/groups/{gid}/schedule_push:
    x-swagger-router-controller: groups
    post:
      tags:
        - Groups
      description: "Resend a Schedule to a Lighting Group's Nodes"
      operationId: resendScheduleToLG
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: gid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Fixtures end-points
  /customers/{orgid}/sites/{siteid}/fixtures:
    x-swagger-router-controller: fixtures
    get:
      tags:
        - Fixtures
      description: Returns all fixture information for a site
      # used as the method name of the controller
      operationId: getAllFixtures
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Fixture"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Fixtures
      description: Add new Fixture
      operationId: addFixture
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixture
          in: body
          description: New fixture info
          required: true
          schema:
            $ref: "#/definitions/NewFixture"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Fixture"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}:
    x-swagger-router-controller: fixtures
    get:
      tags:
        - Fixtures
      description: Returns fixture information to the caller
      operationId: getFixture
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Fixture"
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Fixtures
      description: Update a fixture
      operationId: updateFixture
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
        - name: fixture
          in: body
          description: Updated fixture info
          required: true
          schema:
            $ref: "#/definitions/NewFixture"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Fixture"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Fixtures
      description: Delete a fixture based on ID
      operationId: deleteFixture
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}/assign/groups/{groupid}:
    x-swagger-router-controller: fixtures
    post:
      tags:
        - Fixtures
      description: Assigns a fixture by id to all nodes in a group
      operationId: assignFixtureToGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}/assign/groups:
    x-swagger-router-controller: fixtures
    post:
      tags:
        - Fixtures
      description: Assigns a fixture by id to all nodes in a group
      operationId: assignFixtureToGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
        - name: groupids
          in: body
          description: The group IDs
          required: true
          schema:
            $ref: "#/definitions/Groups"
      responses:
        "200":
          description: Success
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}/assign/site:
    x-swagger-router-controller: fixtures
    post:
      tags:
        - Fixtures
      description: Assigns a fixture by id to all nodes in a site
      operationId: assignFixtureToSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}/assign/node/{nodeid}:
    x-swagger-router-controller: fixtures
    post:
      tags:
        - Fixtures
      description: Assigns a fixture by id to a node by id
      operationId: assignFixtureToNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/fixtures/{fixtureid}/assign/nodes:
    x-swagger-router-controller: fixtures
    post:
      tags:
        - Fixtures
      description: Assigns a fixture by id to a nodes by id
      operationId: assignFixtureToNodes
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: fixtureid
          in: path
          description: The fixture ID
          required: true
          type: string
        - name: nodeList
          in: body
          description: The list of node IDs
          required: true
          schema:
            $ref: "#/definitions/Nodes"
      responses:
        "200":
          description: Success
        "404":
          description: Fixture Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Overlays end-points
  /customers/{orgid}/sites/{siteid}/overlays:
    x-swagger-router-controller: overlays
    get:
      tags:
        - Overlays
      description: Returns all overlay information for a site
      # used as the method name of the controller
      operationId: getAllOverlays
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Overlay"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Overlays
      description: Add new Overlay
      operationId: addOverlay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: overlay
          in: body
          description: New overlay info
          required: true
          schema:
            $ref: "#/definitions/NewOverlay"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Overlay"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/overlays/{overlayid}:
    x-swagger-router-controller: overlays
    get:
      tags:
        - Overlays
      description: Returns overlay information to the caller
      operationId: getOverlay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: overlayid
          in: path
          description: The overlay ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Overlay"
        "404":
          description: Overlay Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Overlays
      description: Update an overlay
      operationId: updateOverlay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: overlayid
          in: path
          description: The overlay ID
          required: true
          type: string
        - name: overlay
          in: body
          description: Updated overlay info
          required: true
          schema:
            $ref: "#/definitions/NewOverlay"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Overlay"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Overlays
      description: Delete an overlay based on ID
      operationId: deleteOverlay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: overlayid
          in: path
          description: The overlay ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # Notifications end-points
  /customers/{orgid}/sites/{siteid}/notifications:
    x-swagger-router-controller: notifications
    get:
      tags:
        - Notifications
      description: Returns all notifications information for a site
      # used as the method name of the controller
      operationId: getAllNotificationsForSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Notification"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Notifications
      description: Add new Notification for site
      operationId: createNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notification
          in: body
          description: New Notification info
          required: true
          schema:
            $ref: "#/definitions/NewNotification"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Notification"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/notifications/{notificationid}:
    x-swagger-router-controller: notifications
    get:
      tags:
        - Notifications
      description: Returns notification information to the caller
      operationId: getNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Notification"
        "204":
          description: Success
        "404":
          description: Notification Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Notifications
      description: Update a notification
      operationId: updateNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
        - name: notification
          in: body
          description: Updated notification info
          required: true
          schema:
            $ref: "#/definitions/NewNotification"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Notification"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Notifications
      description: Delete an notification based on ID
      operationId: deleteNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/notifications/{notificationid}:
    x-swagger-router-controller: notifications
    get:
      tags:
        - Notifications
      description: Returns notification information to the caller
      operationId: getNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Notification"
        "204":
          description: Success
        "404":
          description: Notification Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Notifications
      description: Update a notification
      operationId: updateNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
        - name: notification
          in: body
          description: Updated notification info
          required: true
          schema:
            $ref: "#/definitions/NewNotification"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Notification"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Notifications
      description: Delete an notification based on ID
      operationId: deleteNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # /customers/{orgid}/user-notifications/:
  #   x-swagger-router-controller: notifications
  #   get:
  #     tags:
  #       - Notifications
  #     description: Returns all notifications information for a user
  #     # used as the method name of the controller
  #     operationId: getAllNotificationsForUser
  #     parameters:
  #       - name: orgid
  #         in: path
  #         description: The customer ID
  #         required: true
  #         type: string
  #     responses:
  #       "200":
  #         description: Success
  #         schema:
  #           type: array
  #           items:
  #           # a pointer to a definition
  #             $ref: "#/definitions/Notification"
  #       "204":
  #         description: Success
  #       # responses may fall through to errors
  #       default:
  #         description: Error
  #         schema:
  #           $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/notifications/activate/{notificationid}:
    x-swagger-router-controller: notifications
    post:
      tags:
        - Notifications
      description: Activate a notification based on ID
      operationId: activateNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/notifications/deactivate/{notificationid}:
    x-swagger-router-controller: notifications
    post:
      tags:
        - Notifications
      description: Deactivate a notification based on ID
      operationId: deactivateNotification
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: notificationid
          in: path
          description: The notification ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Parking group end-points
  /customers/{orgid}/sites/{siteid}/parkinggroups:
    x-swagger-router-controller: parkingzones
    get:
      tags:
        - ParkingZones
      description: Returns all parking groups
      # used as the method name of the controller
      operationId: getAllParkingGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/ParkingGroup"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - ParkingZones
      description: Add new ParkingGroup
      operationId: addParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingGroup
          in: body
          description: Parking group
          required: true
          schema:
            $ref: "#/definitions/NewParkingGroup"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingGroup"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/parkinggroups/{parkinggroupid}:
    x-swagger-router-controller: parkingzones
    get:
      tags:
        - ParkingZones
      description: Returns parking zone information to the caller
      operationId: getParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The parking group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingGroup"
        "204":
          description: Success
        "404":
          description: Parking group Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - ParkingZones
      description: Update a parking group
      operationId: updateParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The parking group ID
          required: true
          type: string
        - name: parkingGroup
          in: body
          description: Parking group
          required: true
          schema:
            $ref: "#/definitions/NewParkingGroup"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingGroup"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - ParkingZones
      description: Delete a parking group based on ID
      operationId: deleteParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The parking group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/parking:
    x-swagger-router-controller: parkingzones
    post:
      tags:
        - ParkingZones
      description: Returns parking information to the caller
      operationId: getParkingInfoSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: filter
          description: Filters reported parking info
          in: body
          required: false
          schema:
            $ref: "#/definitions/ParkingFilter"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/ParkingSpot"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/parkinggroups/{parkinggroupid}/users/assign:
    x-swagger-router-controller: parkingzones
    post:
      tags:
        - ParkingZones
      description: Assign users to a parking group
      operationId: bulkAssignUsersToParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The parking group ID
          required: true
          type: string
        - name: userId
          in: body
          description: The list of user IDs
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"




  /customers/{orgid}/sites/{siteid}/parkinggroups/{parkinggroupid}/users/unassign:
    x-swagger-router-controller: parkingzones
    post:
      tags:
        - ParkingZones
      description: Un-assign users and a parking group
      operationId: bulkUnassignUsersFromParkingGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The parking group ID
          required: true
          type: string
        - name: userId
          in: body
          description: The list of user IDs
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Traffic

  /customers/{orgid}/sites/{siteid}/traffic:
    x-swagger-router-controller: traffic
    post:
      tags:
        - Traffic
      description: Returns traffic information to the caller
      operationId: getTrafficInfo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: filter
          description: Filters reported parking info
          in: body
          required: false
          schema:
            $ref: "#/definitions/TrafficFilter"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/TrafficDetectedObject"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  /customers/{orgid}/sites/{siteid}/node/{nodeid}/traffic:
    x-swagger-router-controller: traffic
    post:
      tags:
        - Traffic
      description: Returns traffic information to the caller
      operationId: getTrafficInfo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: node ID
          required: true
          type: string
        - name: filter
          description: Filters reported parking info
          in: body
          required: false
          schema:
            $ref: "#/definitions/TrafficFilter"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/TrafficDetectedObject"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/node/{nodeid}/traffic/config:
    x-swagger-router-controller: traffic
    post:
      tags:
        - Traffic
      description: Returns traffic information to the caller
      operationId: getTrafficConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: node ID
          required: true
          type: string
        - name: filter
          description: Filters reported parking info
          in: body
          required: false
          schema:
            $ref: "#/definitions/TrafficFilter"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/TrafficConfig"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/traffic/config:
    x-swagger-router-controller: traffic
    post:
      tags:
        - Traffic
      description: Returns traffic information to the caller
      operationId: getTrafficConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: filter
          description: Filters reported parking info
          in: body
          required: false
          schema:
            $ref: "#/definitions/TrafficFilter"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/TrafficConfig"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Traffic points
  /customers/{orgid}/sites/{siteid}/trafficpoints:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns all traffic points
      # used as the method name of the controller
      operationId: getAlltrafficPoints
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TrafficPoint"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Add new TrafficPoint
      operationId: addTrafficPoint
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficPoint
          in: body
          description: Traffic Point
          required: true
          schema:
            $ref: "#/definitions/NewTrafficPoint"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficPoint"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/trafficPoints/{trafficpointid}:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns traffic point information to the caller
      operationId: getTrafficPoint
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficpointid
          in: path
          description: The traffic point ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficPoint"
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Update a traffic point
      operationId: updateTrafficPoint
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficpointid
          in: path
          description: The traffic point ID
          required: true
          type: string
        - name: trafficpoint
          in: body
          description: Traffic point
          required: true
          schema:
            $ref: "#/definitions/NewTrafficPoint"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficPoint"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Traffic
      description: Delete a traffic point based on ID
      operationId: deleteTrafficPoint
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficpointid
          in: path
          description: The traffic point ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Traffic ways
  /customers/{orgid}/sites/{siteid}/trafficways:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns all traffic ways
      # used as the method name of the controller
      operationId: getAlltrafficWays
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TrafficWay"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Add new TrafficWay
      operationId: addTrafficWay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficWay
          in: body
          description: Traffic Way
          required: true
          schema:
            $ref: "#/definitions/NewTrafficWay"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficWay"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/trafficWays/{trafficwayid}:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns traffic way information to the caller
      operationId: getTrafficWay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficwayid
          in: path
          description: The traffic way ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficWay"
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Update a traffic way
      operationId: updateTrafficWay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficwayid
          in: path
          description: The traffic way ID
          required: true
          type: string
        - name: trafficway
          in: body
          description: Traffic way
          required: true
          schema:
            $ref: "#/definitions/NewTrafficWay"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficWay"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Traffic
      description: Delete a traffic way based on ID
      operationId: deleteTrafficWay
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficwayid
          in: path
          description: The traffic way ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Traffic detection areas
  /customers/{orgid}/sites/{siteid}/trafficdetectionareas:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns all traffic detection areas
      # used as the method name of the controller
      operationId: getAllTrafficDetectionAreas
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TrafficDetectionArea"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Add new TrafficDetectionArea
      operationId: addTrafficDetectionArea
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficDetectionArea
          in: body
          description: Traffic detection area
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectionArea"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionArea"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/trafficdetectionareas/{trafficdetectionareaid}:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns traffic detection area information to the caller
      operationId: getTrafficDetectionArea
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectionareaid
          in: path
          description: The traffic detection area ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionArea"
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Update a traffic detection area
      operationId: updateTrafficDetectionArea
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectionareaid
          in: path
          description: The traffic detection area ID
          required: true
          type: string
        - name: trafficDetectionArea
          in: body
          description: Traffic detection area
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectionArea"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionArea"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Traffic
      description: Delete a traffic detection area based on ID
      operationId: deleteTrafficDetectionArea
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectionareaid
          in: path
          description: The traffic detection area ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Traffic events
  /customers/{orgid}/sites/{siteid}/trafficdetectionevents:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns all traffic events
      # used as the method name of the controller
      operationId: getAlltrafficDetectionEvents
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TrafficDetectionEvent"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Add new TrafficDetectionEvent
      operationId: addTrafficDetectionEvent
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficDetectionEvent
          in: body
          description: Traffic Event
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectionEvent"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionEvent"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/trafficdetectionevents/{trafficdetectioneventid}:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns traffic event information to the caller
      operationId: getTrafficDetectionEvent
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectioneventid
          in: path
          description: The traffic event ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionEvent"
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Update a traffic event
      operationId: updateTrafficDetectionEvent
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectioneventid
          in: path
          description: The traffic event ID
          required: true
          type: string
        - name: trafficDetectionEvent
          in: body
          description: Traffic event
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectionEvent"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectionEvent"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Traffic
      description: Delete a traffic event based on ID
      operationId: deleteTrafficDetectionEvent
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectioneventid
          in: path
          description: The traffic event ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Traffic detected objects
  /customers/{orgid}/sites/{siteid}/trafficdetectedobjects:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns all traffic detected objects
      # used as the method name of the controller
      operationId: getAlltrafficDetectedObjects
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TrafficDetectedObject"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Add new TrafficDetectedObject
      operationId: addTrafficDetectedObject
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficDetectedObject
          in: body
          description: Traffic detected object
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectedObject"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectedObject"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/parkingzones:
    x-swagger-router-controller: parkingzones
    get:
      tags:
        - ParkingZones
      description: Returns parking zones information to the caller
      operationId: getParkingZones
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "204":
          description: Success
        "404":
          description: Parking zone Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/parkingzones/{parkingzoneid}:
    x-swagger-router-controller: parkingzones
    get:
      tags:
        - ParkingZones
      description: Returns parking zones information to the caller
      operationId: getOneParkingZone
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingzoneid
          in: path
          description: The parking zone ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "204":
          description: Success
        "404":
          description: Parking zone Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/trafficdetectedobjects/{trafficdetectedobjectid}:
    x-swagger-router-controller: traffic
    get:
      tags:
        - Traffic
      description: Returns traffic detected object information to the caller
      operationId: getTrafficDetectedObject
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectedobjectid
          in: path
          description: The traffic detected object ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectedObject"
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Traffic
      description: Update a traffic detected object
      operationId: updateTrafficDetectedObject
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectedobjectid
          in: path
          description: The traffic detected object ID
          required: true
          type: string
        - name: trafficDetectedObject
          in: body
          description: Traffic detected object
          required: true
          schema:
            $ref: "#/definitions/NewTrafficDetectedObject"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TrafficDetectedObject"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Traffic
      description: Delete a traffic detected object based on ID
      operationId: deleteTrafficDetectedObject
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: trafficdetectedobjectid
          in: path
          description: The traffic detected object ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Alerts end-points
  /customers/{orgid}/sites/{siteid}/alerts:
    x-swagger-router-controller: alerts
    get:
      tags:
        - Alerts
      description: Returns all alerts information for a site
      # used as the method name of the controller
      operationId: getAllAlerts
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Alert"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Alerts
      description: Add new Alert
      operationId: createAlert
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: alert
          in: body
          description: New Alert info
          required: true
          schema:
            $ref: "#/definitions/NewAlert"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Alert"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/alerts/{alertid}:
    x-swagger-router-controller: alerts
    get:
      tags:
        - Alerts
      description: Returns alert information to the caller
      operationId: getAlert
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: alertid
          in: path
          description: The alert ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Alert"
        "204":
          description: Success
        "404":
          description: Alert Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    # Update Alert is not available for v3.0.4. Would become available in the future release.
    #  post:
    #   description: Update a alert
    #   operationId: updateAlert
    #   parameters:
    #     - name: orgid
    #       in: path
    #       description: The customer ID
    #       required: true
    #       type: string
    #     - name: siteid
    #       in: path
    #       description: The site ID
    #       required: true
    #       type: string
    #     - name: alertid
    #       in: path
    #       description: The alert ID
    #       required: true
    #       type: string
    #     - name: alert
    #       in: body
    #       description: Updated alert info
    #       required: true
    #       schema:
    #         $ref: "#/definitions/NewAlert"
    #   responses:
    #     "200":
    #       description: Success
    #       schema:
    #         $ref: "#/definitions/Alert"
    #     default:
    #       description: Error
    #       schema:
    #         $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Alerts
      description: Delete an alert based on ID
      operationId: deleteAlert
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: alertid
          in: path
          description: The alert ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/alerts/dismiss/{alertid}:
    x-swagger-router-controller: alerts
    post:
      tags:
        - Alerts
      description: Dismiss an alert
      operationId: dismissAlert
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: alertid
          in: path
          description: The alert ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/alerts/node/{nodeid}:
    x-swagger-router-controller: alerts
    get:
      tags:
        - Alerts
      description: Returns node alerts to the caller
      operationId: getAlertsForNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Alert"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/proximitydimming:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns all proximity dimming profiles for a site
      operationId: getAllPDProfiles
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/ProximityDimming"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Create a proximity dimming profile for a site
      operationId: createPDProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: pdprofile
          in: body
          description: Proximity Dimming Profile info
          required: true
          schema:
            $ref: "#/definitions/NewProximityDimming"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProximityDimming"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/proximitydimming/{pdprofileid}:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: getPDProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: pdprofileid
          in: path
          description: The Proximity Dimming Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ProximityDimming"
        "404":
          description: Daylight Harvesting Profile Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Update a proximity dimming profile
      operationId: updatePDProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: pdprofileid
          in: path
          description: The proxmity dimming profile ID
          required: true
          type: string
        - name: pdprofile
          in: body
          description: Updated proxmity dimming profile information
          required: true
          schema:
            $ref: "#/definitions/NewProximityDimming"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProximityDimming"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Schedules
      description: Delete a Proximity Dimming Profile based on ID
      operationId: deletePDProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: pdprofileid
          in: path
          description: The Proximity Dimming Profile ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  /customers/{orgid}/sites/{siteid}/proximitydimming/{pdprofileid}/site:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Proximity Dimming for site
      operationId: applyProximityDimmingForSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: pdprofileid
          in: path
          description: The Proximity Dimming Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProximityDimming"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/proximitydimming/{pdprofileid}/groups/{groupid}:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Proximity Dimming
      operationId: applyProximityDimmingForGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
        - name: pdprofileid
          in: path
          description: The Proximity Dimming Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProximityDimming"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/proximitydimming/{pdprofileid}/groups:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Proximity Dimming
      operationId: applyProximityDimmingForGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: groupids
          in: body
          description: The group IDs
          required: true
          schema:
            $ref: "#/definitions/Groups"
        - name: pdprofileid
          in: path
          description: The Proximity Dimming Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProximityDimming"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/daylightharvesting:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns all daylight harvesting profiles for a site
      operationId: getAllETDHProfiles
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/DaylightHarvesting"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Create a daylight harvesting profile for a site
      operationId: createETDHProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofile
          in: body
          description: Daylight Harvesting Profile info
          required: true
          schema:
            $ref: "#/definitions/NewDaylightHarvesting"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/DaylightHarvesting"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: getETDHProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/DaylightHarvesting"
        "404":
          description: Daylight Harvesting Profile Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Schedules
      description: Update a daylight harvesting profile
      operationId: updateETDHProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The daylight harvesting profile ID
          required: true
          type: string
        - name: etdhprofile
          in: body
          description: Updated daylight harvesting profile information
          required: true
          schema:
            $ref: "#/definitions/NewDaylightHarvesting"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/DaylightHarvesting"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Schedules
      description: Delete a Daylight Harvesting Profile based on ID
      operationId: deleteETDHProfile
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}/triggers:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: List all nodes which are triggers for the given profile
      operationId: getAllETDaylightHarvestingTriggers
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Node"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Remove a trigger node from a Daylight Harvesting Profile
      operationId: removeETDHProfileTriggers
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
        - name: nodeid
          in: body
          description: List of node IDs
          schema:
            $ref: "#/definitions/Nodes"
      responses:
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Schedules
      description: Add a trigger node from a Daylight Harvesting Profile
      operationId: addETDHProfileTriggers
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
        - name: nodeid
          in: body
          description: List of node IDs
          schema:
            $ref: "#/definitions/Nodes"
      responses:
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}/triggers/{nodeid}:
    x-swagger-router-controller: schedules
    delete:
      tags:
        - Schedules
      description: Remove a trigger node from a Daylight Harvesting Profile
      operationId: removeETDHProfileTrigger
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Schedules
      description: Add a trigger node from a Daylight Harvesting Profile
      operationId: addETDHProfileTrigger
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}/site:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Daylight Harvesting for site
      operationId: setETDaylightHarvestingForSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DaylightHarvesting"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}/groups/{groupid}:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Daylight Harvesting
      operationId: setETDaylightHarvestingForGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DaylightHarvesting"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/daylightharvesting/{etdhprofileid}/groups:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Set parameters for Daylight Harvesting
      operationId: setETDaylightHarvestingForGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: groupids
          in: body
          description: The group IDs
          required: true
          schema:
            $ref: "#/definitions/Groups"
        - name: etdhprofileid
          in: path
          description: The Daylight Harvesting Profile ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DaylightHarvesting"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/schedules:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns all schedules for a site
      operationId: getAllSchedules
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Schedule"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Create a schedule for a site
      operationId: addSchedule
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: schedule
          in: body
          description: Schedule info
          required: true
          schema:
            $ref: "#/definitions/NewSchedule"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Schedule"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/schedules/{scheduleid}:
    x-swagger-router-controller: schedules
    get:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: getSchedule
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Schedule"
        "404":
          description: Schedule Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Schedules
      description: Update a schedule
      operationId: updateSchedule
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
        - name: schedule
          in: body
          description: Updated schedule information
          required: true
          schema:
            $ref: "#/definitions/NewSchedule"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Schedule"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Schedules
      description: Delete a schedule based on ID
      operationId: deleteSchedule
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /configs/{model}:
    x-swagger-router-controller: configs
    get:
      tags:
        - Configs
      description: Returns default config for model
      operationId: getDefaultConfigs
      parameters:
        - name: model
          in: path
          description: Node model
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Config"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/config/{model}:
    x-swagger-router-controller: configs
    get:
      tags:
        - Configs
      description: Returns default config for model with site specific country code
      operationId: getDefaultConfigsForSite
      parameters:
        - name: model
          in: path
          description: Node model
          required: true
          type: string
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Config"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/configs:
    x-swagger-router-controller: configs
    get:
      tags:
        - Configs
      description: Returns all config profiles for a site
      operationId: getAllConfigs
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Configs
      description: Create a config for a site
      operationId: addConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: config
          in: body
          description: Config profile info
          required: true
          schema:
            $ref: "#/definitions/NewConfig"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/configs/{configid}:
    x-swagger-router-controller: configs
    get:
      tags:
        - Configs
      description: Returns config profile information to the caller
      operationId: getConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The config ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Config"
        "404":
          description: Schedule Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Configs
      description: Update a config
      operationId: updateConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The config ID
          required: true
          type: string
        - name: config
          in: body
          description: Updated config information
          required: true
          schema:
            $ref: "#/definitions/NewConfig"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Configs
      description: Delete a config based on ID
      operationId: deleteConfig
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The config ID
          required: true
          type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/configs/{configid}/apply/site:
    x-swagger-router-controller: configs
    post:
      tags:
        - Configs
      description: Updates nodes config for the site
      operationId: applyConfigToSite
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The node configuration id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/configs/{configid}/apply/groups/{groupid}:
    x-swagger-router-controller: configs
    post:
      tags:
        - Configs
      description: Updates nodes config for the group
      operationId: applyConfigToGroup
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The node configuration id
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/configs/{configid}/apply/nodes:
    x-swagger-router-controller: configs
    post:
      tags:
        - Configs
      description: Updates nodes config
      operationId: applyConfigToNodes
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: configid
          in: path
          description: The node configuration id
          required: true
          type: string
        - name: nodeList
          in: body
          description: The list of node IDs
          required: true
          schema:
            $ref: "#/definitions/Nodes"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ApplyConfigToNodes"
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/configs/{configid}/apply:
    x-swagger-router-controller: configs
    put:
      tags:
        - Configs
      description: Updates node config
      operationId: applyConfigToNode
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The id of the node
          required: true
          type: string
        - name: configid
          in: path
          description: The node configuration id
          required: true
          type: string
      responses:
        "204":
          description: Success
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/config/{type}:
    x-swagger-router-controller: configs
    get:
      tags:
        - Configs
      description: Read individual nodes config
      operationId: getConfigFromNode
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The id of the node
          required: true
          type: string
        - name: type
          in: path
          description: Type of config requested
          required: true
          type: string
#          enum:
#            - local
#            - factory
#            - provisioning
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Config"
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/schedules/{scheduleid}/apply/groups/{groupid}:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: applyScheduleToGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Schedule"
        "404":
          description: Schedule Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/schedules/{scheduleid}/apply/groups:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: applyScheduleToGroups
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
        - name: groupids
          in: body
          description: The group IDs
          required: true
          schema:
            $ref: "#/definitions/Groups"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Schedule"
        "404":
          description: Schedule Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/schedules/{scheduleid}/apply/site:
    x-swagger-router-controller: schedules
    post:
      tags:
        - Schedules
      description: Returns schedule information to the caller
      operationId: applyScheduleToSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: scheduleid
          in: path
          description: The schedule ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Schedule"
        "404":
          description: Schedule Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Historical data end-points
  /data/{which}/of/{type}/from/{from}/id/{id}/since/{since}/to/{to}:
      x-swagger-router-controller: historicaldata
      get:
        tags:
          - HistoricalData
        description: Returns all audits information for a site
        # used as the method name of the controller
        operationId: getDataPoints
        parameters:
          - name: which
            in: path
            required: true
            type: string
          - name: type
            in: path
            required: true
            type: string
          - name: from
            in: path
            required: true
            type: string
          - name: id
            in: path
            required: true
            type: string
          - name: since
            in: path
            required: true
            type: string
          - name: to
            in: path
            required: true
            type: string
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/hdata"
          # responses may fall through to errors
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"

  # Audits end-points
  /customers/{orgid}/sites/{siteid}/audits/from/{datemin}/to/{datemax}/:
    x-swagger-router-controller: audits
    get:
      tags:
        - Audits
      description: Returns all audits information for a site
      # used as the method name of the controller
      operationId: getAllAudits
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: datemin
          in: path
          required: true
          type: string
          format: date-time
        - name: datemax
          in: path
          required: true
          type: string
          format: date-time
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Audit"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /autocomplete/{query}/{categories}/:
    x-swagger-router-controller: autocomplete
    get:
      tags:
        - AutoComplete
      description: Returns all matches
      # used as the method name of the controller
      operationId: autoComplete
      parameters:
        - name: query
          in: path
          required: true
          type: string
        - name: categories
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
            items:
            # a pointer to a definition
              $ref: "#/definitions/autoCompleteMatches"
        "204":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Firmwares end-points
  /firmwares:
    x-swagger-router-controller: firmwares
    get:
      tags:
        - Firmwares
      description: Returns all firmware information to the caller
      # used as the method name of the controller
      operationId: readAllFirmwares
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
            # a pointer to a definition
              $ref: "#/definitions/Firmware"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Firmwares
      description: Add new firmware
      operationId: addFirmware
      parameters:
        - name: firmware
          in: body
          description: New firmware info
          required: true
          schema:
            $ref: "#/definitions/NewFirmware"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Firmware"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /firmwares/{firmwareid}:
    x-swagger-router-controller: firmwares
    get:
      tags:
        - Firmwares
      description: Returns firmware information to the caller
      operationId: readFirmware
      parameters:
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Firmware"
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Firmwares
      description: Update a firmware
      operationId: updateFirmware
      parameters:
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
        - name: firmware
          in: body
          description: Updated firmware info
          required: true
          schema:
            $ref: "#/definitions/NewFirmware"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Firmware"
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Firmwares
      description: Delete a firmware based on ID
      operationId: deleteFirmware
      parameters:
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
        - name: job_data
          in: body
          description: Job description
          schema:
            type: object
            properties:
              description:
                type: string
      responses:
        "200":
          description: Success
        "204":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/ota_status:
    x-swagger-router-controller: firmwares
    get:
      tags:
        - Firmwares
      description: Returns ota information
      operationId: otaStatusForSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/ota_status/{jobid}:
    x-swagger-router-controller: firmwares
    get:
      tags:
        - Firmwares
      description: Returns ota information
      operationId: otaStatusForJob
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: jobid
          in: path
          description: The command ID
          required: true
          type: string
      responses:
        "404":
          description: Job Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/ota_status/{jobid}/{action}:
    x-swagger-router-controller: firmwares
    post:
      tags:
        - Firmwares
      description: Accelerate/Slow/Stop job
      operationId: otaStatusJobUpdate
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: jobid
          in: path
          description: The command ID
          required: true
          type: string
        - name: action
          in: path
          description: action
          required: true
          type: string
          enum:
            - faster
            - slower
            - stop
      responses:
        "404":
          description: Job Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/firmwares/{firmwareid}/assign/site:
    x-swagger-router-controller: firmwares
    post:
      tags:
        - Firmwares
      description: Assign a firmware for all nodes in a site
      operationId: assignFirmwareToSite
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/firmwares/{firmwareid}/assign/groups/{groupid}:
    x-swagger-router-controller: firmwares
    post:
      tags:
        - Firmwares
      description: Assign a firmware for all nodes in a group
      operationId: assignFirmwareToGroup
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
        - name: groupid
          in: path
          description: The group ID
          required: true
          type: string
        - name: job_data
          in: body
          description: Job description
          schema:
            type: object
            properties:
              description:
                type: string
      responses:
        "200":
          description: Success
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/firmwares/{firmwareid}/assign/node/{nodeid}:
    x-swagger-router-controller: firmwares
    post:
      tags:
        - Firmwares
      description: Assign a firmware to a node by id
      operationId: assignFirmwareToNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: firmwareid
          in: path
          description: The firmware ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The node ID
          required: true
          type: string
        - name: job_data
          in: body
          description: Job description
          schema:
            type: object
            properties:
              description:
                type: string
      responses:
        "200":
          description: Success
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/firmwares/revert:
    x-swagger-router-controller: firmwares
    post:
      tags:
        - Firmwares
      description: Revert firmware
      operationId: revertFirmware
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeList
          in: body
          description: List of nodes affected
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /firmwares/download/{firmwareid}:
    x-swagger-router-controller: firmwares
    get:
      tags:
        - Firmwares
      description: Download firmware
      operationId: downloadFirmware
      parameters:
        - name: firmwareid
          in: path
          description: The firmware id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: file
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /test/{what}:
    x-swagger-router-controller: test
    get:
      tags:
        - Test
      description: Get something
      operationId: getSomething
      parameters:
        - name: what
          in: path
          description: What to test
          required: true
          type: string
      responses:
        "200":
          description: Success
        "204":
          description: Success
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Test
      description: Post something
      operationId: postSomething
      parameters:
        - name: what
          in: path
          description: What to test
          required: true
          type: string
        - name: data
          in: body
          description: Some payload
          required: true
          schema:
            $ref: "#/definitions/ErrorResponse"
      responses:
        "200":
          description: Success
        "204":
          description: Success
        "404":
          description: Firmware Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Parking Metadata end-points
  /customers/{orgid}/sites/{siteid}/parkingspaces/spaceattributes:
    x-swagger-router-controller: parkingmetadata
    post:
      tags:
        - ParkingMetadata
      description: Get all parking spots metadata in a site for the list of parking space ids
      operationId: getAllParkingSpots
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingspaceids
          in: body
          description: Parking Space IDs
          required: true
          schema:
            $ref: "#/definitions/ParkingSpaceIds"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/ParkingMetadataResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - ParkingMetadata
      description: Bulk create or update parking spots in a site
      operationId: bulkCreateOrUpdateParkingSpot
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingSpaceList
          in: body
          description: Parking metadata info
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/ParkingMetadata"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingMetadataUpdateRes"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - ParkingMetadata
      description: Bulk delete of parking spots in a site
      operationId: bulkDeleteParkingSpot
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingspaceids
          in: body
          description: Parking Space IDs
          required: true
          schema:
            $ref: "#/definitions/ParkingSpaceIds"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingMetadataDeleteRes"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Parking policy tag end-points
  /customers/{orgid}/sites/{siteid}/tags/{tagid}:
    x-swagger-router-controller: policytag
    # Get a policy tag
    get:
      tags:
        - PolicyTag
      description: Get a parking policy tag in a site
      operationId: getPolicyCategory
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: tagid
          in: path
          description: The policy tag ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingPolicyTag"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Delete a policy tag
    delete:
      tags:
        - PolicyTag
      description: Delete a parking policy tag in a site
      operationId: deletePolicyCategory
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: tagid
          in: path
          description: The policy tag ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Update a policy tag
    put:
      tags:
        - PolicyTag
      description: Update a parking policy tag in a site
      operationId: updatePolicyCategory
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: tagid
          in: path
          description: The policy tag ID
          required: true
          type: string
        - name: tag
          in: body
          description: Update a policy tag
          required: true
          schema:
            $ref: "#/definitions/NewTag"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingPolicyTag"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/tags:
    x-swagger-router-controller: policytag

    # Create a policy tag
    post:
      tags:
        - PolicyTag
      description: Create a parking policy tag in a site
      operationId: createPolicyCategory
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: tag
          in: body
          description: Create a policy tag
          required: true
          schema:
            $ref: "#/definitions/NewTag"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ParkingPolicyTag"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Get all policy tags
    get:
      tags:
        - PolicyTag
      description: Get all parking policy tags in a site
      operationId: getAllPolicyCategory
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/ParkingPolicyTag"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

#Parking Policy GET , UPDATE, DELETE
  /customers/{orgid}/sites/{siteid}/parkingpolicies/{parkingpolicyid}:
    x-swagger-router-controller: parkingpolicy
    # Get a parking policy
    get:
      tags:
        - ParkingPolicy
      description: Get a specific parking policy in a site
      operationId: getParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The parking policy ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetParkingPolicyWithAssociatedGroupsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Delete a parking policy
    delete:
      tags:
        - ParkingPolicy
      description: Delete a parking policy in a site
      operationId: deleteParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The parking policy ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DeleteParkingPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Update a parking policy
    put:
      tags:
        - ParkingPolicy
      description: Update a parking policy
      operationId: updateParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The parking policy ID
          required: true
          type: string
        - name: policy
          in: body
          description: Updated a parking policy
          required: true
          schema:
            $ref: "#/definitions/NewParkingPolicy"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UpdateParkingPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

   # Create, get all parking policy in a site
  /customers/{orgid}/sites/{siteid}/parkingpolicies:
    x-swagger-router-controller: parkingpolicy
    # Create a parking policy
    post:
      tags:
        - ParkingPolicy
      description: Create a parking policy in a site
      operationId: createParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: policy
          in: body
          description: New Parking Policy Details
          required: true
          schema:
            $ref: "#/definitions/NewParkingPolicy"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/CreateParkingPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Get all parking policies
    get:
      tags:
        - ParkingPolicy
      description: Get all parking policies in a site
      operationId: getAllParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              # a pointer to a definition
              $ref: "#/definitions/GetParkingPolicyWithAssociatedGroupsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Group-Policy based on version in a site
  /customers/{orgid}/sites/{siteid}/parkingpolicies/{parkingpolicyid}/version/{version}:
    x-swagger-router-controller: parkingpolicy

    # Get a group-policy based on version
    get:
      tags:
        - ParkingPolicy
      description: Get a specific parking policy in a site
      operationId: getParkingPolicyVersion
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The parking policy ID
          required: true
          type: string
        - name: version
          in: path
          description: The version Number
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetParkingPolicyResponseByVersion"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Group-Policy based on versionhistory of a site
  /customers/{orgid}/sites/{siteid}/parkingpolicies/{parkingpolicyid}/versionhistory:
    x-swagger-router-controller: parkingpolicy

    # Get a group-policy based on versionhistory
    get:
      tags:
        - ParkingPolicy
      description: Get a specific parking policy in a site
      operationId: getAllVersionsOfParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The parking policy ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              # a pointer to a definition
              $ref: "#/definitions/GetParkingPolicyResponseByVersionHistory"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Group-Policy based on from and to timestamps of a site
  /customers/{orgid}/sites/{siteid}/parkinggroups/{parkinggroupid}/associatedpolicies/fromtime/{fromtime}/totime/{totime}:
    x-swagger-router-controller: parkingpolicy

    # Get a group-policy based on timestamps
    get:
      tags:
        - ParkingPolicy
      description: Get a specific parking policy of a site within timeline
      operationId: getAllActiveParkingPolicyForPeriod
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The Parking Group ID
          required: true
          type: string
        - name: fromtime
          in: path
          description: The From Time
          required: true
          type: string
        - name: totime
          in: path
          description: The To Time
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              # a pointer to a definition
              $ref: "#/definitions/GetParkingPolicyResponseByTimeline"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  # Active group-policies will be retrieved
  /customers/{orgid}/sites/{siteid}/parkinggroups/{parkinggroupid}/activepolicy:
    x-swagger-router-controller: parkingpolicy

    # Get a group-policy based on timestamps
    get:
      tags:
        - ParkingPolicy
      description: Get a specific active parking policy
      operationId: getActiveParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkinggroupid
          in: path
          description: The Parking Group ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetActivePolicies"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


     # Search For Parking Policy
  /customers/{orgid}/sites/{siteid}/parkingpolicies/actions/search:
    x-swagger-router-controller: parkingpolicy

    # Post to search for parking policy
    post:
      tags:
        - ParkingPolicy
      description: Post To Search parking policy
      operationId: searchParkingPolicy
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: searchpolicy
          in: body
          description: Search For A Parking Policy
          required: true
          schema:
            $ref: "#/definitions/SearchParkingPolicy"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              # a pointer to a definition
              $ref: "#/definitions/PostSearchResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

# Tags-Policy Assocation in a site
  /customers/{orgid}/sites/{siteid}/parkingpolicies/{parkingpolicyid}/associatedtags:
    x-swagger-router-controller: parkingpolicy

    # Associate a tags-policy
    put:
      tags:
        - ParkingPolicy
      description: Associate a Tags-policy in a site
      operationId: policyTagsAssociation
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The policy ID
          required: true
          type: string
        - name: tagspolicylink
          in: body
          description: Associating Tags Policy Details
          required: true
          schema:
            $ref: "#/definitions/TagsPolicy"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AssociateTagsPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Deassociate a group-policy
    delete:
      tags:
        - ParkingPolicy
      description: Disssociate a Tags-policy in a site
      operationId: policyTagsDisassociation
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The policy ID
          required: true
          type: string
        - name: tagspolicylink
          in: body
          description: Disassociating Tags Policy Details
          required: true
          schema:
            $ref: "#/definitions/TagsPolicy"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/DisassociateTagsPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Group-Policy GET, UPDATE & DELETE in a site
  /customers/{orgid}/sites/{siteid}/parkingpolicies/{parkingpolicyid}/associatedparkinggroups:
    x-swagger-router-controller: grouppolicy

    # Get associatedparkinggroups of a site
    get:
      tags:
        - GroupPolicy
      description: Get associated parking groups in a site
      operationId: associatedParkingGroups
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The policy ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetAssociatedParkingGroupsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Associate a group-policy
    put:
      tags:
        - GroupPolicy
      description: Associate a group-policy in a site
      operationId: policyAssociation
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The policy ID
          required: true
          type: string
        - name: grouppolicy
          in: body
          description: Associating Group Policy Details
          required: true
          schema:
            $ref: "#/definitions/GroupPolicy"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AssociateGroupPolicyResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


    # Deassociate a group-policy
    delete:
      tags:
        - GroupPolicy
      description: Deassociate a group-policy in a site
      operationId: policyDisassociation
      parameters:
        - name: orgid
          in: path
          description: The org ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: parkingpolicyid
          in: path
          description: The policy ID
          required: true
          type: string
        - name: grouppolicy
          in: body
          description: Deassociating Group Policy Details
          required: true
          schema:
            $ref: "#/definitions/GroupPolicy"
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

# Business Alerts APIs
  /customers/{orgid}/sites/{siteid}/businessalerts:
    x-swagger-router-controller: businessalerts
    get:
      tags:
        - BusinessAlerts
      description: Get the list of business alerts for the site
      operationId: getAllBusinessAlerts
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: filter
          in: query
          description: Filter query to search business alerts (e.g. severity eq 'Major', active eq 'true', triggerName eq 'Marietta Trigger', resourceId eq '3881f299-2450-4f2c-a2d6-03635938b836')
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/BusinessAlertResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Not Supported by MS now
    post:
      tags:
        - BusinessAlerts
      description: Create a new business alert for the site
      operationId: createBusinessAlert
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: businessalert
          in: body
          description: New BusinessAlert
          required: true
          schema:
            $ref: "#/definitions/BusinessAlert"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/BusinessAlertResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/businessalerts/{businessalertid}:
    x-swagger-router-controller: businessalerts
    get:
      tags:
        - BusinessAlerts
      description: Get  details for a specified business alert
      operationId: getBusinessAlert
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: businessalertid
          in: path
          description: Business Alert ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/BusinessAlertResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Not Supported by MS now
    put:
      tags:
        - BusinessAlerts
      description: Update settings for the specified business alert
      operationId: updateBusinessAlert
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: businessalertid
          in: path
          description: Business Alert ID
          required: true
          type: string
        - name: businessalert
          in: body
          description: Update Business Alert
          required: true
          schema:
            $ref: "#/definitions/BusinessAlert"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/BusinessAlertResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    # Not Supported by MS now
    delete:
      tags:
        - BusinessAlerts
      description: Delete a specified trigger from the site
      operationId: deleteBusinessAlert
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: businessalertid
          in: path
          description: Business Alert ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/businessalerts/{businessalertid}/dismiss:
    x-swagger-router-controller: businessalerts
    put:
      tags:
        - BusinessAlerts
      description: Dismiss a specified business alert from the site
      operationId: dismissBusinessAlert
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: businessalertid
          in: path
          description: Business Alert ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

# Trigger APIs
  /customers/{orgid}/sites/{siteid}/triggers:
    x-swagger-router-controller: triggers
    get:
      tags:
        - Triggers
      description: Get the list of triggers currently set for the site
      operationId: getAllTriggers
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: filter
          in: query
          description: Filter query to search triggers (e.g. triggerName eq 'Marietta Trigger', severity eq 'Minor', triggerCategory eq 'Parking')
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/TriggerResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - Triggers
      description: Create a new trigger for the site
      operationId: createTrigger
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: trigger
          in: body
          description: New Trigger
          required: true
          schema:
            $ref: "#/definitions/Trigger"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TriggerResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/triggers/{triggerid}:
    x-swagger-router-controller: triggers
    get:
      tags:
        - Triggers
      description: Get  details for a specified trigger
      operationId: getTrigger
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: triggerid
          in: path
          description: Trigger ID
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TriggerResponse"
      # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Triggers
      description: Update settings for the specified trigger
      operationId: updateTrigger
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: triggerid
          in: path
          description: Trigger ID
          required: true
          type: string
        - name: trigger
          in: body
          description: Update Trigger
          required: true
          schema:
            $ref: "#/definitions/Trigger"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TriggerResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Triggers
      description: Delete a specified trigger from the site
      operationId: deleteTrigger
      parameters:
        - name: orgid
          in: path
          description: Customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: Site ID
          required: true
          type: string
        - name: triggerid
          in: path
          description: Trigger ID
          required: true
          type: string
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # VPN
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/vpn/query:
    x-swagger-router-controller: configs
    put:
      tags:
        - Configs
      description: Update VPN info on demand
      operationId: updateVPNInfo
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          description: Node id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/vpn/start:
    x-swagger-router-controller: configs
    put:
      tags:
        - Configs
      description: Connect node to VPN
      operationId: connectToVPN
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The id of the node
          required: true
          type: string
      responses:
        "204":
          description: Success
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{orgid}/sites/{siteid}/nodes/{nodeid}/vpn/stop:
    x-swagger-router-controller: configs
    put:
      tags:
        - Configs
      description: Disconnect node from VPN
      operationId: disconnectFromVPN
      parameters:
        - name: orgid
          in: path
          description: The organization ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          in: path
          description: The id of the node
          required: true
          type: string
      responses:
        "204":
          description: Success
        "404":
          description: Node Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"

  # Media Request
  /customers/{orgid}/sites/{siteid}/node/{nodeid}/Media/img/{channel}/{resolution}:
    x-swagger-router-controller: media
    post:
      #tags:
      #  - Media
      description: Returns a real time or historical image from a device.
      operationId: imageCaptureFromNode
      parameters:
        - name: orgid
          in: path
          description: The customer ID
          required: true
          type: string
        - name: siteid
          in: path
          description: The site ID
          required: true
          type: string
        - name: nodeid
          description: Node id
          in: path
          required: true
          type: string
        - name: channel
          description: Channel Id #- 0/1/C
          in: path
          required: true
          type: string
          #enum: [0,1]
        - name: resolution
          in: path
          description: Camera resolution #- H or L
          required: true
          type: string
          #enum: [L,H]
        - name: sic
          in: body
          description: SIC Image Format (jpg/png) and Timestamp of requested image in UTC long format. If time is not provided real time image is returned.
          required: true
          schema:
            $ref: "#/definitions/SicRequest"
      responses:
        "204":
          description: Success
          schema:
            $ref: "#/definitions/SicResponse"
        "404":
          description: Error
          #schema:
          #  $ref: "#/definitions/ErrorResponse"

# complex objects have schema definitions
definitions:
  # NotificationTypes:
  NotificationTypes:
    type: object
    required:
      - alarmtype
      - ufname
    properties:
      alarmtype:
        type: string
      nodemodels:       
        type: array
        items: { type: string }
      ufname:
        type: string
  # Alarms
  UserFriendlyAlarm:
    allOf:
      - $ref: "#/definitions/NotificationTypes"
    properties:
      description:
        type: string
      displaytocustomer:
        type: boolean
      displaytopartner:
        type: boolean

  UpdateUserFriendlyAlarm:
    type: object
    required: 
      - ufname
    properties:
      alarmtype:
        type: string
      nodemodels:       
        type: array
        items: { type: string }
      ufname:
        type: string
      description:
        type: string
      displaytocustomer:
        type: boolean
      displaytopartner:
        type: boolean
        
  UFAlarmResponse:
    allOf:
      - $ref: "#/definitions/UserFriendlyAlarm"
    properties:
      mappingid:
        type: string
        format: uuid
      created:
        type: integer
        format: int64
      updated:
        type: integer
        format: int64       

  # AppUserData
  AppUserData:
    type: object
    required:
      - datavalue
    properties:
      userdataid:
        type: string
      appid:
        type: string
      userid:
        type: string
      datavalue:
        type: string

  AppUserDataResponse:
    allOf:
      - $ref: "#/definitions/AppUserData"
    properties:
      createdOn:
        type: integer
        format: int64
      lastUpdated:
        type: integer
        format: int64
      isDeleted:
        type: boolean
        default: false
      userName:
        type: string

  DeleteAppUserDataResponse:
    type: object
    properties:
      success:
        type: boolean
  Account:
    allOf:
      - $ref: "#/definitions/NewAccount"
      - required:
        - id
        properties:
          id:
            type: string
  NewAccount:
    type: object
    required:
      - id
    properties:
      id:
        type: string
#      name:
#        type: string
#      street1:
#        type: string
#      street2:
#        type: string
#      city:
#        type: string
#      state:
#        type: string
#      postal_code:
#        type: string
#      country:
#        type: string
  Org:
    allOf:
      - $ref: "#/definitions/NewOrg"
      - required:
        - orgid
        properties:
          orgid:
            type: string
  LoginData:
    type: object
    required:
     - email
    properties:
      email:
        type: string
        format: email
      password:
        type: string
  Email:
    type: object
    required:
     - email
    properties:
      email:
        type: string
        format: email
  ApiKey:
    type: object
    required:
     - key
    properties:
      email:
        type: string
        format: email
      key:
        type: string
  Passwords:
    type: object
    required:
     - password
    properties:
      password:
        type: string
      old_password:
        type: string
  NewOrg:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        minLength: 2
      type:
        type: string
      street1:
        type: string
      street2:
        type: string
      city:
        type: string
      state:
        type: string
      postal_code:
        type: string
      country:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      contact_name:
        type: string
  CmdOutput:
    type: string
  Site:
    allOf:
      - $ref: "#/definitions/NewSite"
      - required:
        - siteid
        properties:
          siteid:
            type: string
  NewSite:
    type: object
    required:
      - name
      - latitude
      - longitude
    properties:
      name:
        type: string
      street1:
        type: string
      street2:
        type: string
      city:
        type: string
      state:
        type: string
      postal_code:
        type: string
      country:
        type: string
      latitude:
        type: string
        pattern: '^\-?\d+(\.\d+)?$'
      longitude:
        type: string
        pattern: '^\-?\d+(\.\d+)?$'
      altitude:
        type: string
      time_zone:
        type: string
      country_code:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      contact_name:
        type: string
  User:
    allOf:
      - $ref: "#/definitions/NewUser"
      - required:
        - userid
        properties:
          userid:
            type: string
          created:
            type: integer
          updated:
            type: integer
  NewUser:
    type: object
    required:
      - email
      - roles
    properties:
      email:
        type: string
        format: email
      name:
        type: string
      title:
        type: string
      phone:
        type: string
      roles:
        type: string
      sites:
        type: string
  EmptyNode:
    type: object
    required:
      - nodeid
      - model
    properties:
      nodeid:
        type: string
      model:
        type: string

  Nodes:
    type: object
    required:
      - nodeList
    properties:
      nodeList:
        description: Primary node identifier
        type: array
        items:
          type: string

  Users:
    type: object
    required:
      - userList
    properties:
      userList:
        description: Primary User identifier
        type: array
        items:
          type: string

  Node:
    allOf:
      - $ref: "#/definitions/CarrierPigeonProperties"
      - $ref: "#/definitions/CommonNodeProperties"
  CommonNodeProperties:
    type: object
    required:
      - nodeid
      - latitude
      - longitude
    properties:
      nodeid:
        type: string
        description: Primary node identifier
      name:
        type: string
        description: User defined node name
      model:
        type: string
        description: Node hardware model name
      latitude:
        type: string
        description: Latitude as a decimal
      longitude:
        type: string
        description: Longitude as a decimal
      ip:
        type: string
        description: Remote IP address
      lightStatus:
        type: string
      networkStatus:
        type: string
      sensorStatus:
        type: string
      building:
        type: string
        description: Building description
      level:
        type: string
        description: Building level description
      note:
        type: string
        description: User defined note
      baseStation:
        type: string
        description: MAC address of the base station to which this node connects
      remoteNetwork:
        type: string
        description: SSID to which this node connects
      bssid:
        type: string
        description: BSSID of this node
      softwareVersion:
        type: string
        description: Current firmware version
      mfgDate:
        type: string
        description: Node manufacture date
      circuit:
        type: string
        description: The power circuit description
  CarrierPigeonProperties:
    type: object
    properties:
      apn:
        type: string
      iccid:
        type: string
      imei:
        type: string
      imsi:
        type: string
  NodePlusGroups:
    allOf:
      - $ref: "#/definitions/Node"
      - properties:
          groupidlist:
            type: string
          groupnamelist:
            type: string
  Notification:
    allOf:
      - $ref: "#/definitions/NewNotification"
      - required:
        - notificationid
        properties:
          notificationid:
            type: string
          created:
            type: integer
            format: int64
          updated:
            type: integer
            format: int64
  NewNotification:
    type: object
    required:
      - name
      - msg
    properties:
      name:
        type: string
        minLength: 2
      description:
        type: string
      active:
        type: boolean
        default: true
      scope:
        type: string
      notificationtype:
        type: array
        items:
          type: string
      severity:
        type: array
        items:
          type: string
      window:
        type: string
      hold_off:
        type: integer
      resend_interval:
        type: integer
      msg:
        type: string
        minLength: 2
      emailUsersList:
        description: List of user IDs to be notified by email
        type: array
        items:
          type: string
      smsUsersList:
        description: List of user IDs to be notified by sms
        type: array
        items:
          type: string
      additionalEmails:
        description: List of user additional emails to be notified by email
        type: array
        items:
          type: string
      phone:
        type: string
  Alert:
    allOf:
      - $ref: "#/definitions/NewAlert"
      - required:
        - alertid
        properties:
          alertid:
            type: string
          created:
            type: integer
            format: int64
          updated:
            type: integer
            format: int64
          category:
            type: string
          ufname:
            description: User friendly alarm name
            type: string
          description:
            type: string
  NewAlert:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
      type:
        type: string
      nodeid:
        type: string
      siteid:
        type: string
      orgid:
        type: string
      msg:
        type: string
      severity:
        type: string
      category:
        type: string

#  ParkingZoneCameraInfo:
#        description: "Information about individual camera views"
#        type: array
#        items:
#          type: object
#          properties:
#            cameraid:
#              type: string
#              description: "Camera ID"
#            lat1:
#              type: string
#            lat2:
#              type: string
#            lng1:
#              type: string
#            lng2:
#              type: string
#            x1:
#              type: integer
#              description: "X coordinate"
#            y1:
#              type: integer
#              description: "Y coordinate"
#            x2:
#              type: integer
#              description: "X coordinate"
#            y2:
#              type: integer
#              description: "Y coordinate"
#            address:
#              description: "Physical street address"
#              type: string
#            available_spaces_num:
#              description: "Current number of available spaces"
#              type: integer
#              minimum: 0
#            occupied_spaces_num:
#              description: "Current number of occupied spaces"
#              type: integer
#              minimum: 0
#            max_spaces_num:
#              description: "Maximum number of available spaces (estimate)"
#              type: integer
#              minimum: 1
  WhatIfJob:
    type: object
    required:
      - name
      - fromTime
      - toTime
      - parkingPolicies
      - parkingGroups
      - mode
    properties:
      name:
        type: string
      fromTime:
        type: string
        format: date-time
      toTime:
        type: string
        format: date-time
      parkingPolicies:
        type: array
        items: { type: string }
      parkingGroups:
        type: array
        items: { type: string }
      mode:
        type: string
        enum: [as-is, no-violations]

        

  WhatIfResponse:
    allOf:
      - $ref: '#/definitions/WhatIfJob'
    properties:
      jobId:
        type: string
        format: uuid
      siteId:
        type: string
        format: uuid
      orgId:
        type: string
        format: uuid
      createdByUserId:
        type: string
        format: uuid
      lastUpdatedByUserId:
        type: string
        format: uuid
      createdAt:
        type: string
        format: date-time
      lastUpdatedAt:
        type: string
        format: date-time
      startTime:
        type: string
        format: date-time
      endTime:
        type: string
        format: date-time
      submitTime:
        type: string
        format: date-time
      abortTime:
        type: string
        format: date-time
      jobStatus:
        type: string
        enum: [Pending, Running, Completed, Aborted, Abnormally-Ended]
      timeToComplete:
        type: integer
        description: Time to complete in minutes
      percentageComplete:
        type: number
        format: double
      createdByUserName:
        type: string
      lastUpdatedByUserName:
        type: string

  ParkingFilter:
    type: object
    properties:
      tag:
        description: Tag to filter on
        type: string
      timeResolution:
        description: Time resolution (15min, 1hr, 1day)
        type: string
        enum:
          - 15min
          - 1hr
          - 1day
      spatialResolution:
        description: Spatial resolution
        type: string
        default: "site"
        enum:
          - site
          - group
          - zone
          - unassigned_zone
          - spot
      type:
        description: Parking type
        type: string
        enum:
          - Undemarcated
          - Demarcated
      parkingspaceid:
        type: string
      parkingzoneid:
        type: string
      parkinggroupid:
        type: string
      nodeid:
        type: string
      lat1:
        type: string
      lat2:
        type: string
      lng1:
        type: string
      lng2:
        type: string
      vehicle_types:
        description: Designated vehicle types - comma separated list
        type: string
      occupancy:
        description: Occupancy status
        type: boolean
      active_filter:
        description: Active, Inactive or All
        type: string
        default: "active"
        enum:
          - active
          - inactive
          - all
      startTime:
        description: Start time
        type: string
      endTime:
        description: Start time
        type: string

  ParkingSpot:
    allOf:
      - $ref: "#/definitions/NewParkingSpot"
      - required:
        - parkingspaceid
        properties:
          parkingspaceid:
            type: string
  NewParkingSpot:
    type: object
    required:
      - lat1
      - lat2
      - lng1
      - lng2
    properties:
      demarcated:
        description: "Demarcated/Undemarcated"
        type: boolean
      description:
        description: "Description for the parking spot"
        type: string
      occupancy:
        description: "Whether or not spot is currently occupied"
        type: boolean
      address:
        description: "Physical street address"
        type: string
      tags:
        description: "User entered comma separated list of keywords"
        type: string
      policy:
        description: "Assigned policy of this parking zone"
        type: string
        default: "Standard parking"
        enum:
          - Standard parking
          - Double parking
          - No parking
      altitude:
        description: "Elevation of the parking spot"
        type: integer
      center_lat:
        type: string
      center_lng:
        type: string
      objectID:
        description: "ID of the object occupying the spot"
        type: string
      since:
        description: "Date/time since this spot last changed state"
        type: string
      active:
        description: "Whether the parking zone is being monitored"
        type: boolean
      activeSince:
        description: "Date/time this parking spot got last activated"
        type: string
      error:
        description: "Any error codes associated with the parking zone"
        type: string
      lat1:
        type: string
      lat2:
        type: string
      lng1:
        type: string
      lng2:
        type: string
      x1:
        type: integer
        description: "X coordinate"
      y1:
        type: integer
        description: "Y coordinate"
      x2:
        type: integer
        description: "X coordinate"
      y2:
        type: integer
        description: "Y coordinate"
      parkinggroupid:
        type: string
      siteid:
        type: string

  ParkingGroup:
    allOf:
      - $ref: "#/definitions/NewParkingGroup"
      - required:
        - parkinggroupid
        properties:
          parkinggroupid:
            type: string

  NewParkingGroup:
    type: object
    required:
      - name
    properties:
      name:
        description: "Name of the parking group"
        type: string
      description:
        description: "Description of the parking group"
        type: string
      vehicle_types:
        description: "Designated vehicle type"
        type: string
      policy:
        description: "Assigned policy of this parking group"
        type: string
        default: "Standard parking"
        enum:
          - Standard parking
          - Double parking
          - No parking
      site:
        type: object
        properties:
          siteid:
            type: string
            description: "Id of the site the group belongs to"
          sitename:
            type: string
            description: "Name of the site the group belongs to"
      parkingzones:
        description: "Comma separated list of parkingzoneids"
        type: string

  ParkingSpaceIds:
    type: object
    required:
      - parkingspaceids
    properties:
      parkingspaceids:
        description: Parking Spot IDs
        type: array
        items:
          type: string
          format: uuid

  ParkingMetadata:
    type: object
    required:
      - parkingspaceid
    properties:
      parkingspaceid:
        type: string
      name:
        type: string
      reservation:
        type: boolean
      handicap:
        type: boolean
      geoCoordinates:
        $ref: "#/definitions/Rectangle"
      monitoringSensorid:
        type: string
      businessUse:
        type: string
      typeOfVehicle:
        type: array
        items:
          type: string
      howMetered:
        type: string
      active:
        type: boolean
      PPV:
        type: boolean
      areaType:
        type: array
        items:
          type: string
      paystationid:
        type: string
      parkingSpaceType:
        type: string

  ParkingMetadataResponse:
    allOf:
      - $ref: "#/definitions/ParkingMetadata"
    properties:
      createdOn:
        type: string
        format: date-time
        description: Date in UTC
      lastUpdated:
        type: string
        format: date-time
        description: Date in UTC

  ParkingMetadataUpdateRes:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      spotAttributesNotUpdatedForParkingspotids:
        type: array
        items:
          type: string

  ParkingMetadataDeleteRes:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      invalidParkingspotids:
        type: array
        items:
          type: string

  Rectangle:
    type: object
    properties:
      p1:
        $ref: "#/definitions/GeoCoordinate"
      p2:
        $ref: "#/definitions/GeoCoordinate"
      p3:
        $ref: "#/definitions/GeoCoordinate"
      p4:
        $ref: "#/definitions/GeoCoordinate"

  GeoCoordinate:
    type: object
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double

  ParkingPolicyTag:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      tagId:
        type: string
      orgId:
        type: string
      siteId:
        type: string
      createdOn:
        type: string
      lastUpdated:
        type: string

  NewTag:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      description:
        type: string

  GetAssociatedParkingGroupsResponse:
    type: object
    required:
      - parkinggroupid
    properties:
      parkinggroupid:
        type: string
      startTime:
        type: string
      endTime:
        type: string
      version:
        type: number

  GroupPolicy:
    type: object
    required:
      - parkinggroupid
    properties:
      parkinggroupid:
        type: string

  AssociateGroupPolicyResponse:
    type: object
    properties:
      success:
        type: boolean

  # BusinessAlert
  BusinessAlert:
    type: object
    properties:
      triggerId:
        type: string
        format: uuid
      triggerName:
        type: string
      triggerCategory:
        type: string
        enum: [Business Alert - Parking]
      triggerSubcategory:
        type: string
        enum: [group, site]
      resourceId:
        type: string
        format: uuid
      resourceName:
        type: string
      active:
        type: boolean
      severity:
        type: string
        enum: [Major, Minor, Critical]
      message:
        type: string

  BusinessAlertResponse:
    allOf:
      - $ref: "#/definitions/BusinessAlert"
    properties:
      businessAlertId:
        type: string
        format: uuid
      siteId:
        type: string
        format: uuid
      orgId:
        type: string
        format: uuid
      triggerUserId:
        type: string
        format: uuid
        description: Reference of userId in trigger for which this alert triggered
      createdOn:
        type: string
        format: date-time
        description: Date and time that this Business Alert was created
      lastUpdated:
        type: string
        format: date-time
        description: Date and time that this Business Alert was updated
      lastClearedAt:
        type: string
        format: date-time
        description: Timestamp at which this alert was dismissed by user
      lastClearedBy:
        type: string
        format: uuid
        description: UUID of user who dismissed this alert
      triggerUserName:
        type: string
      lastClearedByUserName:
        type: string

  # Trigger
  Trigger:
    type: object
    required:
      - triggerName
      - triggerCategory
      - triggerSubcategory
      - resourceList
      - timePeriod
      - triggerVariable
      - comparisonValue
      - severity
    properties:
      triggerName:
        type: string
      triggerCategory:
        type: string
        enum: [Business Alert - Parking]
      triggerSubcategory:
        type: string
        enum: [group, site]
      resourceList:
        type: array
        items:
          type: object
          properties:
            resourceId:
              type: string
              format: uuid
            resourceName:
              type: string
      timePeriod:
        type: string
        enum: [15min, 1hr, 1day]
      triggerVariable:
        type: string
        enum: [TotalRevenue, Turnover, Vacancy, Occupancy, AvgDwelltime, TotalViolationCount]
      comparisonVariableOperator:
        type: string
        enum: [Percentage]
      comparisonVariable:
        type: string
        enum: [Turnover]
      comparisonOperator:
        type: string
        enum: [GT, LT, EQ, GE, LE]
      comparisonValue:
        type: string
        description: 'Can be Arithmetic variable or static numerical or string value that is being compared'
      userMessage:
        type: string
      additionalUserMessage:
        type: string
      severity:
        type: string
        enum: [Minor, Major, Critical]

  TriggerResponse:
    allOf:
      - $ref: "#/definitions/Trigger"
    properties:
      triggerId:
        type: string
        format: uuid
      siteId:
        type: string
        format: uuid
      userId:
        type: string
      orgId:
        type: string
        format: uuid
      createdOn:
        type: string
        format: date-time
        description: Date in UTC
      lastUpdated:
        type: string
        format: date-time
        description: Date in UTC
      userName:
        type: string

#  ParkingZone:
#    allOf:
#      - $ref: "#/definitions/NewParkingZone"
#      - required:
#        - parkingzoneid
#        properties:
#          parkingzoneid:
#            type: string
#  NewParkingZone:
#    type: object
#    required:
#      - name
#      - type
#    properties:
#      name:
#        type: string
#      type:
#        description: "Demarcated/Undemarcated"
#        type: string
#      description:
#        description: "Description for the parking zone"
#        type: string
#      available_spaces_num:
#        description: "Current number of available spaces"
#        type: integer
#        minimum: 0
#      occupied_spaces_num:
#        description: "Current number of occupied spaces"
#        type: integer
#        minimum: 0
#      max_spaces_num:
#        description: "Maximum number of available spaces (estimate)"
#        type: integer
#        minimum: 1
#      address:
#        description: "Physical street address"
#        type: string
#      tags:
#        description: "User entered comma separated list of keywords"
#        type: string
#      length:
#        description: "Length of the parking zone, applies only to undemarcated, in [m]"
#        type: integer
#        minimum: 4
#      car_length:
#        description: "Length of the parking spot, applies only to undemarcated, in [m]"
#        type: integer
#        minimum: 4
#      active:
#        description: "Whether the parking zone is being monitored"
#        type: boolean
#      error:
#        description: "Any error codes associated with the parking zone"
#        type: string
#      lat1:
#        type: string
#      lat2:
#        type: string
#      lng1:
#        type: string
#      lng2:
#        type: string
#      x1:
#        type: integer
#        description: "X coordinate"
#      y1:
#        type: integer
#        description: "Y coordinate"
#      x2:
#        type: integer
#        description: "X coordinate"
#      y2:
#        type: integer
#        description: "Y coordinate"
#      occupied_spaces:
#        type: array
#        items:
#          type: object
#          properties:
#            groupid:
#              type: string
#              description: "Id of the group"
#            groupname:
#              type: string
#              description: "Group name"
#      group:
#        type: object
#        properties:
#          groupid:
#            type: string
#            description: "Id of the group"
#          groupname:
#            type: string
#            description: "Group name"
#      site:
#        type: object
#        properties:
#          siteid:
#            type: string
#            description: "Id of the site the zone belongs to"
#          sitename:
#            type: string
#            description: "Name of the site the zone belongs to"

  TrafficFilter:
    type: object
    properties:
      trafficdetectioneventid:
        description: Event uuid to filter on
        type: string
      eventid:
        description: Event uuid to filter on
        type: string
      detection_area_uuid:
        description: TrafficDetectionArea uuid to filter on
        type: string
      tag:
        description: Tag to filter on
        type: string
      timeResolution:
        description: Time resolution (15min, 1hr, 1day)
        type: string
        enum:
          - 15min
          - 1hr
          - 1day
      spatialResolution:
        description: Spatial resolution
        type: string
        enum:
          - site
          #- customer
          #- zip_code
          #- street
          #- detection_object
      object_class:
        description: Detected Object type
        type: string
        enum:
          #- pedestrian
          - bicycle
          - car
          - person
          - bus
          - truck
          - disabled
          - unknown
          - motorcycle
      shape:
        type: array
        items:
          $ref: "#/definitions/LatLonPair"
      active_filter:
        description: Active, Inactive or All
        type: string
        default: "active"
        enum:
          - active
          - inactive
          - all
      startTime:
        description: Start time
        type: string
      endTime:
        description: Start time
        type: string
      return_fields:
        description: "A user should be able to specify which fields they want returned.  If this field is blank then return all fields; if it is populated only return the UUID and the specified fields."
        type: array
        items:
          type: string

  TrafficPoint:
    allOf:
      - $ref: "#/definitions/NewTrafficPoint"
      - required:
        - trafficpointid
        properties:
          trafficpointid:
            description: "The UUID of a particular point (assigned by the Sensity platform)"
            type: string
  NewTrafficPoint:
    type: object
    required:
      - latitude
      - longitude
    properties:
      latitude:
        description: "WGS84 Latitude"
        type: string
        pattern: '^\-?\d+(\.\d+)?$'
      longitude:
        description: "WGS84 Longitude"
        type: string
        pattern: '^\-?\d+(\.\d+)?$'
      altitude:
        description: "Altitude (in meters?) of a point"
        type: integer
      vieved_by:
        description: "An array of the Video Node/camera channel pairs that can see this point."
        type: array
        items:
          type: object
          required:
            - nodeid
            - camera_channel
            - image_coordinates
          properties:
            nodeid:
              description: "Id of the node (uuid)"
              type: string
            camera_channel:
              description: "Camera Channel"
              type: integer
            image_coordinates:
              description: "X/Y coordinates on image"
              type: object
              allOf:
                - $ref: "#/definitions/XYPair"
      tags:
        description: "A list of any tags associated with this point (comma separated list of keywords)"
        type: string
      detection_areas:
        description: "List any Detection Areas that use this Point in their boundary definition (Array of UUIDs)"
        type: array
        items:
          description: "Detection Area UUID"
          type: string
      openstreetmap_nodeid:
        description: "If the latitude and longitude of a Sensity point perfectly match an OpenStreetMap Node then that Node's ID should be populated here"
        type: string

  # Traffic Way
  TrafficWay:
    allOf:
      - $ref: "#/definitions/NewTrafficWay"
      - required:
        - trafficwayid
        properties:
          trafficwayid:
            description: "The UUID of a particular point (assigned by the Sensity platform)"
            type: string
  NewTrafficWay:
    type: object
    required:
      - points
      - detection_areas
      - detection_events
    properties:
      points:
        description: "Array of appropriate Sensity Points objects which define this Detection Area."
        type: array
        items:
          type: object
          required:
            - pointid
            - latitude
            - longitude
            - openstreetmap_nodeid
          properties:
            pointid:
              description: "Id of the point (uuid)"
              type: string
            latitude:
              description: "Point WGS84 Latitude"
              type: string
              pattern: '^\-?\d+(\.\d+)?$'
            longitude:
              description: "Point WGS84 Longitude"
              type: string
              pattern: '^\-?\d+(\.\d+)?$'
            openstreetmap_nodeid:
              description: "If the latitude and longitude of a Sensity point perfectly match an OpenStreetMap Node then that Node's ID should be populated here"
              type: string
      detection_areas:
        description: "The list of Detection Areas associated with a way (these may either be directly associated with the way itself OR associated with the way's composite points). (Array of UUIDs)"
        type: array
        items:
          description: "Detection Area UUID"
          type: string
      detection_events:
        description: "The list of Detection Events associated with the Detection Area(s) that track information along this way. (Array of UUIDs)"
        type: array
        items:
          description: "Detection Event UUID"
          type: string
      lanes_forward:
        description: "If Sensity is tracking lane-by-lane traffic along this way, this field should convey how many lanes are traveling in the forward direction (see forward/backward definition in the lanes definition above)."
        type: integer
      lanes_forward_events:
        description: "This field should convey which traffic lanes have available data. Following the OSM (see http://www.openstreetmap.org/way/110797422 for an example), the syntax should be: Detection Event UUID#1|Detection Event UUID#2 where these two detection events are covering adjacent lanes. If Sensity is missing data for a lane, that lane should be blank (e.g. if there are three lanes and Sensity is only covering the first and the third, it should be Detection Event UUID#1||Detection Event UUID#2)"
        type: string
      lanes_backward:
        description: "This field should convey how many lanes are traveling in the backward direction (see forward/backward definition in the lanes definition above)."
        type: integer
      lanes_backward_events:
        description: "This field should convey which traffic lanes have available data. Following the OSM (see http://www.openstreetmap.org/way/110797422 for an example), the syntax should be: Detection Event UUID#1|Detection Event UUID#2 where these two detection events are covering adjacent lanes. If Sensity is missing data for a lane, that lane should be blank (e.g. if there are three lanes and Sensity is only covering the first and the third, it should be Detection Event UUID#1||Detection Event UUID#2)"
        type: string
      cycleway:
        description: "This is a placeholder for when we have bicycle counting capabilities (coming in the Coffee Release)."
        type: string
      point_was_area:
        description: "The OpenStreetMap ID of the Way associated with this Sensity Way."
        type: string
      intersection:
        description: "The OpenStreetMap ID of the intersection Point with which this detection object is associated."
        type: string
      tags:
        description: "A list of any tags associated with this point (comma separated list of keywords)"
        type: string

  # Traffic detection area
  TrafficDetectionArea:
    allOf:
      - $ref: "#/definitions/NewTrafficDetectionArea"
      - required:
        - trafficdetectionareaid
        properties:
          trafficdetectionareaid:
            description: "The RegionOfInterest (ROI) UUID, as configured by the Video Node)"
            type: string
  NewTrafficDetectionArea:
    type: object
    required:
      - name
      - detection_event_uuid
      - node_uuids
      - configured_date
      - configured_by
      - enabled
      - tags
      - area_type
    properties:
      name:
        description: "The ROI name, as sent by the Video Node"
        type: string
      detection_event_uuid:
        description: "The Detection Event UUIDs that utilize this Detection Area (sent by the Video Node)"
        type: string
      node_uuids:
        description: "The UUID of the Video Node and the integer of the camera channel that is tracking this Detection Area, and the image and real-world coordinates of the boundaries of the Detection Area."
        type: array
        items:
          type: object
      configured_date:
        description: "The date this region of interest was first configured."
        type: string
        format: date-time
      configured_by:
        description: "As passed by the node, this should be whoever signed off on the WebGUI config page."
        type: string
      revised_date:
        description: "If the region of interest parameters have changed this should be the timestamp of when that change was made."
        type: string
        format: date-time
      revised_by:
        description: "  If the region of interest parameters have changed this should be whoever signed off on the revision in the WebGUI config page."
        type: string
      enabled:
        description: "If the event is currently enabled this is true, else false."
        type: boolean
      tags:
        description: "Each event that utilizes this Detection Area may have a list of semantic tags. This field should enumerate all the tags that are associated with the events that belong to this Detection Area, as sent by the Video Node"
        type: string
      area_type:
        description: "Populated based on the count of image/real world coordinate pairs"
        type: string
        enum:
          - line
          - rectangle
          - polygon
      points:
        description: "Array of appropriate Sensity Points objects which define this Detection Area."
        type: array
        items:
          type: object
          required:
            - pointid
            - latitude
            - longitude
            - openstreetmap_nodeid
          properties:
            pointid:
              description: "Id of the point (uuid)"
              type: string
            latitude:
              description: "Point WGS84 Latitude"
              type: string
              pattern: '^\-?\d+(\.\d+)?$'
            longitude:
              description: "Point WGS84 Longitude"
              type: string
              pattern: '^\-?\d+(\.\d+)?$'
            openstreetmap_nodeid:
              description: "If the latitude and longitude of a Sensity point perfectly match an OpenStreetMap Node then that Node's ID should be populated here"
              type: string
      ways:
        description: "The UUID(s) of the associated way (if they exist) (Array of UUIDs)"
        type: array
        items:
          description: "Way UUID"
          type: string
      lane:
        description: "If a Detection Event associated with this Detection Area includes the tag traffic-lane, then this field should be populated. The syntax should be direction (forward or backward) : Lane # - e.g. forward:2"
        type: string
      configuration_log:
        description: "A log tracking the any changes in the configured date, configured by, and enabled fields."
        type: object

  # Traffic detection event
  TrafficDetectionEvent:
    description: "Each video analytic event should create a corresponding Detection Event in the Sensity platform. Each Detection Event should be associated with a Detection Area. A Detection Event's information should reprise the event information that the platform receives from the event config header sent by a Video Node. A Detection Event conveys the particulars about what a Video Node is sensing within a given Detection Area."
    allOf:
      - $ref: "#/definitions/NewTrafficDetectionEvent"
      - required:
        - trafficdetectioneventid
        properties:
          trafficdetectioneventid:
            description: "The Event UUID, as sent by the Video Node."
            type: string
  NewTrafficDetectionEvent:
    type: object
    required:
      - name
      - detection_area_uuid
      - node_uuid
      - channel
      - direction_of_travel
      - object_types
      - configured_date
      - configured_by
      - enabled
      - description
      - tags
      - configuration_log
    properties:
      name:
        description: "The Event name, as sent by the Video Node."
        type: string
      detection_area_uuid:
        description: "The UUID of the Detection Area where this event has been configured."
        type: string
      node_uuid:
        description: "The UUID of the node that is tracking this Event."
        type: string
      channel:
        description: "The camera channel that is tracking this Event."
        type: string
      lane:
        description: "If this Detection Event includes the tag traffic-lane, then this field should be populated. The syntax should be direction (forward or backward) : Lane # - e.g. forward:2."
        type: string
      direction_of_travel:
        description: "this field should populate a vector that indicates the expected direction of travel for objects picked up by this Detection Event."
        type: array
        items:
          $ref: "#/definitions/XYPair"
      object_types:
        description: "A list of object types that will be detected by this event."
        type: array
        items:
          type: string
          enum:
            - car
            - pedestrian
      configured_date:
        description: "The date this event was first configured."
        type: string
        format: date-time
      configured_by:
        description: "As passed by the Video Node, this should be whoever signed off on the WebGUI config page."
        type: string
      revised_date:
        description: "If the event parameters have changed this should be the timestamp of when that change was made.If the event parameters have changed this should be the timestamp of when that change was made."
        type: string
        format: date-time
      revised_by:
        description: "If the event parameters have changed this should be whoever signed off on the revision in the WebGUI config page."
        type: string
      enabled:
        description: "If the event is currently enabled this is true, else false."
        type: boolean
      description:
        description: "The event description, as sent by the Video Node"
        type: string
      tags:
        description: "The list of tags associated with this particular event."
        type: string
      configuration_log:
        description: "A log tracking the any changes in the configured date, configured by, and enabled fields."
        type: object


  # Traffic detection object
  TrafficDetectedObject:
    description: "Each video analytic event should create a corresponding Detection Event in the Sensity platform. Each Detection Event should be associated with a Detection Area. A Detection Event's information should reprise the event information that the platform receives from the event config header sent by a Video Node. A Detection Event conveys the particulars about what a Video Node is sensing within a given Detection Area."
    allOf:
      - $ref: "#/definitions/NewTrafficDetectedObject"
      - required:
        - trafficdetectedobjectid
        properties:
          trafficdetectedobjectid:
            description: "The Object UUID, as passed by the Video Node."
            type: string
  NewTrafficDetectedObject:
    type: object
    required:
      - detectioneventid
      - class
      - image_bounding_box
      - world_bounding_box
      - world_velocity
    properties:
      line_crossing_timestamp:
        description: "If Detection Area type = Line then this field should be populated, and the other two fields should be blank."
        type: string
        format: date-time
      entered_detection_area_timestamp:
        description: "  If Detection Area type = (not Line) then this field should be populated, and the Line Crossing field left blank."
        type: string
        format: date-time
      exited_detection_area_timestamp:
        description: "If Detection Area type = (not Line) then this field should be populated, and the Line Crossing field left blank."
        type: string
        format: date-time
      detectioneventid:
        description: "The Detection Event UUID."
        type: string
      detectionareaid:
        description: "The Detection Area UUID."
        type: string
      class:
        description: "The Object class (car, truck, pedestrian, bicycle, etc), as passed by the Video Node."
        type: string
      image_bounding_box:
        description: "Bounding box in image (x,y) coordinates."
        type: array
        items:
          $ref: "#/definitions/XYPair"
      world_bounding_box:
        description: "Bounding box in world (lat,lon) coordinates."
        type: array
        items:
          $ref: "#/definitions/LatLonPair"
      height:
        description: "Height of object in meters"
        type: number
        format: double
      position_precision:
        description: "World position precision, in meters"
        type: number
        format: double
      image_velocity:
        description: "Centroid velocity in image"
        $ref: "#/definitions/XYPair"
      world_velocity:
        description: "Centroid velocity in world plane"
        $ref: "#/definitions/LatLonPair"
      since:
        description: "The time at which the object was first detected."
        type: string
        format: date-time
      dwell:
        description: "The time, in milliseconds, that an object was detected. Only applicable if Since is also populated."
        type: integer
      still_image:
        description: "If enabled, the system should be capable of requesting and storing a still image associated with a specific object UUID."
        type: object

  # Traffic config object
  TrafficConfig:
    description: "Traffic Config object"
    type: object
    required:
      - eventid
      - name
      - nodeid
    properties:
      eventid:
        description: "The Detection Event UUID, as passed by the Video Node."
        type: string
      configured_date:
        description: "Last modification time"
        type: string
        format: date-time
      orgid:
        description: "Org ID"
        type: string
      site:
        description: "Site ID."
        type: string
      user:
        description: "User id"
        type: string
      nodeid:
        description: "Node ID."
        type: string
      name:
        description: "Object name"
        type: string
      enabled:
        description: "If the event is currently enabled this is true, else false."
        type: boolean
      tags:
        description: "The list of tags associated with this particular event."
        type: array
        items:
          type: string
      roi:
        description: "Region of interest."
        $ref: "#/definitions/Roi"

  Roi:
    type: object
    required:
      - roiid
    properties:
      roiid:
        description: "Reagion of interest ID."
        type: string
      name:
        description: "Region name."
        type: string
      image_bounding_box:
        description: "Bounding box in image (x,y) coordinates."
        type: array
        items:
          $ref: "#/definitions/XYPair"
      world_bounding_box:
        description: "Bounding box in world (lat,lon) coordinates."
        type: array
        items:
          $ref: "#/definitions/LatLonPair"

  Server:
    allOf:
      - $ref: "#/definitions/Nodes"
    type: object
    required:
      - nodeList
      - server
    properties:
      server:
        type: string


  NewMerlinConfig:
    type: object
    properties:
      Genetec.General.Brand.CompanyName:
        type: string
        default: "Sensity"
      Genetec.General.Brand.ModelName:
        type: string
        default: "Video Node"
      Genetec.General.FirmwareVersion:
        type: string
        default: "1.0"
      Genetec.General.ProtocolVersion:
        type: string
        default: "1.0"
      Genetec.Network.Services.Http.Port:
        type: integer
        default: 8000
      Genetec.custom_events:
        type: string
        default: "enter,left"
      alarm.redis.memory_threshold:
        type: number
        format: double
        default: 0.9
      application_server:
        type: string
        default: "webrtc.sensity.com"
      application_server_port:
        type: integer
        default: 8443
      camera.0.binning:
        type: boolean
        default: false
      camera.0.enabled:
        type: boolean
        default: true
      camera.0.exposure:
        type: integer
        default: 33333
      camera.0.gain:
        type: number
        format: float
        default: 1.0
      camera.0.master:
        type: integer
        default: 0
      camera.0.streamH.bitrate:
        type: integer
        default: 10000000
      camera.0.streamH.format:
        type: string
        default: "1080p"
      camera.0.streamH.framerate:
        type: integer
        default: 30
      camera.0.streamH.gopsize:
        type: integer
        default: 30
      camera.0.streamH.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.diskquota:
        type: number
        format: float
        default: 0.5
      camera.0.streamH.storage.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.0.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.0.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.0.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.0.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.0.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.0.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.0.streamL.bitrate:
        type: integer
        default: 2500000
      camera.0.streamL.format:
        type: string
        default: "720p"
      camera.0.streamL.framerate:
        type: integer
        default: 10
      camera.0.streamL.gopsize:
        type: integer
        default: 5
      camera.0.streamL.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.diskquota:
        type: number
        format: float
        default: 0.5
      camera.0.streamL.storage.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.0.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordrestart:
        type: string
        default: "0"
      camera.1.enabled:
        type: boolean
        default: true
      camera.1.streamH.bitrate:
        type: integer
        default: 10000000
      camera.1.streamH.format:
        type: string
        default: "1080p"
      camera.1.streamH.framerate:
        type: integer
        default: 30
      camera.1.streamH.gopsize:
        type: integer
        default: 30
      camera.1.streamH.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.diskquota:
        type: number
        format: float
        default: 0
      camera.1.streamH.storage.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.1.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.1.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.1.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.1.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.1.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.1.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.1.streamL.bitrate:
        type: integer
        default: 2500000
      camera.1.streamL.format:
        type: string
        default: "720p"
      camera.1.streamL.framerate:
        type: integer
        default: 10
      camera.1.streamL.gopsize:
        type: integer
        default: 5
      camera.1.streamL.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.diskquota:
        type: number
        format: float
        default: 0
      camera.1.streamL.storage.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.1.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordrestart:
        type: string
        default: "0"
      debugmode:
        type: boolean
        default: true
      evtgrab.capint:
        type: integer
        default: 3600
      evtgrab.dint:
        type: integer
        default: 600
      evtgrab.dir:
        type: string
        default: "/disk/evtgrab"
      evtgrab.nfiles:
        type: integer
        default: 1000
      medianode.ap_supported:
        type: boolean
        default: false
      medianode.commissioned:
        type: boolean
        default: false
      mediaserver.nomve:
        type: boolean
        default: false
      mediaserver.rtspsrc:
        type: string
        default: ""
      mediaserver.video_codec:
        type: string
        default: "h264"
      mediaserver.wmm_qos:
        type: boolean
        default: true
      network.eth-x.ip:
        type: string
        default: ""
      network.eth-x.method:
        type: string
        default: "auto"
      network.eth-x.netmask:
        type: integer
        default: 24
      network.eth-x.port-forwarding.genetec:
        type: string
        default: ""
      network.eth-x.port-forwarding.https:
        type: string
        default: ""
      network.eth-x.port-forwarding.rtsp:
        type: string
        default: ""
      network.eth-x.port-forwarding.ssh:
        type: string
        default: ""
      network.eth-x.whitelist:
        type: string
        default: ""
      network.firewall.ports:
        type: string
        default: ""
      network.firewall.protocols:
        type: string
        default: ""
      network.server.vpn:
        type: string
        default: "medianodevpn.sensity.com"
      network.vpn_on_demand:
        type: boolean
        default: false
      rtsp.service:
        type: integer
        default: 554
      sensor-events.maxqlen:
        type: integer
        default: 1024
      sensor.p.dint:
        type: integer
        default: 530
      sensor.p.mode:
        type: integer
        default: 2
      sensor.p.pint:
        type: integer
        default: 3e8
      storage.maxsessions:
        type: integer
        default: 15
      storageserver.cache_size:
        type: number
        format: int64
        default: 10000000000
      storageserver.max_clip_size:
        type: number
        format: int64
        default: 200000000
      vaevent.bucket_depth:
        type: integer
        default: 100
      vaevent.bucket_drop:
        type: integer
        default: 10
      vaevent.bucket_interval:
        type: string
        default: "1"
      vaevent.qlen:
        type: integer
        default: 500

  NewVDKConfig:
    type: object
    properties:
      alarm.redis.memory_threshold:
        type: number
        format: double
        default: 0.9
      application_server:
        type: string
        default: "webrtc.sensity.com"
      application_server_port:
        type: integer
        default: 8443
      debugmode:
        type: boolean
        default: true
      medianode.ap_supported:
        type: boolean
        default: false
      medianode.commissioned:
        type: boolean
        default: true
      network.eth-x.ip:
        type: string
        default: "172.17.100.1"
      network.eth-x.ipv6.method:
        type: string
        default: "ignore"
      network.eth-x.method:
        type: string
        default: "auto"
      network.eth-x.netmask:
        type: integer
        default: 24
      network.eth-x.port-forwarding.genetec:
        type: string
        default: ""
      network.eth-x.port-forwarding.https:
        type: string
        default: ""
      network.eth-x.port-forwarding.rtsp:
        type: string
        default: ""
      network.eth-x.port-forwarding.ssh:
        type: string
        default: ""
      network.eth-x.whitelist:
        type: string
        default: ""
      network.firewall.ports:
        type: string
        default: ""
      network.firewall.protocols:
        type: string
        default: ""
      network.server.mqtt:
        type: string
        default: "mqtt.sensity.com"
      network.server.vpn:
        type: string
        default: "medianodevpn.sensity.com"
      network.vpn_on_demand:
        type: boolean
        default: false
      sensor-events.maxqlen:
        type: integer
        default: 1024
      sensor.p.dint:
        type: integer
        default: 530
      sensor.p.mode:
        type: integer
        default: 2
      sensor.p.pint:
        type: integer
        default: 3e8
      server:
        type: string
        default: "prod.sensity.com"
      token:
        type: string
        default: "0"
      vaevent.bucket_depth:
        type: integer
        default: 100
      vaevent.bucket_drop:
        type: integer
        default: 10
      vaevent.bucket_interval:
        type: string
        default: "1"
      vaevent.qlen:
        type: integer
        default: 500

  NewNGCNConfig:
    type: object
    properties:
      camera.0.autoexposure:
        type: boolean
        default: true
      camera.0.autogain:
        type: boolean
        default: true
      camera.0.colortemp:
        type: integer
        default: 6500
      camera.0.exposure:
        type: integer
        default: 15
      camera.0.flickermode:
        type: string
        default: 60Hz
      camera.0.gain:
        type: integer
        default: 15
      camera.0.indoormode:
        type: boolean
        default: false
      camera.0.scanmode:
        type: string
        default: ""
      camera.0.wdrmode:
        type: boolean
        default: true
      camera.1.autoexposure:
        type: boolean
        default: true
      camera.1.autogain:
        type: boolean
        default: true
      camera.1.colortemp:
        type: integer
        default: 6500
      camera.1.exposure:
        type: integer
        default: 15
      camera.1.flickermode:
        type: string
        default: 60Hz
      camera.1.gain:
        type: integer
        default: 15
      camera.1.indoormode:
        type: boolean
        default: false
      camera.1.scanmode:
        type: string
        default: ""
      camera.1.wdrmode:
        type: boolean
        default: true
      Genetec.General.Brand.CompanyName:
        type: string
        default: "Sensity"
      Genetec.General.Brand.ModelName:
        type: string
        default: "Video Node"
      Genetec.General.ProtocolVersion:
        type: string
        default: "1.00"
      Genetec.Network.Services.Http.Port:
        type: integer
        default: 8000
      Genetec.General.FirmwareVersion:
        type: string
        default: "1.00"
      Genetec.custom_events:
        type: string
        default: "enter,left"
      camera.0.enabled:
        type: boolean
        default: true
      camera.0.streamH.bitrate:
        type: integer
        default: 2500000
      camera.0.streamH.format:
        type: string
        default: "720p"
      camera.0.streamH.framerate:
        type: integer
        default: 15
      camera.0.streamH.gopsize:
        type: integer
        default: 30
      camera.0.streamH.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.0.streamH.storage.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.0.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.0.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.0.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.0.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.0.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.0.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.0.streamL.bitrate:
        type: integer
        default: 500000
      camera.0.streamL.format:
        type: string
        default: "360p"
      camera.0.streamL.framerate:
        type: integer
        default: 5
      camera.0.streamL.gopsize:
        type: integer
        default: 5
      camera.0.streamL.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.0.streamL.storage.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.0.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordrestart:
        type: string
        default: "0"
      camera.1.enabled:
        type: boolean
        default: true
      camera.1.streamH.bitrate:
        type: integer
        default: 2500000
      camera.1.streamH.format:
        type: string
        default: "720p"
      camera.1.streamH.framerate:
        type: integer
        default: 15
      camera.1.streamH.gopsize:
        type: integer
        default: 30
      camera.1.streamH.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.1.streamH.storage.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.1.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.1.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.1.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.1.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.1.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.1.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.1.streamL.bitrate:
        type: integer
        default: 500000
      camera.1.streamL.format:
        type: string
        default: "360p"
      camera.1.streamL.framerate:
        type: integer
        default: 5
      camera.1.streamL.gopsize:
        type: integer
        default: 5
      camera.1.streamL.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.1.streamL.storage.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.1.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordrestart:
        type: string
        default: "0"
      evtgrab.capint:
        type: integer
        default: 3600
      evtgrab.dint:
        type: integer
        default: 600
      evtgrab.dir:
        type: string
        default: "/disk/evtgrab"
      evtgrab.nfiles:
        type: integer
        default: 1000
      mediaserver.nomve:
        type: boolean
        default: false
      mediaserver.video_codec:
        type: string
        default: "h264"
      mediaserver.wmm_qos:
        type: boolean
        default: true
      rtsp.service:
        type: integer
        default: 554
      storage.maxsessions:
        type: integer
        default: 15
      storageserver.cache_size:
        type: integer
        format: int64
        default: 10000000000
      storageserver.max_clip_size:
        type: integer
        format: int64
        default: 200000000
      alarm.redis.memory_threshold:
        type: number
        format: float
        default: 0.9
      application_server:
        type: string
        default: "webrtc.sensity.com"
      application_server_port:
        type: integer
        default: 8443
      debugmode:
        type: boolean
        default: true
      sensor-events.maxqlen:
        type: integer
        default: 1024
      sensor.p.dint:
        type: integer
        default: 530
      sensor.p.mode:
        type: integer
        default: 2
      sensor.p.pint:
        type: integer
        default: 3e8
      server:
        type: string
        default: "prod.sensity.com"
      vaevent.bucket_depth:
        type: integer
        default: 100
      vaevent.bucket_drop:
        type: integer
        default: 10
      vaevent.bucket_interval:
        type: string
        default: "1"
      vaevent.qlen:
        type: integer
        default: 500
      medianode.commissioned:
        type: boolean
        default: false
      network.nowifi:
        type: boolean
        default: false
      network.region:
        type: string
        default: "US"
      network.wlan-x.ipv6.method:
        type: string
        default: "ignore"
      network.wlan-x.security:
        type: string
        default: "wpa2p"
      network.wlan-x.security.bgscan-long-interval:
        type: integer
        default: 360
      network.wlan-x.security.bgscan-short-interval:
        type: integer
        default: 60
      network.wlan-x.security.bgscan-signal-threshold:
        type: integer
        default: -60
      network.wlan-x.security.psk:
        type: string
        default: "netsense"
      network.wlan-x.ssid:
        type: string
        default: "SensityDefault"
      network.wlan-y.ipv6.method:
        type: string
        default: "ignore"
      network.wlan-y.security:
        type: string
        default: "wpa2p"
      network.wlan-y.security.bgscan-long-interval:
        type: integer
        default: 360
      network.wlan-y.security.bgscan-short-interval:
        type: integer
        default: 60
      network.wlan-y.security.bgscan-signal-threshold:
        type: integer
        default: -60
      network.wlan-y.security.psk:
        type: string
        default: "kentspeed"
      network.wlan-y.ssid:
        type: string
        default: "XeraL2"
      network.nocell:
        type: boolean
        default: true

  NewFalconConfig:
    type: object
    properties:
      camera.0.autoexposure:
        type: boolean
        default: true
      camera.0.autogain:
        type: boolean
        default: true
      camera.0.colortemp:
        type: integer
        default: 6500
      camera.0.exposure:
        type: integer
        default: 15
      camera.0.flickermode:
        type: string
        default: 60Hz
      camera.0.gain:
        type: integer
        default: 15
      camera.0.indoormode:
        type: boolean
        default: false
      camera.0.scanmode:
        type: string
        default: ""
      camera.0.master:
        type: integer
        default: 0
      camera.0.wdrmode:
        type: boolean
        default: true
      camera.1.autoexposure:
        type: boolean
        default: true
      camera.1.autogain:
        type: boolean
        default: true
      camera.1.colortemp:
        type: integer
        default: 6500
      camera.1.exposure:
        type: integer
        default: 15
      camera.1.flickermode:
        type: string
        default: 60Hz
      camera.1.gain:
        type: integer
        default: 15
      camera.1.indoormode:
        type: boolean
        default: false
      camera.1.scanmode:
        type: string
        default: ""
      camera.1.wdrmode:
        type: boolean
        default: true
      Genetec.General.Brand.CompanyName:
        type: string
        default: "Sensity"
      Genetec.General.Brand.ModelName:
        type: string
        default: "Video Node"
      Genetec.General.ProtocolVersion:
        type: string
        default: "1.00"
      Genetec.Network.Services.Http.Port:
        type: integer
        default: 8000
      Genetec.General.FirmwareVersion:
        type: string
        default: "1.00"
      Genetec.custom_events:
        type: string
        default: "enter,left"
      camera.0.enabled:
        type: boolean
        default: true
      camera.0.streamH.bitrate:
        type: integer
        default: 2500000
      camera.0.streamH.format:
        type: string
        default: "720p"
      camera.0.streamH.framerate:
        type: integer
        default: 15
      camera.0.streamH.gopsize:
        type: integer
        default: 30
      camera.0.streamH.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.0.streamH.storage.path:
        type: string
        default: "/0/H"
      camera.0.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.0.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.0.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.0.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.0.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.0.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.0.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.0.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.0.streamL.bitrate:
        type: integer
        default: 500000
      camera.0.streamL.format:
        type: string
        default: "360p"
      camera.0.streamL.framerate:
        type: integer
        default: 5
      camera.0.streamL.gopsize:
        type: integer
        default: 5
      camera.0.streamL.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.0.streamL.storage.path:
        type: string
        default: "/0/L"
      camera.0.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.0.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.0.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.0.streamL.storage.recordrestart:
        type: string
        default: "0"
      camera.1.enabled:
        type: boolean
        default: true
      camera.1.streamH.bitrate:
        type: integer
        default: 2500000
      camera.1.streamH.format:
        type: string
        default: "720p"
      camera.1.streamH.framerate:
        type: integer
        default: 15
      camera.1.streamH.gopsize:
        type: integer
        default: 30
      camera.1.streamH.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.1.streamH.storage.path:
        type: string
        default: "/1/H"
      camera.1.streamH.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamH.storage.recordmode:
        type: integer
        default: 0
      camera.1.streamH.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamH.storage.recordrestart:
        type: string
        default: "0"
      camera.1.streamH.storage.vaqa.0.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.0.interval:
        type: string
        default: "1h"
      camera.1.streamH.storage.vaqa.0.qty:
        type: integer
        default: 24
      camera.1.streamH.storage.vaqa.status:
        type: string
        default: ""
      camera.1.streamH.storage.vaqa.1.duration:
        type: string
        default: "3m"
      camera.1.streamH.storage.vaqa.1.interval:
        type: string
        default: "25h"
      camera.1.streamH.storage.vaqa.1.qty:
        type: integer
        default: 0
      camera.1.streamL.bitrate:
        type: integer
        default: 500000
      camera.1.streamL.format:
        type: string
        default: "360p"
      camera.1.streamL.framerate:
        type: integer
        default: 5
      camera.1.streamL.gopsize:
        type: integer
        default: 5
      camera.1.streamL.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.diskquota:
        type: number
        format: float
        default: 0.25
      camera.1.streamL.storage.path:
        type: string
        default: "/1/L"
      camera.1.streamL.storage.recordevents:
        type: string
        default: "Car Entering"
      camera.1.streamL.storage.recordmode:
        type: integer
        default: 1
      camera.1.streamL.storage.recordpostamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordpreamble:
        type: integer
        default: 30
      camera.1.streamL.storage.recordrestart:
        type: string
        default: "0"
      evtgrab.capint:
        type: integer
        default: 3600
      evtgrab.dint:
        type: integer
        default: 600
      evtgrab.dir:
        type: string
        default: "/disk/evtgrab"
      evtgrab.nfiles:
        type: integer
        default: 1000
      mediaserver.nomve:
        type: boolean
        default: false
      mediaserver.video_codec:
        type: string
        default: "h264"
      mediaserver.wmm_qos:
        type: boolean
        default: true
      rtsp.service:
        type: integer
        default: 554
      storage.maxsessions:
        type: integer
        default: 15
      storageserver.cache_size:
        type: integer
        format: int64
        default: 10000000000
      storageserver.max_clip_size:
        type: integer
        format: int64
        default: 200000000
      network.ppp-x.apn:
        type: string
        default: "VZWINTERNET"
      alarm.redis.memory_threshold:
        type: number
        format: float
        default: 0.9
      application_server:
        type: string
        default: "webrtc.sensity.com"
      application_server_port:
        type: integer
        default: 8443
      debugmode:
        type: boolean
        default: true
      sensor-events.maxqlen:
        type: integer
        default: 1024
      sensor.p.dint:
        type: integer
        default: 530
      sensor.p.mode:
        type: integer
        default: 2
      sensor.p.pint:
        type: integer
        default: 3e8
      server:
        type: string
        default: "prod.sensity.com"
      vaevent.bucket_depth:
        type: integer
        default: 100
      vaevent.bucket_drop:
        type: integer
        default: 10
      vaevent.bucket_interval:
        type: string
        default: "1"
      vaevent.qlen:
        type: integer
        default: 500
      medianode.commissioned:
        type: boolean
        default: false
      network.eth-x.ip:
        type: string
        default: "172.17.100.1"
      network.eth-x.method:
        type: string
        default: "auto"
      network.eth-x.netmask:
        type: integer
        default: 24
      network.eth-x.whitelist:
        type: string
        default: ""
      network.eth-x.port-forwarding.ssh:
        type: string
        default: ""
      network.eth-x.port-forwarding.rtsp:
        type: string
        default: ""
      network.firewall.protocols:
        type: string
        default: ""
      network.firewall.ports:
        type: string
        default: ""
      network.server.mqtt:
        type: string
        default: "mqtt.sensity.com"
      network.server.vpn:
        type: string
        default: "medianodevpn.sensity.com"
      network.vpn_on_demand:
        type: boolean
        default: false
      network.nowifi:
        type: boolean
        default: true
      network.region:
        type: string
        default: "US"
      secmgmnt.dauth.SensityDefault.medianode:
        type: string
        default: "99b17812107974e555d51d9f1c175fde"
      secmgmnt.dauth.SensityDefault.VMS:
        type: string
        default: "9c26c1d1197af1b691659ca4aa5aef4e"
      secmgmnt.dauth.SensityDefault.storage:
        type: string
        default: "1de77724b91358df3677800df36f453c"
      secmgmnt.certmgr.ssh.standard.sensity.pub.ca:
        type: string
      secmgmnt.certmgr.ssh.standard.sensity.pub.key:
        type: string
      secmgmnt.certmgr.ssh.commissioning.sensity.pub.ca:
        type: string

  Config:
    allOf:
      - $ref: "#/definitions/NewConfig"
      - required:
        - configid
        properties:
          configid:
            type: string
  NewConfig:
    allOf:
      - $ref: "#/definitions/NewCoreConfig"
      - $ref: "#/definitions/NewFalconConfig"
      - $ref: "#/definitions/NewMerlinConfig"
      - $ref: "#/definitions/NewNGCNConfig"
      - $ref: "#/definitions/NewVDKConfig"

  NewCoreConfig:
    type: object
    required:
        - model
    properties:
      name:
        type: string
      model:
        type: string
        enum:
          - unode-v2
          - unode-v3
          - unode-v4
          - unode-v5
          - unode-v6
          - falcon-q
          - merlin
          - cnext
          - vdkmaster
      networkXSSID:
        type: string
      networkXSecurity:
        type: string
      networkYSSID:
        type: string
      networkYSecurity:
        type: string
      networkXPasskey:
        type: string
      networkYPasskey:
        type: string
      debugmode:
        type: boolean
        default: true
      telnet:
        type: boolean
        default: true
      network_region:
        type: string
        default: "US"
      vpn_on_demand:
        type: boolean
        default: false
      ota_disable:
        type: boolean
        default: false
      aux_power:
        type: boolean
        default: true
      sensor_rf_pint:
        type: integer
        description: Signal strength sensor poll interval
      sensor_rf_dint:
        type: integer
        description: Signal strength sensor debounce interval
      sensor_rf_mode:
        type: integer
        description: Signal strength sensor mode
      sensor_v_pint:
        type: integer
        description: Voltage sensor poll interval
      sensor_v_dint:
        type: integer
        description: Voltage sensor debounce interval
      sensor_v_mode:
        type: integer
        description: Voltage sensor mode
      sensor_ai_pint:
        type: integer
        description: Auxillary current sensor poll interval
      sensor_ai_dint:
        type: integer
        description: Auxillary current sensor debounce interval
      sensor_ai_mode:
        type: integer
        description: Auxillary current sensor mode
      sensor_aw_pint:
        type: integer
        description: Auxillary power sensor poll interval
      sensor_aw_dint:
        type: integer
        description: Auxillary power sensor pdebounce interval
      sensor_aw_mode:
        type: integer
        description: Auxillary power sensor pmode
      sensor_aPF_pint:
        type: integer
        description: Auxillary power factor sensor poll interval
      sensor_aPF_dint:
        type: integer
        description: Auxillary power factor sensor debounce interval
      sensor_aPF_mode:
        type: integer
        description: Auxillary power factor sensor mode
      sensor_mi_pint:
        type: integer
        description: Main current sensor poll interval
      sensor_mi_dint:
        type: integer
        description: Main current sensor debounce interval
      sensor_mi_mode:
        type: integer
        description: Main current sensor mode
      sensor_mw_pint:
        type: integer
        description: Main power sensor poll interval
      sensor_mw_dint:
        type: integer
        description: Main power sensor debounce interval
      sensor_mw_mode:
        type: integer
        description: Main power sensor mode
      sensor_mPF_pint:
        type: integer
        description: Main power factor sensor poll interval
      sensor_mPF_dint:
        type: integer
        description: Main power factor sensor debounce interval
      sensor_mPF_mode:
        type: integer
        description: Main power factor sensor mode
      sensor_lIR_pint:
        type: integer
        description: Infrared sensor poll interval
      sensor_lIR_dint:
        type: integer
        description: Infrared sensor debounce interval
      sensor_lIR_mode:
        type: integer
        description: Infrared sensor mode
      sensor_l_pint:
        type: integer
        description: Light sensor poll interval
      sensor_l_dint:
        type: integer
        description: Light sensor debounce interval
      sensor_l_mode:
        type: integer
        description: Light sensor mode
      sensor_p_pint:
        type: integer
        description: Presence sensor poll interval
      sensor_p_dint:
        type: integer
        description: Presence sensor debounce interval
      sensor_p_mode:
        type: integer
        description: Presence sensor mode
      sensor_pc_pint:
        type: integer
        description: Presence count sensor poll interval
      sensor_pc_dint:
        type: integer
        description: Presence count sensor debounce interval
      sensor_pc_mode:
        type: integer
        description: Presence count sensor mode
      sensor_t_pint:
        type: integer
        description: Internal temperature poll interval
      sensor_t_dint:
        type: integer
        description: Internal temperature debounce interval
      sensor_t_mode:
        type: integer
        description: Internal temperature mode
      sensor_T_pint:
        type: integer
        description: Temperature sensor poll interval
      sensor_T_dint:
        type: integer
        description: Temperature sensor debounce interval
      sensor_T_mode:
        type: integer
        description: Temperature sensor mode
      sensor_mt_pint:
        type: integer
        description: MCU temperature sensor poll interval
      sensor_mt_dint:
        type: integer
        description: MCU temperature sensor debounce interval
      sensor_mt_mode:
        type: integer
        description: MCU temperature sensor mode

  ApplyConfigToNodes:
    type: object
    properties:
      config:
        $ref: "#/definitions/Config"
      nodes:
        type: array
        items:
          type: object
          properties:
            model:
              type: string
              description: "Node Model"
            nodeid:
              type: string
              description: "Node Id"

  Groups:
    type: object
    required:
      - groupList
    properties:
      groupList:
        description: Group identifiers
        type: array
        items:
          type: string
  Group:
    allOf:
      - $ref: "#/definitions/NewGroup"
      - required:
        - groupid
        properties:
          groupid:
            type: string
  NewGroup:
    type: object
    required:
      - name
      - nodeList
    properties:
      name:
        type: string
        minLength: 2
      description:
        type: string
      nodeList:
        description: List of nodeids representing membership in a group
        type: array
        items:
          type: string
          minLength: 2
      type:
        description: type of group
        type: string
        enum:
          - organizational
          - lighting
          - site-lighting
  Overlay:
    allOf:
      - $ref: "#/definitions/NewOverlay"
      - required:
        - overlayid
        properties:
          overlayid:
            type: string
  NewOverlay:
    type: object
    required:
      - imageBounds
      - imageData
      - buildingLevel
    properties:
      fileName:
        type: string
      description:
        type: string
      users:
        type: string
      imageBounds:
        type: string
      imageData:
        type: string
      imageType:
        type: string
      buildingLevel:
        type: string
  LightState:
    type: object
    required:
      - nodeid
      - driver
      - isscheduled
      - harvest_trigger
      - policy
    properties:
      driver:
        description: Driver level
        type: integer
        minimum: 0
        maximum: 100
      nodeid:
        description: The node ID
        type: string
      isscheduled:
        description: Is the node in scheduled or override mode
        type: boolean
      harvest_trigger:
        description: Is DH on for the node
        type: boolean
      policy:
        description: Schedule currently assigned to node
        type: string
  LightingState:
    type: object
    required:
      - level
      - timeout
    properties:
      level:
        description: The override light level
        type: integer
        minimum: 0
        maximum: 100
      timeout:
        description: The timeout value in seconds for the light override
        type: integer
        minimum: 1
        maximum: 86400
      clear:
        description: Clear the current light level override
        type: boolean
        default: false
  Schedule:
    allOf:
      - $ref: "#/definitions/NewSchedule"
      - required:
        - scheduleid
        properties:
          scheduleid:
            type: string
  NewSchedule:
    type: object
    required:
      - events
      - name
    properties:
      photocell_enabled:
        type: boolean
        description: "Photocell mode enable/disable"
      photocell_highLevel:
        type: integer
        minimum: 0
        maximum: 100
      photocell_lowLevel:
        type: integer
        minimum: 0
        maximum: 100
      name:
        type: string
        description: "Schedule name"
        minLength: 1
      description:
        type: string
        description: "Schedule description"
      network:
        type: object
        properties:
          highTime:
            type: string
            default: "00:00:00"
            description: "The time (HH:MM:SS, sunset+30, or sunrise) to trigger the light level upper bound when disconnected from the network"
          highLevel:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
            description: "The the light level upper bound when disconnected from the network"
          lowTime:
            type: string
            description: "The time (HH:MM:SS, sunset+30, or sunrise) to trigger the light level lower bound when disconnected from the network"
          lowLevel:
            type: integer
            minimum: 0
            maximum: 100
            description: "The the light level upper bound when disconnected from the network"
      events:
        type: array
        description: "Schedules"
        items:
          properties:
            photocell_enabled:
              type: boolean
              description: "Photocell mode enable/disable"
            photocell_highLevel:
              type: integer
              minimum: 0
              maximum: 100
            photocell_lowLevel:
              type: integer
              minimum: 0
              maximum: 100
            date:
              type: string
              pattern: '\d{4}-\d{1,2}-\d{1,2}'
            days:
              type: array
              items:
                type: string
            actions:
              type: array
              items:
                required:
                  - time
                  - level
                type: object
                properties:
                  time:
                    type: string
                    description: "Time of day for action, e.g. HH:MM:SS or sunset+30 or sunrise"
                  level:
                    type: integer
                    minimum: 0
                    maximum: 100
                    description: "Light level"
      sites:
        type: array
        items:
          type: object
          properties:
            siteid:
              type: string
              description: "Id of the site"
            sitename:
              type: string
              description: "Site name"
      groups:
        type: array
        items:
          type: object
          properties:
            groupid:
              type: string
              description: "Id of the group"
            groupname:
              type: string
              description: "Group name"
      nodes:
        type: array
        items:
          type: object
          properties:
            nodeid:
              type: string
              description: "Id of the node"
            nodename:
              type: string
              description: "Node name"

  Audit:
    type: object
    required:
      - message
    properties:
      targetid:
        type: string
      when:
        type: string
      activity:
        type: string
      message:
        type: string
      targettype:
        type: string
      userid:
        type: string
  Firmware:
    allOf:
      - $ref: "#/definitions/NewFirmware"
      - required:
        - firmwareid
        properties:
          firmwareid:
            type: string
  NewFirmware:
    type: object
    required:
      - commit
    properties:
      name:
        type: string
      release:
        type: string
      released:
        type: boolean
      commit:
        type: string
      deprecated:
        type: boolean
      checksum:
        type: string
      builder:
        type: string
      build_date:
        type: string
      image_size:
        type: integer
  Fixture:
    allOf:
      - $ref: "#/definitions/NewFixture"
      - required:
        - fixtureid
        properties:
          fixtureid:
            type: string
  NewFixture:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        minLength: 1
      description:
        type: string
      manufacturer:
        type: string
      manufacturersku:
        type: string
      fixtureType:
        type: string
      nemasocket:
        type: string
      MaxPower0:
        type: string
      MaxPower10:
        type: string
      MaxPower50:
        type: string
      MaxPower100:
        type: string
      MinPower0:
        type: string
      MinPower10:
        type: string
      MinPower50:
        type: string
      MinPower100:
        type: string
      PowerDraw:
        type: string
      MinimumLightLevelForFailureDetection:
        type: string
      BallastCost:
        type: string
      BulbCost:
        type: string
      LegacyPowerDraw:
        type: string
      DailyOperatingTime:
        type: string

  TimeWindow:
    type: object
    required:
      - beginTime
      - endTime
    properties:
      beginTime:
        type: string
        description: "Time of day HH:MM:SS or sunset+30 or sunrise, to begin Profile"
      endTime:
        type: string
        description: "Time of day HH:MM:SS or sunset+30 or sunrise, to end Profile"

  ProximityDimming:
    allOf:
      - $ref: "#/definitions/NewProximityDimming"
      - required:
        - pdprofileid
        properties:
          pdprofileid:
            type: string
  NewProximityDimming:
    allOf:
      - $ref: "#/definitions/TimeWindow"
      - type: object
        required:
          - name
          - minLevel
          - maxLevel
        properties:
          name:
            type: string
            description: "Schedule name"
            minLength: 1
          description:
            type: string
            description: "Schedule description"
          minLevel:
            type: integer
            description: "Minimum light level on absence"
            minimum: 0
            maximum: 100
          maxLevel:
            type: integer
            description: "Maximum light level on presence detection"
            minimum: 0
            maximum: 100
          mode:
            type: string
            default: "radius"
            enum:
              - no-radius
              - radius
          radius:
            type: integer
            description: "Radius in meters of co-located nodes for presence detection"
            minimum: 0
          detection_duration:
            type: integer
            description: "The duration of max level beyond absence detection before dimming to min level in seconds"
            minimum: 1

  DaylightHarvesting:
    allOf:
      - $ref: "#/definitions/NewDaylightHarvesting"
      - required:
        - etdhprofileid
        properties:
          etdhprofileid:
            type: string
            description: "Profile UUID"
            minLength: 32
  NewDaylightHarvesting:
    type: object
    required:
      - name
      - highLux
      - lowLux
      - lowDriver
      - minDriver
    properties: # Remember to change min/max/defaults datadealer/cljdatadealer/src/appl/et_daylight_harvesting.clj
      name:
        type: string
        description: "Profile name"
        minLength: 1
      highLux:
        type: integer
        minimum: 0
        maximum: 100000
      highDriver:
        type: integer
        minimum: 0
        maximum: 100
        default: 0
      lowLux:
        type: integer
        minimum: 0
        maximum: 100000
      lowDriver:
        type: integer
        minimum: 0
        maximum: 100
      minLux:
        type: integer
        minimum: 0
        maximum: 100000
        default: 10
      minDriver:
        type: integer
        minimum: 0
        maximum: 100
      fastPoll:
        type: integer
        minimum: 30
        maximum: 120
        default: 30
      slowPoll:
        type: integer
        minimum: 60
        maximum: 3600
        default: 600
      scheduled:
        type: array
        minLength: 1
        items:
          allOf:
            - $ref: "#/definitions/TimeWindow"


  autoCompleteMatches:
    type: object
    required:
      - message
    properties:
      message:
        type: string
      matches:
        type: array
        items:
          required:
            - name
            - category
          properties:
            name:
              type: string
            id:
              type: string
            category:
              type: string
  connectionStatus:
    type: object
    required:
      - isconnected
      - since
    properties:
      isconnected:
        type: boolean
      since:
        type: string
  nodeStatus:
    type: object
    properties:
      lig_stat :
        type: string
      net_stat :
        type: string
      sen_stat:
        type: string
  hdata:
    type: object
    required:
      - message
    properties:
      message:
        type: string
      nodeid:
        type: string
      sensorid:
        type: string
      datapoints:
        type: array
        items:
          required:
            - when
            - value
          properties:
            when:
              type: string
            value:
              type: string
  XYPair:
    description: "x,y pair"
    type: object
    required:
      - x
      - y
    properties:
      x:
        description: "X coordinate"
        type: integer
      y:
        description: "Y coordinate"
        type: integer
  LatLonPair:
    description: "latitude, longitude pair"
    type: object
    required:
      - latitude
      - longitude
    properties:
      latitude:
        description: "Point WGS84 Latitude"
        type: string
        pattern: '^\-?\d+(\.\d+)?$'
      longitude:
        description: "Point WGS84 Longitude"
        type: string
        pattern: '^\-?\d+(\.\d+)?$'

  CSVNodeList:
    description: "List of nodes with attributes in CSV format"
    type: object
    required:
      - csvNodeList
    properties:
      csvNodeList:
        description: "CSV text"
        type: string

  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  GetParkingPolicyResponse:
    type: object
    properties:
      policyId:
        type: string
      userId:
        type: string
      siteId:
        type: string
      orgId:
        type: string
      tags:
        type: array
        items:
            type: string
      isLibraryPolicy:
        type: boolean
      hashValue:
        type: string
      createdOn:
        type: string
      lastUpdated:
        type: string
      version:
        type: number
      name:
        type: string
      description:
        type: string
      state:
        type: string
      timeZone:
        type: string
      policyLevelViolations:
        type: array
        items:
         $ref: "#/definitions/PolicyLevelViolations"
      policyRule:
        type: array
        items:
         $ref: "#/definitions/PolicyRule"
      userName:
        type: string
  GetParkingPolicyWithAssociatedGroupsResponse:
    allOf:
      - $ref: "#/definitions/GetParkingPolicyResponse"
    properties:
      associatedParkingGroups:
        type: array
        items:
          type: string
  PolicyLevelViolations:
    properties:
      policyViolationId:
        type: string
      policyViolationName:
        type: string
      policyViolationDescription:
        type: string
      policyViolationType:
        type: string
      policyViolationFee:
        format: double
        type: number
      policyViolationFeeRecurrence:
        type: string
    type: object

  PolicyRule:
    properties:
      policyRuleId:
        type: string
      description:
        type: string
      name:
        type: string
      parkingRule:
        $ref: "#/definitions/ParkingRule"
      parkingSchedule:
        $ref: "#/definitions/ParkingSchedule"
      priority:
        type: number
    type: object

  ParkingSchedule:
    properties:
      datePeriod:
        $ref: "#/definitions/DatePeriod"
      daysOfWeek:
        items:
          type: string
        type: array
      description:
        type: string
      months:
        items:
          type: string
        type: array
      timeRange:
        items:
          $ref: "#/definitions/TimeRange"
        type: array
    type: object

  DatePeriod:
    properties:
      occurs:
        type: string
      period:
        $ref: "#/definitions/Period"
    type: object

  Period:
    properties:
      endDateTime:
        type: string
      startDateTime:
        type: string
    type: object

  TimeRange:
    properties:
      endTime:
        type: string
      startTime:
        type: string
    type: object

  ParkingRule:
    properties:
      description:
        type: string
      parkingAllowed:
        type: boolean
      parkingCharge:
        $ref: "#/definitions/ParkingCharge"
      parkingPenalty:
        $ref: "#/definitions/ParkingPenalty"
    type: object

  ParkingCharge:
    properties:
      chargeDuration:
        items:
          $ref: "#/definitions/ChargeDuration"
        type: array
      description:
        type: string
      maxCharge:
        format: double
        type: number
      maxDuration:
        $ref: "#/definitions/MaxDuration"
      name:
        type: string
    type: object

  ChargeDuration:
    properties:
      name:
        type: string
      coarseDuration:
        format: double
        type: number
      price:
        format: double
        type: number
      sliceDuration:
        format: double
        type: number
      units:
        type: string
    type: object

  MaxDuration:
    properties:
      duration:
        format: double
        type: number
      units:
        type: string
    type: object


  ParkingPenalty:
    properties:
      description:
        type: string
      violationFine:
        items:
          $ref: "#/definitions/ViolationFine"
        type: array
    required:
      - violationFine
    type: object

  ViolationFine:
    properties:
      recurrence:
        type: string
      violationFee:
        format: double
        type: number
      violationType:
        type: string
    type: object

  CreateParkingPolicyResponse:
    $ref: "#/definitions/GetParkingPolicyResponse"

  UpdateParkingPolicyResponse:
    $ref: "#/definitions/GetParkingPolicyResponse"

  getAllParkingPolicyResponse:
    $ref: "#/definitions/GetParkingPolicyResponse"

  DeleteParkingPolicyResponse:
    properties:
      success:
        type: boolean
    type: object

  GetParkingPolicyResponseByVersion:
    $ref: "#/definitions/GetParkingPolicyResponse"

  GetParkingPolicyResponseByVersionHistory:
    properties:
      createdOn:
        type: string
      policyEndDateTime:
        type: string
      policyStartDateTime:
        type: string
      version:
        format: int32
        type: number
    type: object

  GetParkingPolicyResponseByTimeline:
    type: object
    properties:
      policyid:
        type: string
      version:
        format: int32
        type: number
      startTime:
        type: string
      endTime:
        type: string

  GetActivePolicies:
    $ref: "#/definitions/GetParkingPolicyResponse"

  PostSearchResponse:
    $ref: "#/definitions/GetParkingPolicyResponse"

  NewParkingPolicy:
    properties:
      description:
        type: string
      name:
        type: string
      policyLevelViolations:
        items:
          $ref: "#/definitions/PolicyLevelViolations"
        type: array
      policyRule:
        items:
          $ref: "#/definitions/PolicyRule"
        type: array
      tags:
        items:
          type: string
        type: array
      timeZone:
        type: string
    required:
      - name
    type: object

  SearchParkingPolicy:
    properties:
      name:
        type: string
      tagid:
        type: string
    type: object
  TagsPolicy:
    properties:
      tagids:
        items:
          type: string
        type: array
    required:
      - tagids
    type: object

  AssociateTagsPolicyResponse:
    properties:
      success:
        type: boolean
    type: object

  DisassociateTagsPolicyResponse:
    properties:
      success:
        type: boolean
    type: object

  SicRequest:
    type: object
    required:
      - imgFormat
    properties:
      imgTS:
        type: string
        format: date-time
      imgFormat:
        type: string
        enum: [jpg, png]

  SicResponse:
    type: object
    properties:
      requestid:
        type: string
      siteid:
        type: string
      orgid:
        type: string
      nodeid:
        type: string
      channel:
        type: string
      res:
        type: string
      imgTS:
        type: string
      imgFormat:
        type: string
      message:
        type: string



