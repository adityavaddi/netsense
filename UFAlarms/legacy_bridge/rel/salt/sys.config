[
  {legacy_bridge,
    [
      {cid, "legacy_bridge"}
      ,{host, "{{dcc.local-ip}}"}
      ,{ddaddress,"{{datadealer.local-ip}}"}
      ,{zmqdealer, "tcp://{{datadealer.local-ip}}:6542"} %% listener
      ,{reqaddr, "tcp://{{datadealer.local-ip}}:6531"} %% sends messages
      ,{certfile, "/client/cacerts.pem"}
      ,{publisher_client_id, <<"legacy_publisher">>}
      ,{mqttreconnect, {2, 120, infinity}}
      ,{keepalive, 1800}
      ,{deadnodecheckintrvl, 60000} %milliseconds
      ,{mqqtloglevel, error}
      ,{s3host, "s3-us-west-2.amazonaws.com"}
      ,{s3bucket, "sensity-firmware"}
      ,{fwdir, "sensity_firmware"}
      ,{haproxy, "{{interface.local-ip}}"} %%this will be haproxy host name here. emulate it for now.
      ,{ota, "{{legacy-fqdn}}"}
      ,{moscahost,"{{interface.local-ip}}"}
      ,{moscaport, 3002}
      ,{pools, [
      {distributor_pool, [{size, 5},{max_overflow, 100}], []}
    ]}
    ]
  }
  ,{exometer, [
  {predefined, [
    {[erlang, system_info],
      {function, erlang, system_info, ['$dp'], value, [port_count, process_count]},
      []}
    ,{[erlang, memory],
      {function, erlang, memory, ['$dp'], value, [total, processes, processes_used, system, binary, ets]},
      []}
    ,{[preset, match], function,
      [
        {module, exometer_function},
        {arg, {erlang, statistics, [garbage_collection], match, {gcs, '_', '_'}}}
      ]},
    {[helpers, get_queue_len],
      {function, helpers, get_queue_len, ['$dp'], value, [zmqpushclient]},
      []}
    %,{[erlang, scheduler],
    %{function, recon, scheduler_usage, ['$dp'], value, [1000]},
    %[]}
  ]},
  {report,
    [
      {reporters,
        [
          {exometer_report_lager,[{type_map,[{'_',integer}]}]}
          ,{exometer_report_graphite, [
          {prefix, "legacy_bridge_stats"},
          {host, "{{graphite.local-ip}}"},
          {port, 2003},
          {api_key, ""}
        ]}
        ]
      },
      {subscribers,
        [
          {exometer_report_graphite, [erlang, system_info], [port_count, process_count], 20000, true}
          ,{exometer_report_graphite, [erlang, memory], [total, processes, processes_used, system, binary, ets], 20000, true}
          ,{exometer_report_graphite, [helpers, get_queue_len], [zmqpushclient], 20000, true}
          %,{exometer_report_lager, [erlang, system_info], [port_count, process_count], 120000, true}
          %,{exometer_report_lager, [erlang, memory], [total, processes, processes_used, system, binary, ets], 120000, true}
          %,{exometer_report_lager, [erlang, scheduler], [1000], 120000, true}
        ]}
    ]
  }
]}
  ,{lager, [
  {log_root, "/var/log/legacy"}
  ,{crash_log, "crash.log"}
  ,{handlers, [
    {lager_console_backend, error}
    ,{lager_file_backend, [
      {file, "qa.log"}
      ,{level, error}
      ,{size, 52428800}
      ,{date, "$D0"}
      ,{count, 5}
    ]}
    ,{lager_file_backend, [
      {file, "logstash.log"}
      ,{level, error}
      ,{size, 52428800}
      ,{formatter, lager_logstash_json_formatter}
      ,{date, "$D0"}
      ,{count, 50}
    ]}
  ]}
]}
].