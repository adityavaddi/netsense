MATCH (sch:Schedule {scheduleid: {props}.scheduleid})-[:HAS]->(ce:CalendarEvents)
      OPTIONAL MATCH (ce)-[:HAS]->(a:Action)
      OPTIONAL MATCH (sch)-[:HAS]->(nnw:NoNetwork)
WITH COLLECT( DISTINCT
  CASE WHEN a.time IS NULL
  THEN NULL
  ELSE {
      time: a.time,
      level: a.level
  }
  END) AS actions, ce, nnw
WITH COLLECT( DISTINCT {
     date: ce.date,
     days: ce.days,
     actions: actions,
     photocell_enabled: coalesce(ce.photocell_enabled, false),
     photocell_highLevel: coalesce(ce.photocell_highLevel, 100),
     photocell_lowLevel: coalesce(ce.photocell_lowLevel, 0)
     }) AS events, nnw
WITH collect( distinct {
     highTime: nnw.highTime,
     highLevel: nnw.highLevel,
     lowTime: nnw.lowTime,
     lowLevel: nnw.lowLevel,
     photocell_enabled: coalesce(nnw.photocell_enabled, false),
     photocell_highLevel: coalesce(nnw.photocell_highLevel, 100),
     photocell_lowLevel: coalesce(nnw.photocell_lowLevel, 0)
     })[0] AS network, events
RETURN DISTINCT {
       events: events,
       network: network
       } AS schedule
