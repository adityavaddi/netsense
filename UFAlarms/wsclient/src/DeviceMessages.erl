%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.20.1 on {{2016,9,14},{14,45,10}}
-module('DeviceMessages').

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_LightingCtrlQualifier/1, enum_value_by_symbol_LightingCtrlQualifier/1]).
-export([enum_symbol_by_value_LightingForceType/1, enum_value_by_symbol_LightingForceType/1]).
-export([enum_symbol_by_value_AlarmType/1, enum_value_by_symbol_AlarmType/1]).
-export([enum_symbol_by_value_AlarmSeverity/1, enum_value_by_symbol_AlarmSeverity/1]).
-export([enum_symbol_by_value_ActionType/1, enum_value_by_symbol_ActionType/1]).
-export([enum_symbol_by_value_AstronomicalBody/1, enum_value_by_symbol_AstronomicalBody/1]).
-export([enum_symbol_by_value_AstronomicalEventType/1, enum_value_by_symbol_AstronomicalEventType/1]).
-export([enum_symbol_by_value_AstronomicalEventZenith/1, enum_value_by_symbol_AstronomicalEventZenith/1]).
-export([enum_symbol_by_value_WiFiAuthType/1, enum_value_by_symbol_WiFiAuthType/1]).
-export([enum_symbol_by_value_GpsActionType/1, enum_value_by_symbol_GpsActionType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("DeviceMessages.hrl").
-include("gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'DeviceAlarm'{} -> e_msg_DeviceAlarm(Msg);
      #'LightingClearSchedule'{} ->
	  e_msg_LightingClearSchedule(Msg);
      #'CalendarEvent'{} -> e_msg_CalendarEvent(Msg);
      #'LightingCtrl'{} -> e_msg_LightingCtrl(Msg);
      #'LightingScheduledEvent'{} ->
	  e_msg_LightingScheduledEvent(Msg);
      #'DeviceActionReq'{} -> e_msg_DeviceActionReq(Msg);
      #'GpsActionReq'{} -> e_msg_GpsActionReq(Msg);
      #'LightingSetAuto'{} -> e_msg_LightingSetAuto(Msg);
      #'GpsSample'{} -> e_msg_GpsSample(Msg);
      #'AstronomicalEvent'{} -> e_msg_AstronomicalEvent(Msg);
      #'LightingForceState'{} ->
	  e_msg_LightingForceState(Msg);
      #'SensorSample'{} -> e_msg_SensorSample(Msg);
      #'LightingAstronomicalEvent'{} ->
	  e_msg_LightingAstronomicalEvent(Msg);
      #'SensorSampleReq'{} -> e_msg_SensorSampleReq(Msg);
      #'GpsActionRsp'{} -> e_msg_GpsActionRsp(Msg)
    end.


e_enum_LightingForceType('Persistent', Bin) ->
    <<Bin/binary, 1>>;
e_enum_LightingForceType('Volatile', Bin) ->
    <<Bin/binary, 2>>.

e_enum_AlarmType('CommFail', Bin) ->
    <<Bin/binary, 172, 2>>;
e_enum_AlarmType('SimFail', Bin) ->
    <<Bin/binary, 173, 2>>;
e_enum_AlarmType('NotTested', Bin) ->
    <<Bin/binary, 174, 2>>;
e_enum_AlarmType('DownrevSoftware', Bin) ->
    <<Bin/binary, 175, 2>>;
e_enum_AlarmType('BadSensorData', Bin) ->
    <<Bin/binary, 176, 2>>;
e_enum_AlarmType('ConfigFail', Bin) ->
    <<Bin/binary, 177, 2>>;
e_enum_AlarmType('DegradedNetwork', Bin) ->
    <<Bin/binary, 178, 2>>;
e_enum_AlarmType('SoftwareUpdateFail', Bin) ->
    <<Bin/binary, 179, 2>>;
e_enum_AlarmType('ScheduleFail', Bin) ->
    <<Bin/binary, 180, 2>>;
e_enum_AlarmType('PreRuninFail', Bin) ->
    <<Bin/binary, 181, 2>>;
e_enum_AlarmType('PostRuninFail', Bin) ->
    <<Bin/binary, 182, 2>>;
e_enum_AlarmType('USPFail', Bin) ->
    <<Bin/binary, 200, 1>>;
e_enum_AlarmType('PMACFail', Bin) ->
    <<Bin/binary, 201, 1>>;
e_enum_AlarmType('DriverFail', Bin) ->
    <<Bin/binary, 202, 1>>;
e_enum_AlarmType('FarmUSPFail', Bin) ->
    <<Bin/binary, 203, 1>>;
e_enum_AlarmType('SensorFail', Bin) ->
    <<Bin/binary, 204, 1>>;
e_enum_AlarmType('StrangeReboot', Bin) ->
    <<Bin/binary, 205, 1>>;
e_enum_AlarmType('Assert', Bin) ->
    <<Bin/binary, 206, 1>>;
e_enum_AlarmType('X509ClientFail', Bin) ->
    <<Bin/binary, 207, 1>>;
e_enum_AlarmType('X509ServerFail', Bin) ->
    <<Bin/binary, 208, 1>>;
e_enum_AlarmType('UnderPower', Bin) ->
    <<Bin/binary, 209, 1>>;
e_enum_AlarmType('OverPower', Bin) ->
    <<Bin/binary, 210, 1>>;
e_enum_AlarmType('HardFault', Bin) ->
    <<Bin/binary, 211, 1>>;
e_enum_AlarmType('HWFail_generic', Bin) ->
    <<Bin/binary, 220, 1>>;
e_enum_AlarmType('HWFail_HIH6131', Bin) ->
    <<Bin/binary, 221, 1>>;
e_enum_AlarmType('HWFail_ISL29023', Bin) ->
    <<Bin/binary, 222, 1>>;
e_enum_AlarmType('HWFail_SE95', Bin) ->
    <<Bin/binary, 223, 1>>;
e_enum_AlarmType('HWFail_ZMotion', Bin) ->
    <<Bin/binary, 224, 1>>;
e_enum_AlarmType('HWFail_MMA8451', Bin) ->
    <<Bin/binary, 225, 1>>;
e_enum_AlarmType('HWFail_TSC3414', Bin) ->
    <<Bin/binary, 226, 1>>;
e_enum_AlarmType('HWFail_UrbanUSP', Bin) ->
    <<Bin/binary, 227, 1>>;
e_enum_AlarmType('HWFail_RTC', Bin) ->
    <<Bin/binary, 229, 1>>;
e_enum_AlarmType('HWFail_EEPROM', Bin) ->
    <<Bin/binary, 230, 1>>;
e_enum_AlarmType('HWFail_NIGHTHAWK', Bin) ->
    <<Bin/binary, 231, 1>>;
e_enum_AlarmType('SWUpdateFail_SENSORPOD', Bin) ->
    <<Bin/binary, 232, 1>>;
e_enum_AlarmType('HWFail_STUCK_RELAY', Bin) ->
    <<Bin/binary, 233, 1>>;
e_enum_AlarmType('HWFail_PCT2075', Bin) ->
    <<Bin/binary, 223, 1>>;
e_enum_AlarmType('HWFAIL_SIHAWK', Bin) ->
    <<Bin/binary, 234, 1>>;
e_enum_AlarmType('HWFAIL_GPS', Bin) ->
    <<Bin/binary, 235, 1>>;
e_enum_AlarmType('HWFail_PodBus', Bin) ->
    <<Bin/binary, 236, 1>>;
e_enum_AlarmType('Epic_Fail', Bin) ->
    <<Bin/binary, 233, 244, 1>>.

e_enum_AlarmSeverity('Clear', Bin) -> <<Bin/binary, 0>>;
e_enum_AlarmSeverity('Warning', Bin) ->
    <<Bin/binary, 1>>;
e_enum_AlarmSeverity('Minor', Bin) -> <<Bin/binary, 2>>;
e_enum_AlarmSeverity('Major', Bin) -> <<Bin/binary, 3>>;
e_enum_AlarmSeverity('Critical', Bin) ->
    <<Bin/binary, 4>>.

e_enum_ActionType('ColdReset', Bin) ->
    <<Bin/binary, 0>>;
e_enum_ActionType('ResetFactory', Bin) ->
    <<Bin/binary, 1>>;
e_enum_ActionType('ResetProvisioning', Bin) ->
    <<Bin/binary, 2>>;
e_enum_ActionType('ChangeFWPartition', Bin) ->
    <<Bin/binary, 3>>.

e_enum_AstronomicalBody('Sun', Bin) ->
    <<Bin/binary, 1>>;
e_enum_AstronomicalBody('Moon', Bin) ->
    <<Bin/binary, 2>>.

e_enum_AstronomicalEventType('Rise', Bin) ->
    <<Bin/binary, 1>>;
e_enum_AstronomicalEventType('Set', Bin) ->
    <<Bin/binary, 2>>;
e_enum_AstronomicalEventType('Noon', Bin) ->
    <<Bin/binary, 3>>.

e_enum_AstronomicalEventZenith('Official', Bin) ->
    <<Bin/binary, 1>>;
e_enum_AstronomicalEventZenith('Civil', Bin) ->
    <<Bin/binary, 2>>;
e_enum_AstronomicalEventZenith('Nautical', Bin) ->
    <<Bin/binary, 3>>;
e_enum_AstronomicalEventZenith('Astronomical', Bin) ->
    <<Bin/binary, 4>>.

e_enum_GpsActionType('SendSample', Bin) ->
    <<Bin/binary, 0>>;
e_enum_GpsActionType('SetCtlMode', Bin) ->
    <<Bin/binary, 1>>;
e_enum_GpsActionType('SetOpSchedule', Bin) ->
    <<Bin/binary, 2>>;
e_enum_GpsActionType('GetOpSchedule', Bin) ->
    <<Bin/binary, 3>>.

e_msg_DeviceAlarm(Msg) -> e_msg_DeviceAlarm(Msg, <<>>).


e_msg_DeviceAlarm(#'DeviceAlarm'{alarmType = F1,
				 alarmSeverity = F2, msg = F3},
		  Bin) ->
    B1 = e_enum_AlarmType(F1, <<Bin/binary, 8>>),
    B2 = e_enum_AlarmSeverity(F2, <<B1/binary, 16>>),
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

e_msg_LightingClearSchedule(_Msg) -> <<>>.

e_msg_CalendarEvent(Msg) ->
    e_msg_CalendarEvent(Msg, <<>>).


e_msg_CalendarEvent(#'CalendarEvent'{sec = F1, min = F2,
				     hr = F3, wday = F4, mday = F5, mon = F6,
				     year = F7},
		    Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    B3 = e_varint(F3, <<B2/binary, 24>>),
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_varint(F7, <<B6/binary, 56>>)
    end.

e_msg_LightingCtrl(Msg) ->
    e_msg_LightingCtrl(Msg, <<>>).


e_msg_LightingCtrl(#'LightingCtrl'{pri = F1, mask = F2,
				   level = F3, qualifiers = F4},
		   Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    B3 = e_type_bytes(F3, <<B2/binary, 26>>),
    if F4 == undefined -> B3;
       true -> e_varint(F4, <<B3/binary, 32>>)
    end.

e_msg_LightingScheduledEvent(Msg) ->
    e_msg_LightingScheduledEvent(Msg, <<>>).


e_msg_LightingScheduledEvent(#'LightingScheduledEvent'{id
							   = F1,
						       event = F2, state = F3},
			     Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_mfield_LightingScheduledEvent_event(F2,
					       <<B1/binary, 18>>),
    e_mfield_LightingScheduledEvent_state(F3,
					  <<B2/binary, 26>>).

e_msg_DeviceActionReq(Msg) ->
    e_msg_DeviceActionReq(Msg, <<>>).


e_msg_DeviceActionReq(#'DeviceActionReq'{actionType =
					     F1},
		      Bin) ->
    e_enum_ActionType(F1, <<Bin/binary, 8>>).

e_msg_GpsActionReq(Msg) ->
    e_msg_GpsActionReq(Msg, <<>>).


e_msg_GpsActionReq(#'GpsActionReq'{actionType = F1,
				   iValue = F2, sValue = F3},
		   Bin) ->
    B1 = e_enum_GpsActionType(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

e_msg_LightingSetAuto(_Msg) -> <<>>.

e_msg_GpsSample(Msg) -> e_msg_GpsSample(Msg, <<>>).


e_msg_GpsSample(#'GpsSample'{gpsVer = F1,
			     epochSecs = F2, latAndLon = F3, altAndMisc = F4,
			     snrAndMisc = F5},
		Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_fixed32(F2, <<B1/binary, 21>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_fixed64(F3, <<B2/binary, 25>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_fixed32(F4, <<B3/binary, 37>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_fixed64(F5, <<B4/binary, 41>>)
    end.

e_msg_AstronomicalEvent(Msg) ->
    e_msg_AstronomicalEvent(Msg, <<>>).


e_msg_AstronomicalEvent(#'AstronomicalEvent'{body = F1,
					     atype = F2, zenith = F3, wday = F4,
					     mday = F5, mon = F6, year = F7},
			Bin) ->
    B1 = e_enum_AstronomicalBody(F1, <<Bin/binary, 8>>),
    B2 = e_enum_AstronomicalEventType(F2,
				      <<B1/binary, 16>>),
    B3 = e_enum_AstronomicalEventZenith(F3,
					<<B2/binary, 24>>),
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_varint(F7, <<B6/binary, 56>>)
    end.

e_msg_LightingForceState(Msg) ->
    e_msg_LightingForceState(Msg, <<>>).


e_msg_LightingForceState(#'LightingForceState'{state =
						   F1,
					       ftype = F2},
			 Bin) ->
    B1 = e_mfield_LightingForceState_state(F1,
					   <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_enum_LightingForceType(F2, <<B1/binary, 16>>)
    end.

e_msg_SensorSample(Msg) ->
    e_msg_SensorSample(Msg, <<>>).


e_msg_SensorSample(#'SensorSample'{sensor = F1,
				   time = F2, value = F3, units = F4},
		   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    B3 = e_varint(F3, <<B2/binary, 24>>),
    if F4 == undefined -> B3;
       true -> e_type_string(F4, <<B3/binary, 34>>)
    end.

e_msg_LightingAstronomicalEvent(Msg) ->
    e_msg_LightingAstronomicalEvent(Msg, <<>>).


e_msg_LightingAstronomicalEvent(#'LightingAstronomicalEvent'{id
								 = F1,
							     event = F2,
							     state = F3},
				Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_mfield_LightingAstronomicalEvent_event(F2,
						  <<B1/binary, 18>>),
    e_mfield_LightingAstronomicalEvent_state(F3,
					     <<B2/binary, 26>>).

e_msg_SensorSampleReq(Msg) ->
    e_msg_SensorSampleReq(Msg, <<>>).


e_msg_SensorSampleReq(#'SensorSampleReq'{sensor = F1},
		      Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_GpsActionRsp(Msg) ->
    e_msg_GpsActionRsp(Msg, <<>>).


e_msg_GpsActionRsp(#'GpsActionRsp'{actionType = F1,
				   iValue = F2, sValue = F3},
		   Bin) ->
    B1 = e_enum_GpsActionType(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

e_mfield_LightingScheduledEvent_event(Msg, Bin) ->
    SubBin = e_msg_CalendarEvent(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LightingScheduledEvent_state(Msg, Bin) ->
    SubBin = e_msg_LightingCtrl(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LightingForceState_state(Msg, Bin) ->
    SubBin = e_msg_LightingCtrl(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LightingAstronomicalEvent_event(Msg, Bin) ->
    SubBin = e_msg_AstronomicalEvent(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LightingAstronomicalEvent_state(Msg, Bin) ->
    SubBin = e_msg_LightingCtrl(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_fixed32(Value, Bin) ->
    <<Bin/binary, Value:32/little>>.

e_type_fixed64(Value, Bin) ->
    <<Bin/binary, Value:64/little>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'DeviceAlarm' -> d_msg_DeviceAlarm(Bin);
      'LightingClearSchedule' ->
	  d_msg_LightingClearSchedule(Bin);
      'CalendarEvent' -> d_msg_CalendarEvent(Bin);
      'LightingCtrl' -> d_msg_LightingCtrl(Bin);
      'LightingScheduledEvent' ->
	  d_msg_LightingScheduledEvent(Bin);
      'DeviceActionReq' -> d_msg_DeviceActionReq(Bin);
      'GpsActionReq' -> d_msg_GpsActionReq(Bin);
      'LightingSetAuto' -> d_msg_LightingSetAuto(Bin);
      'GpsSample' -> d_msg_GpsSample(Bin);
      'AstronomicalEvent' -> d_msg_AstronomicalEvent(Bin);
      'LightingForceState' -> d_msg_LightingForceState(Bin);
      'SensorSample' -> d_msg_SensorSample(Bin);
      'LightingAstronomicalEvent' ->
	  d_msg_LightingAstronomicalEvent(Bin);
      'SensorSampleReq' -> d_msg_SensorSampleReq(Bin);
      'GpsActionRsp' -> d_msg_GpsActionRsp(Bin)
    end.



d_enum_LightingForceType(1) -> 'Persistent';
d_enum_LightingForceType(2) -> 'Volatile'.

d_enum_AlarmType(300) -> 'CommFail';
d_enum_AlarmType(301) -> 'SimFail';
d_enum_AlarmType(302) -> 'NotTested';
d_enum_AlarmType(303) -> 'DownrevSoftware';
d_enum_AlarmType(304) -> 'BadSensorData';
d_enum_AlarmType(305) -> 'ConfigFail';
d_enum_AlarmType(306) -> 'DegradedNetwork';
d_enum_AlarmType(307) -> 'SoftwareUpdateFail';
d_enum_AlarmType(308) -> 'ScheduleFail';
d_enum_AlarmType(309) -> 'PreRuninFail';
d_enum_AlarmType(310) -> 'PostRuninFail';
d_enum_AlarmType(200) -> 'USPFail';
d_enum_AlarmType(201) -> 'PMACFail';
d_enum_AlarmType(202) -> 'DriverFail';
d_enum_AlarmType(203) -> 'FarmUSPFail';
d_enum_AlarmType(204) -> 'SensorFail';
d_enum_AlarmType(205) -> 'StrangeReboot';
d_enum_AlarmType(206) -> 'Assert';
d_enum_AlarmType(207) -> 'X509ClientFail';
d_enum_AlarmType(208) -> 'X509ServerFail';
d_enum_AlarmType(209) -> 'UnderPower';
d_enum_AlarmType(210) -> 'OverPower';
d_enum_AlarmType(211) -> 'HardFault';
d_enum_AlarmType(220) -> 'HWFail_generic';
d_enum_AlarmType(221) -> 'HWFail_HIH6131';
d_enum_AlarmType(222) -> 'HWFail_ISL29023';
d_enum_AlarmType(223) -> 'HWFail_SE95';
d_enum_AlarmType(224) -> 'HWFail_ZMotion';
d_enum_AlarmType(225) -> 'HWFail_MMA8451';
d_enum_AlarmType(226) -> 'HWFail_TSC3414';
d_enum_AlarmType(227) -> 'HWFail_UrbanUSP';
d_enum_AlarmType(229) -> 'HWFail_RTC';
d_enum_AlarmType(230) -> 'HWFail_EEPROM';
d_enum_AlarmType(231) -> 'HWFail_NIGHTHAWK';
d_enum_AlarmType(232) -> 'SWUpdateFail_SENSORPOD';
d_enum_AlarmType(233) -> 'HWFail_STUCK_RELAY';
d_enum_AlarmType(234) -> 'HWFAIL_SIHAWK';
d_enum_AlarmType(235) -> 'HWFAIL_GPS';
d_enum_AlarmType(236) -> 'HWFail_PodBus';
d_enum_AlarmType(31337) -> 'Epic_Fail'.

d_enum_AlarmSeverity(0) -> 'Clear';
d_enum_AlarmSeverity(1) -> 'Warning';
d_enum_AlarmSeverity(2) -> 'Minor';
d_enum_AlarmSeverity(3) -> 'Major';
d_enum_AlarmSeverity(4) -> 'Critical'.

d_enum_ActionType(0) -> 'ColdReset';
d_enum_ActionType(1) -> 'ResetFactory';
d_enum_ActionType(2) -> 'ResetProvisioning';
d_enum_ActionType(3) -> 'ChangeFWPartition'.

d_enum_AstronomicalBody(1) -> 'Sun';
d_enum_AstronomicalBody(2) -> 'Moon'.

d_enum_AstronomicalEventType(1) -> 'Rise';
d_enum_AstronomicalEventType(2) -> 'Set';
d_enum_AstronomicalEventType(3) -> 'Noon'.

d_enum_AstronomicalEventZenith(1) -> 'Official';
d_enum_AstronomicalEventZenith(2) -> 'Civil';
d_enum_AstronomicalEventZenith(3) -> 'Nautical';
d_enum_AstronomicalEventZenith(4) -> 'Astronomical'.

d_enum_GpsActionType(0) -> 'SendSample';
d_enum_GpsActionType(1) -> 'SetCtlMode';
d_enum_GpsActionType(2) -> 'SetOpSchedule';
d_enum_GpsActionType(3) -> 'GetOpSchedule'.

d_msg_DeviceAlarm(Bin) ->
    dfp_read_field_def_DeviceAlarm(Bin, 0, 0, undefined,
				   undefined, undefined).

dfp_read_field_def_DeviceAlarm(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_DeviceAlarm_alarmType(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_DeviceAlarm(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_DeviceAlarm_alarmSeverity(Rest, Z1, Z2, F1, F2,
				      F3);
dfp_read_field_def_DeviceAlarm(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_DeviceAlarm_msg(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_DeviceAlarm(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'DeviceAlarm'{alarmType = F1, alarmSeverity = F2,
		   msg = F3};
dfp_read_field_def_DeviceAlarm(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_DeviceAlarm(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_DeviceAlarm(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_DeviceAlarm(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_DeviceAlarm(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DeviceAlarm_alarmType(Rest, 0, 0, F1, F2, F3);
      16 ->
	  d_field_DeviceAlarm_alarmSeverity(Rest, 0, 0, F1, F2,
					    F3);
      26 -> d_field_DeviceAlarm_msg(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_DeviceAlarm(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_DeviceAlarm(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_DeviceAlarm(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_DeviceAlarm(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_DeviceAlarm(<<>>, 0, 0, F1, F2, F3) ->
    #'DeviceAlarm'{alarmType = F1, alarmSeverity = F2,
		   msg = F3}.

d_field_DeviceAlarm_alarmType(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_DeviceAlarm_alarmType(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
d_field_DeviceAlarm_alarmType(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AlarmType(Tmp),
    dfp_read_field_def_DeviceAlarm(Rest, 0, 0, NewFValue,
				   F2, F3).


d_field_DeviceAlarm_alarmSeverity(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_DeviceAlarm_alarmSeverity(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
d_field_DeviceAlarm_alarmSeverity(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AlarmSeverity(Tmp),
    dfp_read_field_def_DeviceAlarm(Rest, 0, 0, F1,
				   NewFValue, F3).


d_field_DeviceAlarm_msg(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3)
    when N < 57 ->
    d_field_DeviceAlarm_msg(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3);
d_field_DeviceAlarm_msg(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeviceAlarm(Rest2, 0, 0, F1, F2,
				   NewFValue).


skip_varint_DeviceAlarm(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_DeviceAlarm(Rest, Z1, Z2, F1, F2, F3);
skip_varint_DeviceAlarm(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_DeviceAlarm(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_DeviceAlarm(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_DeviceAlarm(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_DeviceAlarm(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeviceAlarm(Rest2, 0, 0, F1, F2, F3).


skip_32_DeviceAlarm(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_DeviceAlarm(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_DeviceAlarm(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_DeviceAlarm(Rest, Z1, Z2, F1, F2,
				   F3).


d_msg_LightingClearSchedule(Bin) ->
    dfp_read_field_def_LightingClearSchedule(Bin, 0, 0).

dfp_read_field_def_LightingClearSchedule(<<>>, 0, 0) ->
    #'LightingClearSchedule'{};
dfp_read_field_def_LightingClearSchedule(Other, Z1,
					 Z2) ->
    dg_read_field_def_LightingClearSchedule(Other, Z1, Z2).

dg_read_field_def_LightingClearSchedule(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc)
    when N < 32 - 7 ->
    dg_read_field_def_LightingClearSchedule(Rest, N + 7,
					    X bsl N + Acc);
dg_read_field_def_LightingClearSchedule(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_LightingClearSchedule(Rest, 0, 0);
      1 -> skip_64_LightingClearSchedule(Rest, 0, 0);
      2 ->
	  skip_length_delimited_LightingClearSchedule(Rest, 0, 0);
      5 -> skip_32_LightingClearSchedule(Rest, 0, 0)
    end;
dg_read_field_def_LightingClearSchedule(<<>>, 0, 0) ->
    #'LightingClearSchedule'{}.

skip_varint_LightingClearSchedule(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2) ->
    skip_varint_LightingClearSchedule(Rest, Z1, Z2);
skip_varint_LightingClearSchedule(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2) ->
    dfp_read_field_def_LightingClearSchedule(Rest, Z1, Z2).


skip_length_delimited_LightingClearSchedule(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc)
    when N < 57 ->
    skip_length_delimited_LightingClearSchedule(Rest, N + 7,
						X bsl N + Acc);
skip_length_delimited_LightingClearSchedule(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingClearSchedule(Rest2, 0, 0).


skip_32_LightingClearSchedule(<<_:32, Rest/binary>>, Z1,
			      Z2) ->
    dfp_read_field_def_LightingClearSchedule(Rest, Z1, Z2).


skip_64_LightingClearSchedule(<<_:64, Rest/binary>>, Z1,
			      Z2) ->
    dfp_read_field_def_LightingClearSchedule(Rest, Z1, Z2).


d_msg_CalendarEvent(Bin) ->
    dfp_read_field_def_CalendarEvent(Bin, 0, 0, undefined,
				     undefined, undefined, undefined, undefined,
				     undefined, undefined).

dfp_read_field_def_CalendarEvent(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_sec(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_min(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_hr(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_wday(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_mday(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_mon(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<56, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CalendarEvent_year(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_CalendarEvent(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7) ->
    #'CalendarEvent'{sec = F1, min = F2, hr = F3, wday = F4,
		     mday = F5, mon = F6, year = F7};
dfp_read_field_def_CalendarEvent(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7) ->
    dg_read_field_def_CalendarEvent(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).

dg_read_field_def_CalendarEvent(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_CalendarEvent(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_CalendarEvent(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CalendarEvent_sec(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      16 ->
	  d_field_CalendarEvent_min(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      24 ->
	  d_field_CalendarEvent_hr(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      32 ->
	  d_field_CalendarEvent_wday(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      40 ->
	  d_field_CalendarEvent_mday(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      48 ->
	  d_field_CalendarEvent_mon(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      56 ->
	  d_field_CalendarEvent_year(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CalendarEvent(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7);
	    1 ->
		skip_64_CalendarEvent(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7);
	    2 ->
		skip_length_delimited_CalendarEvent(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7);
	    5 ->
		skip_32_CalendarEvent(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7)
	  end
    end;
dg_read_field_def_CalendarEvent(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7) ->
    #'CalendarEvent'{sec = F1, min = F2, hr = F3, wday = F4,
		     mday = F5, mon = F6, year = F7}.

d_field_CalendarEvent_sec(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_sec(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_sec(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7).


d_field_CalendarEvent_min(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_min(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_min(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7).


d_field_CalendarEvent_hr(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_hr(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_hr(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7).


d_field_CalendarEvent_wday(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_wday(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_wday(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, _, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1, F2, F3,
				     NewFValue, F5, F6, F7).


d_field_CalendarEvent_mday(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_mday(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_mday(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, _, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7).


d_field_CalendarEvent_mon(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_mon(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_mon(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, _, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7).


d_field_CalendarEvent_year(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CalendarEvent_year(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_CalendarEvent_year(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CalendarEvent(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, NewFValue).


skip_varint_CalendarEvent(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_CalendarEvent(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
skip_varint_CalendarEvent(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CalendarEvent(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_length_delimited_CalendarEvent(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_CalendarEvent(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
skip_length_delimited_CalendarEvent(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CalendarEvent(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7).


skip_32_CalendarEvent(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CalendarEvent(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_64_CalendarEvent(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CalendarEvent(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


d_msg_LightingCtrl(Bin) ->
    dfp_read_field_def_LightingCtrl(Bin, 0, 0, undefined,
				    undefined, undefined, undefined).

dfp_read_field_def_LightingCtrl(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_LightingCtrl_pri(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_LightingCtrl(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_LightingCtrl_mask(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_LightingCtrl(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_LightingCtrl_level(Rest, Z1, Z2, F1, F2, F3,
			       F4);
dfp_read_field_def_LightingCtrl(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_LightingCtrl_qualifiers(Rest, Z1, Z2, F1, F2,
				    F3, F4);
dfp_read_field_def_LightingCtrl(<<>>, 0, 0, F1, F2, F3,
				F4) ->
    #'LightingCtrl'{pri = F1, mask = F2, level = F3,
		    qualifiers = F4};
dfp_read_field_def_LightingCtrl(Other, Z1, Z2, F1, F2,
				F3, F4) ->
    dg_read_field_def_LightingCtrl(Other, Z1, Z2, F1, F2,
				   F3, F4).

dg_read_field_def_LightingCtrl(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_LightingCtrl(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_LightingCtrl(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LightingCtrl_pri(Rest, 0, 0, F1, F2, F3, F4);
      16 ->
	  d_field_LightingCtrl_mask(Rest, 0, 0, F1, F2, F3, F4);
      26 ->
	  d_field_LightingCtrl_level(Rest, 0, 0, F1, F2, F3, F4);
      32 ->
	  d_field_LightingCtrl_qualifiers(Rest, 0, 0, F1, F2, F3,
					  F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LightingCtrl(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_LightingCtrl(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_LightingCtrl(Rest, 0, 0, F1, F2,
						   F3, F4);
	    5 -> skip_32_LightingCtrl(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_LightingCtrl(<<>>, 0, 0, F1, F2, F3,
			       F4) ->
    #'LightingCtrl'{pri = F1, mask = F2, level = F3,
		    qualifiers = F4}.

d_field_LightingCtrl_pri(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_LightingCtrl_pri(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4);
d_field_LightingCtrl_pri(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LightingCtrl(Rest, 0, 0, NewFValue,
				    F2, F3, F4).


d_field_LightingCtrl_mask(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_LightingCtrl_mask(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4);
d_field_LightingCtrl_mask(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LightingCtrl(Rest, 0, 0, F1,
				    NewFValue, F3, F4).


d_field_LightingCtrl_level(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_LightingCtrl_level(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
d_field_LightingCtrl_level(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_LightingCtrl(Rest2, 0, 0, F1, F2,
				    NewFValue, F4).


d_field_LightingCtrl_qualifiers(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_LightingCtrl_qualifiers(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
d_field_LightingCtrl_qualifiers(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LightingCtrl(Rest, 0, 0, F1, F2, F3,
				    NewFValue).


skip_varint_LightingCtrl(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4) ->
    skip_varint_LightingCtrl(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_LightingCtrl(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_LightingCtrl(Rest, Z1, Z2, F1, F2,
				    F3, F4).


skip_length_delimited_LightingCtrl(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_LightingCtrl(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_LightingCtrl(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingCtrl(Rest2, 0, 0, F1, F2, F3,
				    F4).


skip_32_LightingCtrl(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4) ->
    dfp_read_field_def_LightingCtrl(Rest, Z1, Z2, F1, F2,
				    F3, F4).


skip_64_LightingCtrl(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4) ->
    dfp_read_field_def_LightingCtrl(Rest, Z1, Z2, F1, F2,
				    F3, F4).


d_msg_LightingScheduledEvent(Bin) ->
    dfp_read_field_def_LightingScheduledEvent(Bin, 0, 0,
					      undefined, undefined, undefined).

dfp_read_field_def_LightingScheduledEvent(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_LightingScheduledEvent_id(Rest, Z1, Z2, F1, F2,
				      F3);
dfp_read_field_def_LightingScheduledEvent(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_LightingScheduledEvent_event(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_LightingScheduledEvent(<<26,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_LightingScheduledEvent_state(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_LightingScheduledEvent(<<>>, 0, 0,
					  F1, F2, F3) ->
    #'LightingScheduledEvent'{id = F1, event = F2,
			      state = F3};
dfp_read_field_def_LightingScheduledEvent(Other, Z1, Z2,
					  F1, F2, F3) ->
    dg_read_field_def_LightingScheduledEvent(Other, Z1, Z2,
					     F1, F2, F3).

dg_read_field_def_LightingScheduledEvent(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_LightingScheduledEvent(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
dg_read_field_def_LightingScheduledEvent(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LightingScheduledEvent_id(Rest, 0, 0, F1, F2,
					    F3);
      18 ->
	  d_field_LightingScheduledEvent_event(Rest, 0, 0, F1, F2,
					       F3);
      26 ->
	  d_field_LightingScheduledEvent_state(Rest, 0, 0, F1, F2,
					       F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LightingScheduledEvent(Rest, 0, 0, F1, F2,
						   F3);
	    1 ->
		skip_64_LightingScheduledEvent(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_LightingScheduledEvent(Rest, 0, 0,
							     F1, F2, F3);
	    5 ->
		skip_32_LightingScheduledEvent(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_LightingScheduledEvent(<<>>, 0, 0, F1,
					 F2, F3) ->
    #'LightingScheduledEvent'{id = F1, event = F2,
			      state = F3}.

d_field_LightingScheduledEvent_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingScheduledEvent_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
d_field_LightingScheduledEvent_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LightingScheduledEvent(Rest, 0, 0,
					      NewFValue, F2, F3).


d_field_LightingScheduledEvent_event(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingScheduledEvent_event(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_LightingScheduledEvent_event(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CalendarEvent'),
    dfp_read_field_def_LightingScheduledEvent(Rest2, 0, 0,
					      F1,
					      if F2 == undefined -> NewFValue;
						 true ->
						     merge_msg_CalendarEvent(F2,
									     NewFValue)
					      end,
					      F3).


d_field_LightingScheduledEvent_state(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingScheduledEvent_state(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_LightingScheduledEvent_state(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'LightingCtrl'),
    dfp_read_field_def_LightingScheduledEvent(Rest2, 0, 0,
					      F1, F2,
					      if F3 == undefined -> NewFValue;
						 true ->
						     merge_msg_LightingCtrl(F3,
									    NewFValue)
					      end).


skip_varint_LightingScheduledEvent(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    skip_varint_LightingScheduledEvent(Rest, Z1, Z2, F1, F2,
				       F3);
skip_varint_LightingScheduledEvent(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingScheduledEvent(Rest, Z1, Z2,
					      F1, F2, F3).


skip_length_delimited_LightingScheduledEvent(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_LightingScheduledEvent(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3);
skip_length_delimited_LightingScheduledEvent(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingScheduledEvent(Rest2, 0, 0,
					      F1, F2, F3).


skip_32_LightingScheduledEvent(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingScheduledEvent(Rest, Z1, Z2,
					      F1, F2, F3).


skip_64_LightingScheduledEvent(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingScheduledEvent(Rest, Z1, Z2,
					      F1, F2, F3).


d_msg_DeviceActionReq(Bin) ->
    dfp_read_field_def_DeviceActionReq(Bin, 0, 0,
				       undefined).

dfp_read_field_def_DeviceActionReq(<<8, Rest/binary>>,
				   Z1, Z2, F1) ->
    d_field_DeviceActionReq_actionType(Rest, Z1, Z2, F1);
dfp_read_field_def_DeviceActionReq(<<>>, 0, 0, F1) ->
    #'DeviceActionReq'{actionType = F1};
dfp_read_field_def_DeviceActionReq(Other, Z1, Z2, F1) ->
    dg_read_field_def_DeviceActionReq(Other, Z1, Z2, F1).

dg_read_field_def_DeviceActionReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_DeviceActionReq(Rest, N + 7,
				      X bsl N + Acc, F1);
dg_read_field_def_DeviceActionReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_DeviceActionReq_actionType(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_DeviceActionReq(Rest, 0, 0, F1);
	    1 -> skip_64_DeviceActionReq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_DeviceActionReq(Rest, 0, 0, F1);
	    5 -> skip_32_DeviceActionReq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_DeviceActionReq(<<>>, 0, 0, F1) ->
    #'DeviceActionReq'{actionType = F1}.

d_field_DeviceActionReq_actionType(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 57 ->
    d_field_DeviceActionReq_actionType(Rest, N + 7,
				       X bsl N + Acc, F1);
d_field_DeviceActionReq_actionType(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_ActionType(Tmp),
    dfp_read_field_def_DeviceActionReq(Rest, 0, 0,
				       NewFValue).


skip_varint_DeviceActionReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    skip_varint_DeviceActionReq(Rest, Z1, Z2, F1);
skip_varint_DeviceActionReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    dfp_read_field_def_DeviceActionReq(Rest, Z1, Z2, F1).


skip_length_delimited_DeviceActionReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_DeviceActionReq(Rest, N + 7,
					  X bsl N + Acc, F1);
skip_length_delimited_DeviceActionReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeviceActionReq(Rest2, 0, 0, F1).


skip_32_DeviceActionReq(<<_:32, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_DeviceActionReq(Rest, Z1, Z2, F1).


skip_64_DeviceActionReq(<<_:64, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_DeviceActionReq(Rest, Z1, Z2, F1).


d_msg_GpsActionReq(Bin) ->
    dfp_read_field_def_GpsActionReq(Bin, 0, 0, undefined,
				    undefined, undefined).

dfp_read_field_def_GpsActionReq(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionReq_actionType(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_GpsActionReq(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionReq_iValue(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_GpsActionReq(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionReq_sValue(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_GpsActionReq(<<>>, 0, 0, F1, F2,
				F3) ->
    #'GpsActionReq'{actionType = F1, iValue = F2,
		    sValue = F3};
dfp_read_field_def_GpsActionReq(Other, Z1, Z2, F1, F2,
				F3) ->
    dg_read_field_def_GpsActionReq(Other, Z1, Z2, F1, F2,
				   F3).

dg_read_field_def_GpsActionReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_GpsActionReq(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
dg_read_field_def_GpsActionReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GpsActionReq_actionType(Rest, 0, 0, F1, F2, F3);
      16 ->
	  d_field_GpsActionReq_iValue(Rest, 0, 0, F1, F2, F3);
      26 ->
	  d_field_GpsActionReq_sValue(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_GpsActionReq(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_GpsActionReq(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_GpsActionReq(Rest, 0, 0, F1, F2,
						   F3);
	    5 -> skip_32_GpsActionReq(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_GpsActionReq(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'GpsActionReq'{actionType = F1, iValue = F2,
		    sValue = F3}.

d_field_GpsActionReq_actionType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionReq_actionType(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_GpsActionReq_actionType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_GpsActionType(Tmp),
    dfp_read_field_def_GpsActionReq(Rest, 0, 0, NewFValue,
				    F2, F3).


d_field_GpsActionReq_iValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionReq_iValue(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
d_field_GpsActionReq_iValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GpsActionReq(Rest, 0, 0, F1,
				    NewFValue, F3).


d_field_GpsActionReq_sValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionReq_sValue(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
d_field_GpsActionReq_sValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GpsActionReq(Rest2, 0, 0, F1, F2,
				    NewFValue).


skip_varint_GpsActionReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    skip_varint_GpsActionReq(Rest, Z1, Z2, F1, F2, F3);
skip_varint_GpsActionReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    dfp_read_field_def_GpsActionReq(Rest, Z1, Z2, F1, F2,
				    F3).


skip_length_delimited_GpsActionReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_GpsActionReq(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
skip_length_delimited_GpsActionReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GpsActionReq(Rest2, 0, 0, F1, F2,
				    F3).


skip_32_GpsActionReq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    dfp_read_field_def_GpsActionReq(Rest, Z1, Z2, F1, F2,
				    F3).


skip_64_GpsActionReq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    dfp_read_field_def_GpsActionReq(Rest, Z1, Z2, F1, F2,
				    F3).


d_msg_LightingSetAuto(Bin) ->
    dfp_read_field_def_LightingSetAuto(Bin, 0, 0).

dfp_read_field_def_LightingSetAuto(<<>>, 0, 0) ->
    #'LightingSetAuto'{};
dfp_read_field_def_LightingSetAuto(Other, Z1, Z2) ->
    dg_read_field_def_LightingSetAuto(Other, Z1, Z2).

dg_read_field_def_LightingSetAuto(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc)
    when N < 32 - 7 ->
    dg_read_field_def_LightingSetAuto(Rest, N + 7,
				      X bsl N + Acc);
dg_read_field_def_LightingSetAuto(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_LightingSetAuto(Rest, 0, 0);
      1 -> skip_64_LightingSetAuto(Rest, 0, 0);
      2 -> skip_length_delimited_LightingSetAuto(Rest, 0, 0);
      5 -> skip_32_LightingSetAuto(Rest, 0, 0)
    end;
dg_read_field_def_LightingSetAuto(<<>>, 0, 0) ->
    #'LightingSetAuto'{}.

skip_varint_LightingSetAuto(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2) ->
    skip_varint_LightingSetAuto(Rest, Z1, Z2);
skip_varint_LightingSetAuto(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2) ->
    dfp_read_field_def_LightingSetAuto(Rest, Z1, Z2).


skip_length_delimited_LightingSetAuto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc)
    when N < 57 ->
    skip_length_delimited_LightingSetAuto(Rest, N + 7,
					  X bsl N + Acc);
skip_length_delimited_LightingSetAuto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingSetAuto(Rest2, 0, 0).


skip_32_LightingSetAuto(<<_:32, Rest/binary>>, Z1,
			Z2) ->
    dfp_read_field_def_LightingSetAuto(Rest, Z1, Z2).


skip_64_LightingSetAuto(<<_:64, Rest/binary>>, Z1,
			Z2) ->
    dfp_read_field_def_LightingSetAuto(Rest, Z1, Z2).


d_msg_GpsSample(Bin) ->
    dfp_read_field_def_GpsSample(Bin, 0, 0, undefined,
				 undefined, undefined, undefined, undefined).

dfp_read_field_def_GpsSample(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, F4, F5) ->
    d_field_GpsSample_gpsVer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_GpsSample(<<21, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_GpsSample_epochSecs(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
dfp_read_field_def_GpsSample(<<25, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_GpsSample_latAndLon(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
dfp_read_field_def_GpsSample(<<37, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_GpsSample_altAndMisc(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
dfp_read_field_def_GpsSample(<<41, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_GpsSample_snrAndMisc(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
dfp_read_field_def_GpsSample(<<>>, 0, 0, F1, F2, F3, F4,
			     F5) ->
    #'GpsSample'{gpsVer = F1, epochSecs = F2,
		 latAndLon = F3, altAndMisc = F4, snrAndMisc = F5};
dfp_read_field_def_GpsSample(Other, Z1, Z2, F1, F2, F3,
			     F4, F5) ->
    dg_read_field_def_GpsSample(Other, Z1, Z2, F1, F2, F3,
				F4, F5).

dg_read_field_def_GpsSample(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_GpsSample(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
dg_read_field_def_GpsSample(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GpsSample_gpsVer(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      21 ->
	  d_field_GpsSample_epochSecs(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      25 ->
	  d_field_GpsSample_latAndLon(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      37 ->
	  d_field_GpsSample_altAndMisc(Rest, 0, 0, F1, F2, F3, F4,
				       F5);
      41 ->
	  d_field_GpsSample_snrAndMisc(Rest, 0, 0, F1, F2, F3, F4,
				       F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GpsSample(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_GpsSample(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_GpsSample(Rest, 0, 0, F1, F2, F3,
						F4, F5);
	    5 -> skip_32_GpsSample(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_GpsSample(<<>>, 0, 0, F1, F2, F3, F4,
			    F5) ->
    #'GpsSample'{gpsVer = F1, epochSecs = F2,
		 latAndLon = F3, altAndMisc = F4, snrAndMisc = F5}.

d_field_GpsSample_gpsVer(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_GpsSample_gpsVer(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_GpsSample_gpsVer(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_GpsSample(Rest, 0, 0, NewFValue, F2,
				 F3, F4, F5).


d_field_GpsSample_epochSecs(<<Value:32/little,
			      Rest/binary>>,
			    Z1, Z2, F1, _, F3, F4, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, Value,
				 F3, F4, F5).


d_field_GpsSample_latAndLon(<<Value:64/little,
			      Rest/binary>>,
			    Z1, Z2, F1, F2, _, F4, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2,
				 Value, F4, F5).


d_field_GpsSample_altAndMisc(<<Value:32/little,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, _, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2, F3,
				 Value, F5).


d_field_GpsSample_snrAndMisc(<<Value:64/little,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, _) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2, F3,
				 F4, Value).


skip_varint_GpsSample(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5) ->
    skip_varint_GpsSample(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_GpsSample(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


skip_length_delimited_GpsSample(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_GpsSample(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_GpsSample(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GpsSample(Rest2, 0, 0, F1, F2, F3,
				 F4, F5).


skip_32_GpsSample(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


skip_64_GpsSample(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5) ->
    dfp_read_field_def_GpsSample(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


d_msg_AstronomicalEvent(Bin) ->
    dfp_read_field_def_AstronomicalEvent(Bin, 0, 0,
					 undefined, undefined, undefined,
					 undefined, undefined, undefined,
					 undefined).

dfp_read_field_def_AstronomicalEvent(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_body(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_atype(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_zenith(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_wday(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<40,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_mday(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<48,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_mon(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<56,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_AstronomicalEvent_year(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_AstronomicalEvent(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7) ->
    #'AstronomicalEvent'{body = F1, atype = F2, zenith = F3,
			 wday = F4, mday = F5, mon = F6, year = F7};
dfp_read_field_def_AstronomicalEvent(Other, Z1, Z2, F1,
				     F2, F3, F4, F5, F6, F7) ->
    dg_read_field_def_AstronomicalEvent(Other, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7).

dg_read_field_def_AstronomicalEvent(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_AstronomicalEvent(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
dg_read_field_def_AstronomicalEvent(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AstronomicalEvent_body(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      16 ->
	  d_field_AstronomicalEvent_atype(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7);
      24 ->
	  d_field_AstronomicalEvent_zenith(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      32 ->
	  d_field_AstronomicalEvent_wday(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      40 ->
	  d_field_AstronomicalEvent_mday(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      48 ->
	  d_field_AstronomicalEvent_mon(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7);
      56 ->
	  d_field_AstronomicalEvent_year(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AstronomicalEvent(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7);
	    1 ->
		skip_64_AstronomicalEvent(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7);
	    2 ->
		skip_length_delimited_AstronomicalEvent(Rest, 0, 0, F1,
							F2, F3, F4, F5, F6, F7);
	    5 ->
		skip_32_AstronomicalEvent(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7)
	  end
    end;
dg_read_field_def_AstronomicalEvent(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, F7) ->
    #'AstronomicalEvent'{body = F1, atype = F2, zenith = F3,
			 wday = F4, mday = F5, mon = F6, year = F7}.

d_field_AstronomicalEvent_body(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_body(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_body(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AstronomicalBody(Tmp),
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0,
					 NewFValue, F2, F3, F4, F5, F6, F7).


d_field_AstronomicalEvent_atype(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_atype(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_atype(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AstronomicalEventType(Tmp),
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1,
					 NewFValue, F3, F4, F5, F6, F7).


d_field_AstronomicalEvent_zenith(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_zenith(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_zenith(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_AstronomicalEventZenith(Tmp),
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1, F2,
					 NewFValue, F4, F5, F6, F7).


d_field_AstronomicalEvent_wday(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_wday(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_wday(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1, F2,
					 F3, NewFValue, F5, F6, F7).


d_field_AstronomicalEvent_mday(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_mday(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_mday(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1, F2,
					 F3, F4, NewFValue, F6, F7).


d_field_AstronomicalEvent_mon(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_mon(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_mon(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1, F2,
					 F3, F4, F5, NewFValue, F7).


d_field_AstronomicalEvent_year(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_AstronomicalEvent_year(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_AstronomicalEvent_year(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_AstronomicalEvent(Rest, 0, 0, F1, F2,
					 F3, F4, F5, F6, NewFValue).


skip_varint_AstronomicalEvent(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_AstronomicalEvent(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7);
skip_varint_AstronomicalEvent(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_AstronomicalEvent(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7).


skip_length_delimited_AstronomicalEvent(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_AstronomicalEvent(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7);
skip_length_delimited_AstronomicalEvent(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AstronomicalEvent(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7).


skip_32_AstronomicalEvent(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_AstronomicalEvent(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7).


skip_64_AstronomicalEvent(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_AstronomicalEvent(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7).


d_msg_LightingForceState(Bin) ->
    dfp_read_field_def_LightingForceState(Bin, 0, 0,
					  undefined, undefined).

dfp_read_field_def_LightingForceState(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_LightingForceState_state(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_LightingForceState(<<16,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    d_field_LightingForceState_ftype(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_LightingForceState(<<>>, 0, 0, F1,
				      F2) ->
    #'LightingForceState'{state = F1, ftype = F2};
dfp_read_field_def_LightingForceState(Other, Z1, Z2, F1,
				      F2) ->
    dg_read_field_def_LightingForceState(Other, Z1, Z2, F1,
					 F2).

dg_read_field_def_LightingForceState(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_LightingForceState(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
dg_read_field_def_LightingForceState(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LightingForceState_state(Rest, 0, 0, F1, F2);
      16 ->
	  d_field_LightingForceState_ftype(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_LightingForceState(Rest, 0, 0, F1, F2);
	    1 -> skip_64_LightingForceState(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_LightingForceState(Rest, 0, 0, F1,
							 F2);
	    5 -> skip_32_LightingForceState(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_LightingForceState(<<>>, 0, 0, F1,
				     F2) ->
    #'LightingForceState'{state = F1, ftype = F2}.

d_field_LightingForceState_state(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_LightingForceState_state(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_LightingForceState_state(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'LightingCtrl'),
    dfp_read_field_def_LightingForceState(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_LightingCtrl(F1,
									NewFValue)
					  end,
					  F2).


d_field_LightingForceState_ftype(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    d_field_LightingForceState_ftype(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
d_field_LightingForceState_ftype(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_LightingForceType(Tmp),
    dfp_read_field_def_LightingForceState(Rest, 0, 0, F1,
					  NewFValue).


skip_varint_LightingForceState(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    skip_varint_LightingForceState(Rest, Z1, Z2, F1, F2);
skip_varint_LightingForceState(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    dfp_read_field_def_LightingForceState(Rest, Z1, Z2, F1,
					  F2).


skip_length_delimited_LightingForceState(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_LightingForceState(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
skip_length_delimited_LightingForceState(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingForceState(Rest2, 0, 0, F1,
					  F2).


skip_32_LightingForceState(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_LightingForceState(Rest, Z1, Z2, F1,
					  F2).


skip_64_LightingForceState(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    dfp_read_field_def_LightingForceState(Rest, Z1, Z2, F1,
					  F2).


d_msg_SensorSample(Bin) ->
    dfp_read_field_def_SensorSample(Bin, 0, 0, undefined,
				    undefined, undefined, undefined).

dfp_read_field_def_SensorSample(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_SensorSample_sensor(Rest, Z1, Z2, F1, F2, F3,
				F4);
dfp_read_field_def_SensorSample(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_SensorSample_time(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_SensorSample(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_SensorSample_value(Rest, Z1, Z2, F1, F2, F3,
			       F4);
dfp_read_field_def_SensorSample(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4) ->
    d_field_SensorSample_units(Rest, Z1, Z2, F1, F2, F3,
			       F4);
dfp_read_field_def_SensorSample(<<>>, 0, 0, F1, F2, F3,
				F4) ->
    #'SensorSample'{sensor = F1, time = F2, value = F3,
		    units = F4};
dfp_read_field_def_SensorSample(Other, Z1, Z2, F1, F2,
				F3, F4) ->
    dg_read_field_def_SensorSample(Other, Z1, Z2, F1, F2,
				   F3, F4).

dg_read_field_def_SensorSample(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_SensorSample(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_SensorSample(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SensorSample_sensor(Rest, 0, 0, F1, F2, F3, F4);
      16 ->
	  d_field_SensorSample_time(Rest, 0, 0, F1, F2, F3, F4);
      24 ->
	  d_field_SensorSample_value(Rest, 0, 0, F1, F2, F3, F4);
      34 ->
	  d_field_SensorSample_units(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SensorSample(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_SensorSample(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_SensorSample(Rest, 0, 0, F1, F2,
						   F3, F4);
	    5 -> skip_32_SensorSample(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_SensorSample(<<>>, 0, 0, F1, F2, F3,
			       F4) ->
    #'SensorSample'{sensor = F1, time = F2, value = F3,
		    units = F4}.

d_field_SensorSample_sensor(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SensorSample_sensor(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4);
d_field_SensorSample_sensor(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SensorSample(Rest2, 0, 0, NewFValue,
				    F2, F3, F4).


d_field_SensorSample_time(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SensorSample_time(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4);
d_field_SensorSample_time(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_SensorSample(Rest, 0, 0, F1,
				    NewFValue, F3, F4).


d_field_SensorSample_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SensorSample_value(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
d_field_SensorSample_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_SensorSample(Rest, 0, 0, F1, F2,
				    NewFValue, F4).


d_field_SensorSample_units(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SensorSample_units(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
d_field_SensorSample_units(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SensorSample(Rest2, 0, 0, F1, F2, F3,
				    NewFValue).


skip_varint_SensorSample(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4) ->
    skip_varint_SensorSample(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_SensorSample(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_SensorSample(Rest, Z1, Z2, F1, F2,
				    F3, F4).


skip_length_delimited_SensorSample(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_SensorSample(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_SensorSample(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SensorSample(Rest2, 0, 0, F1, F2, F3,
				    F4).


skip_32_SensorSample(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4) ->
    dfp_read_field_def_SensorSample(Rest, Z1, Z2, F1, F2,
				    F3, F4).


skip_64_SensorSample(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4) ->
    dfp_read_field_def_SensorSample(Rest, Z1, Z2, F1, F2,
				    F3, F4).


d_msg_LightingAstronomicalEvent(Bin) ->
    dfp_read_field_def_LightingAstronomicalEvent(Bin, 0, 0,
						 undefined, undefined,
						 undefined).

dfp_read_field_def_LightingAstronomicalEvent(<<8,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_LightingAstronomicalEvent_id(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_LightingAstronomicalEvent(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_LightingAstronomicalEvent_event(Rest, Z1, Z2,
					    F1, F2, F3);
dfp_read_field_def_LightingAstronomicalEvent(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    d_field_LightingAstronomicalEvent_state(Rest, Z1, Z2,
					    F1, F2, F3);
dfp_read_field_def_LightingAstronomicalEvent(<<>>, 0, 0,
					     F1, F2, F3) ->
    #'LightingAstronomicalEvent'{id = F1, event = F2,
				 state = F3};
dfp_read_field_def_LightingAstronomicalEvent(Other, Z1,
					     Z2, F1, F2, F3) ->
    dg_read_field_def_LightingAstronomicalEvent(Other, Z1,
						Z2, F1, F2, F3).

dg_read_field_def_LightingAstronomicalEvent(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_LightingAstronomicalEvent(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
dg_read_field_def_LightingAstronomicalEvent(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LightingAstronomicalEvent_id(Rest, 0, 0, F1, F2,
					       F3);
      18 ->
	  d_field_LightingAstronomicalEvent_event(Rest, 0, 0, F1,
						  F2, F3);
      26 ->
	  d_field_LightingAstronomicalEvent_state(Rest, 0, 0, F1,
						  F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LightingAstronomicalEvent(Rest, 0, 0, F1,
						      F2, F3);
	    1 ->
		skip_64_LightingAstronomicalEvent(Rest, 0, 0, F1, F2,
						  F3);
	    2 ->
		skip_length_delimited_LightingAstronomicalEvent(Rest, 0,
								0, F1, F2, F3);
	    5 ->
		skip_32_LightingAstronomicalEvent(Rest, 0, 0, F1, F2,
						  F3)
	  end
    end;
dg_read_field_def_LightingAstronomicalEvent(<<>>, 0, 0,
					    F1, F2, F3) ->
    #'LightingAstronomicalEvent'{id = F1, event = F2,
				 state = F3}.

d_field_LightingAstronomicalEvent_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingAstronomicalEvent_id(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_LightingAstronomicalEvent_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_LightingAstronomicalEvent(Rest, 0, 0,
						 NewFValue, F2, F3).


d_field_LightingAstronomicalEvent_event(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingAstronomicalEvent_event(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
d_field_LightingAstronomicalEvent_event(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'AstronomicalEvent'),
    dfp_read_field_def_LightingAstronomicalEvent(Rest2, 0,
						 0, F1,
						 if F2 == undefined ->
							NewFValue;
						    true ->
							merge_msg_AstronomicalEvent(F2,
										    NewFValue)
						 end,
						 F3).


d_field_LightingAstronomicalEvent_state(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_LightingAstronomicalEvent_state(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
d_field_LightingAstronomicalEvent_state(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'LightingCtrl'),
    dfp_read_field_def_LightingAstronomicalEvent(Rest2, 0,
						 0, F1, F2,
						 if F3 == undefined ->
							NewFValue;
						    true ->
							merge_msg_LightingCtrl(F3,
									       NewFValue)
						 end).


skip_varint_LightingAstronomicalEvent(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    skip_varint_LightingAstronomicalEvent(Rest, Z1, Z2, F1,
					  F2, F3);
skip_varint_LightingAstronomicalEvent(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingAstronomicalEvent(Rest, Z1,
						 Z2, F1, F2, F3).


skip_length_delimited_LightingAstronomicalEvent(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_LightingAstronomicalEvent(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3);
skip_length_delimited_LightingAstronomicalEvent(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LightingAstronomicalEvent(Rest2, 0,
						 0, F1, F2, F3).


skip_32_LightingAstronomicalEvent(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingAstronomicalEvent(Rest, Z1,
						 Z2, F1, F2, F3).


skip_64_LightingAstronomicalEvent(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_LightingAstronomicalEvent(Rest, Z1,
						 Z2, F1, F2, F3).


d_msg_SensorSampleReq(Bin) ->
    dfp_read_field_def_SensorSampleReq(Bin, 0, 0,
				       undefined).

dfp_read_field_def_SensorSampleReq(<<10, Rest/binary>>,
				   Z1, Z2, F1) ->
    d_field_SensorSampleReq_sensor(Rest, Z1, Z2, F1);
dfp_read_field_def_SensorSampleReq(<<>>, 0, 0, F1) ->
    #'SensorSampleReq'{sensor = F1};
dfp_read_field_def_SensorSampleReq(Other, Z1, Z2, F1) ->
    dg_read_field_def_SensorSampleReq(Other, Z1, Z2, F1).

dg_read_field_def_SensorSampleReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_SensorSampleReq(Rest, N + 7,
				      X bsl N + Acc, F1);
dg_read_field_def_SensorSampleReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_SensorSampleReq_sensor(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_SensorSampleReq(Rest, 0, 0, F1);
	    1 -> skip_64_SensorSampleReq(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_SensorSampleReq(Rest, 0, 0, F1);
	    5 -> skip_32_SensorSampleReq(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_SensorSampleReq(<<>>, 0, 0, F1) ->
    #'SensorSampleReq'{sensor = F1}.

d_field_SensorSampleReq_sensor(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    d_field_SensorSampleReq_sensor(Rest, N + 7,
				   X bsl N + Acc, F1);
d_field_SensorSampleReq_sensor(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SensorSampleReq(Rest2, 0, 0,
				       NewFValue).


skip_varint_SensorSampleReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    skip_varint_SensorSampleReq(Rest, Z1, Z2, F1);
skip_varint_SensorSampleReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    dfp_read_field_def_SensorSampleReq(Rest, Z1, Z2, F1).


skip_length_delimited_SensorSampleReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_SensorSampleReq(Rest, N + 7,
					  X bsl N + Acc, F1);
skip_length_delimited_SensorSampleReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SensorSampleReq(Rest2, 0, 0, F1).


skip_32_SensorSampleReq(<<_:32, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_SensorSampleReq(Rest, Z1, Z2, F1).


skip_64_SensorSampleReq(<<_:64, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_SensorSampleReq(Rest, Z1, Z2, F1).


d_msg_GpsActionRsp(Bin) ->
    dfp_read_field_def_GpsActionRsp(Bin, 0, 0, undefined,
				    undefined, undefined).

dfp_read_field_def_GpsActionRsp(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionRsp_actionType(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_GpsActionRsp(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionRsp_iValue(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_GpsActionRsp(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    d_field_GpsActionRsp_sValue(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_GpsActionRsp(<<>>, 0, 0, F1, F2,
				F3) ->
    #'GpsActionRsp'{actionType = F1, iValue = F2,
		    sValue = F3};
dfp_read_field_def_GpsActionRsp(Other, Z1, Z2, F1, F2,
				F3) ->
    dg_read_field_def_GpsActionRsp(Other, Z1, Z2, F1, F2,
				   F3).

dg_read_field_def_GpsActionRsp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_GpsActionRsp(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
dg_read_field_def_GpsActionRsp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GpsActionRsp_actionType(Rest, 0, 0, F1, F2, F3);
      16 ->
	  d_field_GpsActionRsp_iValue(Rest, 0, 0, F1, F2, F3);
      26 ->
	  d_field_GpsActionRsp_sValue(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_GpsActionRsp(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_GpsActionRsp(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_GpsActionRsp(Rest, 0, 0, F1, F2,
						   F3);
	    5 -> skip_32_GpsActionRsp(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_GpsActionRsp(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'GpsActionRsp'{actionType = F1, iValue = F2,
		    sValue = F3}.

d_field_GpsActionRsp_actionType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionRsp_actionType(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_GpsActionRsp_actionType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_GpsActionType(Tmp),
    dfp_read_field_def_GpsActionRsp(Rest, 0, 0, NewFValue,
				    F2, F3).


d_field_GpsActionRsp_iValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionRsp_iValue(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
d_field_GpsActionRsp_iValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GpsActionRsp(Rest, 0, 0, F1,
				    NewFValue, F3).


d_field_GpsActionRsp_sValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_GpsActionRsp_sValue(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
d_field_GpsActionRsp_sValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GpsActionRsp(Rest2, 0, 0, F1, F2,
				    NewFValue).


skip_varint_GpsActionRsp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    skip_varint_GpsActionRsp(Rest, Z1, Z2, F1, F2, F3);
skip_varint_GpsActionRsp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    dfp_read_field_def_GpsActionRsp(Rest, Z1, Z2, F1, F2,
				    F3).


skip_length_delimited_GpsActionRsp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_GpsActionRsp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
skip_length_delimited_GpsActionRsp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GpsActionRsp(Rest2, 0, 0, F1, F2,
				    F3).


skip_32_GpsActionRsp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    dfp_read_field_def_GpsActionRsp(Rest, Z1, Z2, F1, F2,
				    F3).


skip_64_GpsActionRsp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    dfp_read_field_def_GpsActionRsp(Rest, Z1, Z2, F1, F2,
				    F3).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'DeviceAlarm'{} -> merge_msg_DeviceAlarm(Prev, New);
      #'LightingClearSchedule'{} ->
	  merge_msg_LightingClearSchedule(Prev, New);
      #'CalendarEvent'{} ->
	  merge_msg_CalendarEvent(Prev, New);
      #'LightingCtrl'{} -> merge_msg_LightingCtrl(Prev, New);
      #'LightingScheduledEvent'{} ->
	  merge_msg_LightingScheduledEvent(Prev, New);
      #'DeviceActionReq'{} ->
	  merge_msg_DeviceActionReq(Prev, New);
      #'GpsActionReq'{} -> merge_msg_GpsActionReq(Prev, New);
      #'LightingSetAuto'{} ->
	  merge_msg_LightingSetAuto(Prev, New);
      #'GpsSample'{} -> merge_msg_GpsSample(Prev, New);
      #'AstronomicalEvent'{} ->
	  merge_msg_AstronomicalEvent(Prev, New);
      #'LightingForceState'{} ->
	  merge_msg_LightingForceState(Prev, New);
      #'SensorSample'{} -> merge_msg_SensorSample(Prev, New);
      #'LightingAstronomicalEvent'{} ->
	  merge_msg_LightingAstronomicalEvent(Prev, New);
      #'SensorSampleReq'{} ->
	  merge_msg_SensorSampleReq(Prev, New);
      #'GpsActionRsp'{} -> merge_msg_GpsActionRsp(Prev, New)
    end.

merge_msg_DeviceAlarm(#'DeviceAlarm'{alarmType =
					 PFalarmType,
				     alarmSeverity = PFalarmSeverity,
				     msg = PFmsg},
		      #'DeviceAlarm'{alarmType = NFalarmType,
				     alarmSeverity = NFalarmSeverity,
				     msg = NFmsg}) ->
    #'DeviceAlarm'{alarmType =
		       if NFalarmType =:= undefined -> PFalarmType;
			  true -> NFalarmType
		       end,
		   alarmSeverity =
		       if NFalarmSeverity =:= undefined -> PFalarmSeverity;
			  true -> NFalarmSeverity
		       end,
		   msg =
		       if NFmsg =:= undefined -> PFmsg;
			  true -> NFmsg
		       end}.

merge_msg_LightingClearSchedule(_Prev, New) -> New.

merge_msg_CalendarEvent(#'CalendarEvent'{sec = PFsec,
					 min = PFmin, hr = PFhr, wday = PFwday,
					 mday = PFmday, mon = PFmon,
					 year = PFyear},
			#'CalendarEvent'{sec = NFsec, min = NFmin, hr = NFhr,
					 wday = NFwday, mday = NFmday,
					 mon = NFmon, year = NFyear}) ->
    #'CalendarEvent'{sec =
			 if NFsec =:= undefined -> PFsec;
			    true -> NFsec
			 end,
		     min =
			 if NFmin =:= undefined -> PFmin;
			    true -> NFmin
			 end,
		     hr =
			 if NFhr =:= undefined -> PFhr;
			    true -> NFhr
			 end,
		     wday =
			 if NFwday =:= undefined -> PFwday;
			    true -> NFwday
			 end,
		     mday =
			 if NFmday =:= undefined -> PFmday;
			    true -> NFmday
			 end,
		     mon =
			 if NFmon =:= undefined -> PFmon;
			    true -> NFmon
			 end,
		     year =
			 if NFyear =:= undefined -> PFyear;
			    true -> NFyear
			 end}.

merge_msg_LightingCtrl(#'LightingCtrl'{pri = PFpri,
				       mask = PFmask, level = PFlevel,
				       qualifiers = PFqualifiers},
		       #'LightingCtrl'{pri = NFpri, mask = NFmask,
				       level = NFlevel,
				       qualifiers = NFqualifiers}) ->
    #'LightingCtrl'{pri =
			if NFpri =:= undefined -> PFpri;
			   true -> NFpri
			end,
		    mask =
			if NFmask =:= undefined -> PFmask;
			   true -> NFmask
			end,
		    level =
			if NFlevel =:= undefined -> PFlevel;
			   true -> NFlevel
			end,
		    qualifiers =
			if NFqualifiers =:= undefined -> PFqualifiers;
			   true -> NFqualifiers
			end}.

merge_msg_LightingScheduledEvent(#'LightingScheduledEvent'{id
							       = PFid,
							   event = PFevent,
							   state = PFstate},
				 #'LightingScheduledEvent'{id = NFid,
							   event = NFevent,
							   state = NFstate}) ->
    #'LightingScheduledEvent'{id =
				  if NFid =:= undefined -> PFid;
				     true -> NFid
				  end,
			      event = merge_msg_CalendarEvent(PFevent, NFevent),
			      state = merge_msg_LightingCtrl(PFstate, NFstate)}.

merge_msg_DeviceActionReq(#'DeviceActionReq'{actionType
						 = PFactionType},
			  #'DeviceActionReq'{actionType = NFactionType}) ->
    #'DeviceActionReq'{actionType =
			   if NFactionType =:= undefined -> PFactionType;
			      true -> NFactionType
			   end}.

merge_msg_GpsActionReq(#'GpsActionReq'{actionType =
					   PFactionType,
				       iValue = PFiValue, sValue = PFsValue},
		       #'GpsActionReq'{actionType = NFactionType,
				       iValue = NFiValue, sValue = NFsValue}) ->
    #'GpsActionReq'{actionType =
			if NFactionType =:= undefined -> PFactionType;
			   true -> NFactionType
			end,
		    iValue =
			if NFiValue =:= undefined -> PFiValue;
			   true -> NFiValue
			end,
		    sValue =
			if NFsValue =:= undefined -> PFsValue;
			   true -> NFsValue
			end}.

merge_msg_LightingSetAuto(_Prev, New) -> New.

merge_msg_GpsSample(#'GpsSample'{gpsVer = PFgpsVer,
				 epochSecs = PFepochSecs,
				 latAndLon = PFlatAndLon,
				 altAndMisc = PFaltAndMisc,
				 snrAndMisc = PFsnrAndMisc},
		    #'GpsSample'{gpsVer = NFgpsVer, epochSecs = NFepochSecs,
				 latAndLon = NFlatAndLon,
				 altAndMisc = NFaltAndMisc,
				 snrAndMisc = NFsnrAndMisc}) ->
    #'GpsSample'{gpsVer =
		     if NFgpsVer =:= undefined -> PFgpsVer;
			true -> NFgpsVer
		     end,
		 epochSecs =
		     if NFepochSecs =:= undefined -> PFepochSecs;
			true -> NFepochSecs
		     end,
		 latAndLon =
		     if NFlatAndLon =:= undefined -> PFlatAndLon;
			true -> NFlatAndLon
		     end,
		 altAndMisc =
		     if NFaltAndMisc =:= undefined -> PFaltAndMisc;
			true -> NFaltAndMisc
		     end,
		 snrAndMisc =
		     if NFsnrAndMisc =:= undefined -> PFsnrAndMisc;
			true -> NFsnrAndMisc
		     end}.

merge_msg_AstronomicalEvent(#'AstronomicalEvent'{body =
						     PFbody,
						 atype = PFatype,
						 zenith = PFzenith,
						 wday = PFwday, mday = PFmday,
						 mon = PFmon, year = PFyear},
			    #'AstronomicalEvent'{body = NFbody, atype = NFatype,
						 zenith = NFzenith,
						 wday = NFwday, mday = NFmday,
						 mon = NFmon, year = NFyear}) ->
    #'AstronomicalEvent'{body =
			     if NFbody =:= undefined -> PFbody;
				true -> NFbody
			     end,
			 atype =
			     if NFatype =:= undefined -> PFatype;
				true -> NFatype
			     end,
			 zenith =
			     if NFzenith =:= undefined -> PFzenith;
				true -> NFzenith
			     end,
			 wday =
			     if NFwday =:= undefined -> PFwday;
				true -> NFwday
			     end,
			 mday =
			     if NFmday =:= undefined -> PFmday;
				true -> NFmday
			     end,
			 mon =
			     if NFmon =:= undefined -> PFmon;
				true -> NFmon
			     end,
			 year =
			     if NFyear =:= undefined -> PFyear;
				true -> NFyear
			     end}.

merge_msg_LightingForceState(#'LightingForceState'{state
						       = PFstate,
						   ftype = PFftype},
			     #'LightingForceState'{state = NFstate,
						   ftype = NFftype}) ->
    #'LightingForceState'{state =
			      merge_msg_LightingCtrl(PFstate, NFstate),
			  ftype =
			      if NFftype =:= undefined -> PFftype;
				 true -> NFftype
			      end}.

merge_msg_SensorSample(#'SensorSample'{sensor =
					   PFsensor,
				       time = PFtime, value = PFvalue,
				       units = PFunits},
		       #'SensorSample'{sensor = NFsensor, time = NFtime,
				       value = NFvalue, units = NFunits}) ->
    #'SensorSample'{sensor =
			if NFsensor =:= undefined -> PFsensor;
			   true -> NFsensor
			end,
		    time =
			if NFtime =:= undefined -> PFtime;
			   true -> NFtime
			end,
		    value =
			if NFvalue =:= undefined -> PFvalue;
			   true -> NFvalue
			end,
		    units =
			if NFunits =:= undefined -> PFunits;
			   true -> NFunits
			end}.

merge_msg_LightingAstronomicalEvent(#'LightingAstronomicalEvent'{id
								     = PFid,
								 event =
								     PFevent,
								 state =
								     PFstate},
				    #'LightingAstronomicalEvent'{id = NFid,
								 event =
								     NFevent,
								 state =
								     NFstate}) ->
    #'LightingAstronomicalEvent'{id =
				     if NFid =:= undefined -> PFid;
					true -> NFid
				     end,
				 event =
				     merge_msg_AstronomicalEvent(PFevent,
								 NFevent),
				 state =
				     merge_msg_LightingCtrl(PFstate, NFstate)}.

merge_msg_SensorSampleReq(#'SensorSampleReq'{sensor =
						 PFsensor},
			  #'SensorSampleReq'{sensor = NFsensor}) ->
    #'SensorSampleReq'{sensor =
			   if NFsensor =:= undefined -> PFsensor;
			      true -> NFsensor
			   end}.

merge_msg_GpsActionRsp(#'GpsActionRsp'{actionType =
					   PFactionType,
				       iValue = PFiValue, sValue = PFsValue},
		       #'GpsActionRsp'{actionType = NFactionType,
				       iValue = NFiValue, sValue = NFsValue}) ->
    #'GpsActionRsp'{actionType =
			if NFactionType =:= undefined -> PFactionType;
			   true -> NFactionType
			end,
		    iValue =
			if NFiValue =:= undefined -> PFiValue;
			   true -> NFiValue
			end,
		    sValue =
			if NFsValue =:= undefined -> PFsValue;
			   true -> NFsValue
			end}.



verify_msg(Msg) ->
    case Msg of
      #'DeviceAlarm'{} ->
	  v_msg_DeviceAlarm(Msg, ['DeviceAlarm']);
      #'LightingClearSchedule'{} ->
	  v_msg_LightingClearSchedule(Msg,
				      ['LightingClearSchedule']);
      #'CalendarEvent'{} ->
	  v_msg_CalendarEvent(Msg, ['CalendarEvent']);
      #'LightingCtrl'{} ->
	  v_msg_LightingCtrl(Msg, ['LightingCtrl']);
      #'LightingScheduledEvent'{} ->
	  v_msg_LightingScheduledEvent(Msg,
				       ['LightingScheduledEvent']);
      #'DeviceActionReq'{} ->
	  v_msg_DeviceActionReq(Msg, ['DeviceActionReq']);
      #'GpsActionReq'{} ->
	  v_msg_GpsActionReq(Msg, ['GpsActionReq']);
      #'LightingSetAuto'{} ->
	  v_msg_LightingSetAuto(Msg, ['LightingSetAuto']);
      #'GpsSample'{} -> v_msg_GpsSample(Msg, ['GpsSample']);
      #'AstronomicalEvent'{} ->
	  v_msg_AstronomicalEvent(Msg, ['AstronomicalEvent']);
      #'LightingForceState'{} ->
	  v_msg_LightingForceState(Msg, ['LightingForceState']);
      #'SensorSample'{} ->
	  v_msg_SensorSample(Msg, ['SensorSample']);
      #'LightingAstronomicalEvent'{} ->
	  v_msg_LightingAstronomicalEvent(Msg,
					  ['LightingAstronomicalEvent']);
      #'SensorSampleReq'{} ->
	  v_msg_SensorSampleReq(Msg, ['SensorSampleReq']);
      #'GpsActionRsp'{} ->
	  v_msg_GpsActionRsp(Msg, ['GpsActionRsp']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_DeviceAlarm(#'DeviceAlarm'{alarmType = F1,
				 alarmSeverity = F2, msg = F3},
		  Path) ->
    v_enum_AlarmType(F1, [alarmType | Path]),
    v_enum_AlarmSeverity(F2, [alarmSeverity | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [msg | Path])
    end,
    ok.

v_msg_LightingClearSchedule(#'LightingClearSchedule'{},
			    _Path) ->
    ok.

v_msg_CalendarEvent(#'CalendarEvent'{sec = F1, min = F2,
				     hr = F3, wday = F4, mday = F5, mon = F6,
				     year = F7},
		    Path) ->
    v_type_uint32(F1, [sec | Path]),
    v_type_uint32(F2, [min | Path]),
    v_type_uint32(F3, [hr | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [wday | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [mday | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [mon | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [year | Path])
    end,
    ok;
v_msg_CalendarEvent(X, Path) ->
    mk_type_error({expected_msg, 'CalendarEvent'}, X, Path).

v_msg_LightingCtrl(#'LightingCtrl'{pri = F1, mask = F2,
				   level = F3, qualifiers = F4},
		   Path) ->
    v_type_uint32(F1, [pri | Path]),
    v_type_uint32(F2, [mask | Path]),
    v_type_bytes(F3, [level | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [qualifiers | Path])
    end,
    ok;
v_msg_LightingCtrl(X, Path) ->
    mk_type_error({expected_msg, 'LightingCtrl'}, X, Path).

v_msg_LightingScheduledEvent(#'LightingScheduledEvent'{id
							   = F1,
						       event = F2, state = F3},
			     Path) ->
    v_type_uint32(F1, [id | Path]),
    v_msg_CalendarEvent(F2, [event | Path]),
    v_msg_LightingCtrl(F3, [state | Path]),
    ok.

v_msg_DeviceActionReq(#'DeviceActionReq'{actionType =
					     F1},
		      Path) ->
    v_enum_ActionType(F1, [actionType | Path]), ok.

v_msg_GpsActionReq(#'GpsActionReq'{actionType = F1,
				   iValue = F2, sValue = F3},
		   Path) ->
    v_enum_GpsActionType(F1, [actionType | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [iValue | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [sValue | Path])
    end,
    ok.

v_msg_LightingSetAuto(#'LightingSetAuto'{}, _Path) ->
    ok.

v_msg_GpsSample(#'GpsSample'{gpsVer = F1,
			     epochSecs = F2, latAndLon = F3, altAndMisc = F4,
			     snrAndMisc = F5},
		Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [gpsVer | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_fixed32(F2, [epochSecs | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_fixed64(F3, [latAndLon | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_fixed32(F4, [altAndMisc | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_fixed64(F5, [snrAndMisc | Path])
    end,
    ok.

v_msg_AstronomicalEvent(#'AstronomicalEvent'{body = F1,
					     atype = F2, zenith = F3, wday = F4,
					     mday = F5, mon = F6, year = F7},
			Path) ->
    v_enum_AstronomicalBody(F1, [body | Path]),
    v_enum_AstronomicalEventType(F2, [atype | Path]),
    v_enum_AstronomicalEventZenith(F3, [zenith | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [wday | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [mday | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [mon | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [year | Path])
    end,
    ok;
v_msg_AstronomicalEvent(X, Path) ->
    mk_type_error({expected_msg, 'AstronomicalEvent'}, X,
		  Path).

v_msg_LightingForceState(#'LightingForceState'{state =
						   F1,
					       ftype = F2},
			 Path) ->
    v_msg_LightingCtrl(F1, [state | Path]),
    if F2 == undefined -> ok;
       true -> v_enum_LightingForceType(F2, [ftype | Path])
    end,
    ok.

v_msg_SensorSample(#'SensorSample'{sensor = F1,
				   time = F2, value = F3, units = F4},
		   Path) ->
    v_type_string(F1, [sensor | Path]),
    v_type_uint64(F2, [time | Path]),
    v_type_uint64(F3, [value | Path]),
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [units | Path])
    end,
    ok.

v_msg_LightingAstronomicalEvent(#'LightingAstronomicalEvent'{id
								 = F1,
							     event = F2,
							     state = F3},
				Path) ->
    v_type_uint32(F1, [id | Path]),
    v_msg_AstronomicalEvent(F2, [event | Path]),
    v_msg_LightingCtrl(F3, [state | Path]),
    ok.

v_msg_SensorSampleReq(#'SensorSampleReq'{sensor = F1},
		      Path) ->
    v_type_string(F1, [sensor | Path]), ok.

v_msg_GpsActionRsp(#'GpsActionRsp'{actionType = F1,
				   iValue = F2, sValue = F3},
		   Path) ->
    v_enum_GpsActionType(F1, [actionType | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [iValue | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [sValue | Path])
    end,
    ok.

v_enum_LightingForceType('Persistent', _Path) -> ok;
v_enum_LightingForceType('Volatile', _Path) -> ok;
v_enum_LightingForceType(X, Path) ->
    mk_type_error({invalid_enum, 'LightingForceType'}, X,
		  Path).

v_enum_AlarmType('CommFail', _Path) -> ok;
v_enum_AlarmType('SimFail', _Path) -> ok;
v_enum_AlarmType('NotTested', _Path) -> ok;
v_enum_AlarmType('DownrevSoftware', _Path) -> ok;
v_enum_AlarmType('BadSensorData', _Path) -> ok;
v_enum_AlarmType('ConfigFail', _Path) -> ok;
v_enum_AlarmType('DegradedNetwork', _Path) -> ok;
v_enum_AlarmType('SoftwareUpdateFail', _Path) -> ok;
v_enum_AlarmType('ScheduleFail', _Path) -> ok;
v_enum_AlarmType('PreRuninFail', _Path) -> ok;
v_enum_AlarmType('PostRuninFail', _Path) -> ok;
v_enum_AlarmType('USPFail', _Path) -> ok;
v_enum_AlarmType('PMACFail', _Path) -> ok;
v_enum_AlarmType('DriverFail', _Path) -> ok;
v_enum_AlarmType('FarmUSPFail', _Path) -> ok;
v_enum_AlarmType('SensorFail', _Path) -> ok;
v_enum_AlarmType('StrangeReboot', _Path) -> ok;
v_enum_AlarmType('Assert', _Path) -> ok;
v_enum_AlarmType('X509ClientFail', _Path) -> ok;
v_enum_AlarmType('X509ServerFail', _Path) -> ok;
v_enum_AlarmType('UnderPower', _Path) -> ok;
v_enum_AlarmType('OverPower', _Path) -> ok;
v_enum_AlarmType('HardFault', _Path) -> ok;
v_enum_AlarmType('HWFail_generic', _Path) -> ok;
v_enum_AlarmType('HWFail_HIH6131', _Path) -> ok;
v_enum_AlarmType('HWFail_ISL29023', _Path) -> ok;
v_enum_AlarmType('HWFail_SE95', _Path) -> ok;
v_enum_AlarmType('HWFail_ZMotion', _Path) -> ok;
v_enum_AlarmType('HWFail_MMA8451', _Path) -> ok;
v_enum_AlarmType('HWFail_TSC3414', _Path) -> ok;
v_enum_AlarmType('HWFail_UrbanUSP', _Path) -> ok;
v_enum_AlarmType('HWFail_RTC', _Path) -> ok;
v_enum_AlarmType('HWFail_EEPROM', _Path) -> ok;
v_enum_AlarmType('HWFail_NIGHTHAWK', _Path) -> ok;
v_enum_AlarmType('SWUpdateFail_SENSORPOD', _Path) -> ok;
v_enum_AlarmType('HWFail_STUCK_RELAY', _Path) -> ok;
v_enum_AlarmType('HWFail_PCT2075', _Path) -> ok;
v_enum_AlarmType('HWFAIL_SIHAWK', _Path) -> ok;
v_enum_AlarmType('HWFAIL_GPS', _Path) -> ok;
v_enum_AlarmType('HWFail_PodBus', _Path) -> ok;
v_enum_AlarmType('Epic_Fail', _Path) -> ok;
v_enum_AlarmType(X, Path) ->
    mk_type_error({invalid_enum, 'AlarmType'}, X, Path).

v_enum_AlarmSeverity('Clear', _Path) -> ok;
v_enum_AlarmSeverity('Warning', _Path) -> ok;
v_enum_AlarmSeverity('Minor', _Path) -> ok;
v_enum_AlarmSeverity('Major', _Path) -> ok;
v_enum_AlarmSeverity('Critical', _Path) -> ok;
v_enum_AlarmSeverity(X, Path) ->
    mk_type_error({invalid_enum, 'AlarmSeverity'}, X, Path).

v_enum_ActionType('ColdReset', _Path) -> ok;
v_enum_ActionType('ResetFactory', _Path) -> ok;
v_enum_ActionType('ResetProvisioning', _Path) -> ok;
v_enum_ActionType('ChangeFWPartition', _Path) -> ok;
v_enum_ActionType(X, Path) ->
    mk_type_error({invalid_enum, 'ActionType'}, X, Path).

v_enum_AstronomicalBody('Sun', _Path) -> ok;
v_enum_AstronomicalBody('Moon', _Path) -> ok;
v_enum_AstronomicalBody(X, Path) ->
    mk_type_error({invalid_enum, 'AstronomicalBody'}, X,
		  Path).

v_enum_AstronomicalEventType('Rise', _Path) -> ok;
v_enum_AstronomicalEventType('Set', _Path) -> ok;
v_enum_AstronomicalEventType('Noon', _Path) -> ok;
v_enum_AstronomicalEventType(X, Path) ->
    mk_type_error({invalid_enum, 'AstronomicalEventType'},
		  X, Path).

v_enum_AstronomicalEventZenith('Official', _Path) -> ok;
v_enum_AstronomicalEventZenith('Civil', _Path) -> ok;
v_enum_AstronomicalEventZenith('Nautical', _Path) -> ok;
v_enum_AstronomicalEventZenith('Astronomical', _Path) ->
    ok;
v_enum_AstronomicalEventZenith(X, Path) ->
    mk_type_error({invalid_enum, 'AstronomicalEventZenith'},
		  X, Path).

v_enum_GpsActionType('SendSample', _Path) -> ok;
v_enum_GpsActionType('SetCtlMode', _Path) -> ok;
v_enum_GpsActionType('SetOpSchedule', _Path) -> ok;
v_enum_GpsActionType('GetOpSchedule', _Path) -> ok;
v_enum_GpsActionType(X, Path) ->
    mk_type_error({invalid_enum, 'GpsActionType'}, X, Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

v_type_fixed32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_fixed32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed32, unsigned,
		   32},
		  N, Path);
v_type_fixed32(X, Path) ->
    mk_type_error({bad_integer, fixed32, unsigned, 32}, X,
		  Path).

v_type_fixed64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'LightingCtrlQualifier'},
      [{'MotionSensor', 0}, {'LightSensor', 1},
       {'NoNetwork', 2}, {'RemoteMotion', 3},
       {'RemoteLightSensor', 4}, {'Disqualified', 7}]},
     {{enum, 'LightingForceType'},
      [{'Persistent', 1}, {'Volatile', 2}]},
     {{enum, 'AlarmType'},
      [{'CommFail', 300}, {'SimFail', 301},
       {'NotTested', 302}, {'DownrevSoftware', 303},
       {'BadSensorData', 304}, {'ConfigFail', 305},
       {'DegradedNetwork', 306}, {'SoftwareUpdateFail', 307},
       {'ScheduleFail', 308}, {'PreRuninFail', 309},
       {'PostRuninFail', 310}, {'USPFail', 200},
       {'PMACFail', 201}, {'DriverFail', 202},
       {'FarmUSPFail', 203}, {'SensorFail', 204},
       {'StrangeReboot', 205}, {'Assert', 206},
       {'X509ClientFail', 207}, {'X509ServerFail', 208},
       {'UnderPower', 209}, {'OverPower', 210},
       {'HardFault', 211}, {'HWFail_generic', 220},
       {'HWFail_HIH6131', 221}, {'HWFail_ISL29023', 222},
       {'HWFail_SE95', 223}, {'HWFail_ZMotion', 224},
       {'HWFail_MMA8451', 225}, {'HWFail_TSC3414', 226},
       {'HWFail_UrbanUSP', 227}, {'HWFail_RTC', 229},
       {'HWFail_EEPROM', 230}, {'HWFail_NIGHTHAWK', 231},
       {'SWUpdateFail_SENSORPOD', 232},
       {'HWFail_STUCK_RELAY', 233}, {'HWFail_PCT2075', 223},
       {'HWFAIL_SIHAWK', 234}, {'HWFAIL_GPS', 235},
       {'HWFail_PodBus', 236}, {'Epic_Fail', 31337}]},
     {{enum, 'AlarmSeverity'},
      [{'Clear', 0}, {'Warning', 1}, {'Minor', 2},
       {'Major', 3}, {'Critical', 4}]},
     {{enum, 'ActionType'},
      [{'ColdReset', 0}, {'ResetFactory', 1},
       {'ResetProvisioning', 2}, {'ChangeFWPartition', 3}]},
     {{enum, 'AstronomicalBody'}, [{'Sun', 1}, {'Moon', 2}]},
     {{enum, 'AstronomicalEventType'},
      [{'Rise', 1}, {'Set', 2}, {'Noon', 3}]},
     {{enum, 'AstronomicalEventZenith'},
      [{'Official', 1}, {'Civil', 2}, {'Nautical', 3},
       {'Astronomical', 4}]},
     {{enum, 'WiFiAuthType'},
      [{'Other', 0}, {'Open', 1}, {'WEP', 2}, {'WPA2_PSK', 3},
       {'WPA2_EAP_TLS', 4}]},
     {{enum, 'GpsActionType'},
      [{'SendSample', 0}, {'SetCtlMode', 1},
       {'SetOpSchedule', 2}, {'GetOpSchedule', 3}]},
     {{msg, 'DeviceAlarm'},
      [#field{name = alarmType, fnum = 1, rnum = 2,
	      type = {enum, 'AlarmType'}, occurrence = required,
	      opts = []},
       #field{name = alarmSeverity, fnum = 2, rnum = 3,
	      type = {enum, 'AlarmSeverity'}, occurrence = required,
	      opts = []},
       #field{name = msg, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LightingClearSchedule'}, []},
     {{msg, 'CalendarEvent'},
      [#field{name = sec, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = min, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = hr, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = wday, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = mday, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = mon, fnum = 6, rnum = 7, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = year, fnum = 7, rnum = 8, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'LightingCtrl'},
      [#field{name = pri, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = mask, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 3, rnum = 4, type = bytes,
	      occurrence = required, opts = []},
       #field{name = qualifiers, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'LightingScheduledEvent'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = event, fnum = 2, rnum = 3,
	      type = {msg, 'CalendarEvent'}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 3, rnum = 4,
	      type = {msg, 'LightingCtrl'}, occurrence = required,
	      opts = []}]},
     {{msg, 'DeviceActionReq'},
      [#field{name = actionType, fnum = 1, rnum = 2,
	      type = {enum, 'ActionType'}, occurrence = required,
	      opts = []}]},
     {{msg, 'GpsActionReq'},
      [#field{name = actionType, fnum = 1, rnum = 2,
	      type = {enum, 'GpsActionType'}, occurrence = required,
	      opts = []},
       #field{name = iValue, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = sValue, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LightingSetAuto'}, []},
     {{msg, 'GpsSample'},
      [#field{name = gpsVer, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = epochSecs, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = latAndLon, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = optional, opts = []},
       #field{name = altAndMisc, fnum = 4, rnum = 5,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = snrAndMisc, fnum = 5, rnum = 6,
	      type = fixed64, occurrence = optional, opts = []}]},
     {{msg, 'AstronomicalEvent'},
      [#field{name = body, fnum = 1, rnum = 2,
	      type = {enum, 'AstronomicalBody'},
	      occurrence = required, opts = []},
       #field{name = atype, fnum = 2, rnum = 3,
	      type = {enum, 'AstronomicalEventType'},
	      occurrence = required, opts = []},
       #field{name = zenith, fnum = 3, rnum = 4,
	      type = {enum, 'AstronomicalEventZenith'},
	      occurrence = required, opts = []},
       #field{name = wday, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = mday, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = mon, fnum = 6, rnum = 7, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = year, fnum = 7, rnum = 8, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'LightingForceState'},
      [#field{name = state, fnum = 1, rnum = 2,
	      type = {msg, 'LightingCtrl'}, occurrence = required,
	      opts = []},
       #field{name = ftype, fnum = 2, rnum = 3,
	      type = {enum, 'LightingForceType'},
	      occurrence = optional, opts = []}]},
     {{msg, 'SensorSample'},
      [#field{name = sensor, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = uint64,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = uint64,
	      occurrence = required, opts = []},
       #field{name = units, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LightingAstronomicalEvent'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = event, fnum = 2, rnum = 3,
	      type = {msg, 'AstronomicalEvent'},
	      occurrence = required, opts = []},
       #field{name = state, fnum = 3, rnum = 4,
	      type = {msg, 'LightingCtrl'}, occurrence = required,
	      opts = []}]},
     {{msg, 'SensorSampleReq'},
      [#field{name = sensor, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'GpsActionRsp'},
      [#field{name = actionType, fnum = 1, rnum = 2,
	      type = {enum, 'GpsActionType'}, occurrence = required,
	      opts = []},
       #field{name = iValue, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = sValue, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['DeviceAlarm', 'LightingClearSchedule',
     'CalendarEvent', 'LightingCtrl',
     'LightingScheduledEvent', 'DeviceActionReq',
     'GpsActionReq', 'LightingSetAuto', 'GpsSample',
     'AstronomicalEvent', 'LightingForceState',
     'SensorSample', 'LightingAstronomicalEvent',
     'SensorSampleReq', 'GpsActionRsp'].


get_enum_names() ->
    ['LightingCtrlQualifier', 'LightingForceType',
     'AlarmType', 'AlarmSeverity', 'ActionType',
     'AstronomicalBody', 'AstronomicalEventType',
     'AstronomicalEventZenith', 'WiFiAuthType',
     'GpsActionType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('DeviceAlarm') ->
    [#field{name = alarmType, fnum = 1, rnum = 2,
	    type = {enum, 'AlarmType'}, occurrence = required,
	    opts = []},
     #field{name = alarmSeverity, fnum = 2, rnum = 3,
	    type = {enum, 'AlarmSeverity'}, occurrence = required,
	    opts = []},
     #field{name = msg, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LightingClearSchedule') -> [];
find_msg_def('CalendarEvent') ->
    [#field{name = sec, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = min, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = hr, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = wday, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = mday, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = mon, fnum = 6, rnum = 7, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = year, fnum = 7, rnum = 8, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('LightingCtrl') ->
    [#field{name = pri, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = mask, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 3, rnum = 4, type = bytes,
	    occurrence = required, opts = []},
     #field{name = qualifiers, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('LightingScheduledEvent') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = event, fnum = 2, rnum = 3,
	    type = {msg, 'CalendarEvent'}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 3, rnum = 4,
	    type = {msg, 'LightingCtrl'}, occurrence = required,
	    opts = []}];
find_msg_def('DeviceActionReq') ->
    [#field{name = actionType, fnum = 1, rnum = 2,
	    type = {enum, 'ActionType'}, occurrence = required,
	    opts = []}];
find_msg_def('GpsActionReq') ->
    [#field{name = actionType, fnum = 1, rnum = 2,
	    type = {enum, 'GpsActionType'}, occurrence = required,
	    opts = []},
     #field{name = iValue, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = sValue, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LightingSetAuto') -> [];
find_msg_def('GpsSample') ->
    [#field{name = gpsVer, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = epochSecs, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = latAndLon, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = optional, opts = []},
     #field{name = altAndMisc, fnum = 4, rnum = 5,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = snrAndMisc, fnum = 5, rnum = 6,
	    type = fixed64, occurrence = optional, opts = []}];
find_msg_def('AstronomicalEvent') ->
    [#field{name = body, fnum = 1, rnum = 2,
	    type = {enum, 'AstronomicalBody'},
	    occurrence = required, opts = []},
     #field{name = atype, fnum = 2, rnum = 3,
	    type = {enum, 'AstronomicalEventType'},
	    occurrence = required, opts = []},
     #field{name = zenith, fnum = 3, rnum = 4,
	    type = {enum, 'AstronomicalEventZenith'},
	    occurrence = required, opts = []},
     #field{name = wday, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = mday, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = mon, fnum = 6, rnum = 7, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = year, fnum = 7, rnum = 8, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('LightingForceState') ->
    [#field{name = state, fnum = 1, rnum = 2,
	    type = {msg, 'LightingCtrl'}, occurrence = required,
	    opts = []},
     #field{name = ftype, fnum = 2, rnum = 3,
	    type = {enum, 'LightingForceType'},
	    occurrence = optional, opts = []}];
find_msg_def('SensorSample') ->
    [#field{name = sensor, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = uint64,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = uint64,
	    occurrence = required, opts = []},
     #field{name = units, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LightingAstronomicalEvent') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = event, fnum = 2, rnum = 3,
	    type = {msg, 'AstronomicalEvent'},
	    occurrence = required, opts = []},
     #field{name = state, fnum = 3, rnum = 4,
	    type = {msg, 'LightingCtrl'}, occurrence = required,
	    opts = []}];
find_msg_def('SensorSampleReq') ->
    [#field{name = sensor, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('GpsActionRsp') ->
    [#field{name = actionType, fnum = 1, rnum = 2,
	    type = {enum, 'GpsActionType'}, occurrence = required,
	    opts = []},
     #field{name = iValue, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = sValue, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('LightingCtrlQualifier') ->
    [{'MotionSensor', 0}, {'LightSensor', 1},
     {'NoNetwork', 2}, {'RemoteMotion', 3},
     {'RemoteLightSensor', 4}, {'Disqualified', 7}];
find_enum_def('LightingForceType') ->
    [{'Persistent', 1}, {'Volatile', 2}];
find_enum_def('AlarmType') ->
    [{'CommFail', 300}, {'SimFail', 301},
     {'NotTested', 302}, {'DownrevSoftware', 303},
     {'BadSensorData', 304}, {'ConfigFail', 305},
     {'DegradedNetwork', 306}, {'SoftwareUpdateFail', 307},
     {'ScheduleFail', 308}, {'PreRuninFail', 309},
     {'PostRuninFail', 310}, {'USPFail', 200},
     {'PMACFail', 201}, {'DriverFail', 202},
     {'FarmUSPFail', 203}, {'SensorFail', 204},
     {'StrangeReboot', 205}, {'Assert', 206},
     {'X509ClientFail', 207}, {'X509ServerFail', 208},
     {'UnderPower', 209}, {'OverPower', 210},
     {'HardFault', 211}, {'HWFail_generic', 220},
     {'HWFail_HIH6131', 221}, {'HWFail_ISL29023', 222},
     {'HWFail_SE95', 223}, {'HWFail_ZMotion', 224},
     {'HWFail_MMA8451', 225}, {'HWFail_TSC3414', 226},
     {'HWFail_UrbanUSP', 227}, {'HWFail_RTC', 229},
     {'HWFail_EEPROM', 230}, {'HWFail_NIGHTHAWK', 231},
     {'SWUpdateFail_SENSORPOD', 232},
     {'HWFail_STUCK_RELAY', 233}, {'HWFail_PCT2075', 223},
     {'HWFAIL_SIHAWK', 234}, {'HWFAIL_GPS', 235},
     {'HWFail_PodBus', 236}, {'Epic_Fail', 31337}];
find_enum_def('AlarmSeverity') ->
    [{'Clear', 0}, {'Warning', 1}, {'Minor', 2},
     {'Major', 3}, {'Critical', 4}];
find_enum_def('ActionType') ->
    [{'ColdReset', 0}, {'ResetFactory', 1},
     {'ResetProvisioning', 2}, {'ChangeFWPartition', 3}];
find_enum_def('AstronomicalBody') ->
    [{'Sun', 1}, {'Moon', 2}];
find_enum_def('AstronomicalEventType') ->
    [{'Rise', 1}, {'Set', 2}, {'Noon', 3}];
find_enum_def('AstronomicalEventZenith') ->
    [{'Official', 1}, {'Civil', 2}, {'Nautical', 3},
     {'Astronomical', 4}];
find_enum_def('WiFiAuthType') ->
    [{'Other', 0}, {'Open', 1}, {'WEP', 2}, {'WPA2_PSK', 3},
     {'WPA2_EAP_TLS', 4}];
find_enum_def('GpsActionType') ->
    [{'SendSample', 0}, {'SetCtlMode', 1},
     {'SetOpSchedule', 2}, {'GetOpSchedule', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('LightingCtrlQualifier', Value) ->
    enum_symbol_by_value_LightingCtrlQualifier(Value);
enum_symbol_by_value('LightingForceType', Value) ->
    enum_symbol_by_value_LightingForceType(Value);
enum_symbol_by_value('AlarmType', Value) ->
    enum_symbol_by_value_AlarmType(Value);
enum_symbol_by_value('AlarmSeverity', Value) ->
    enum_symbol_by_value_AlarmSeverity(Value);
enum_symbol_by_value('ActionType', Value) ->
    enum_symbol_by_value_ActionType(Value);
enum_symbol_by_value('AstronomicalBody', Value) ->
    enum_symbol_by_value_AstronomicalBody(Value);
enum_symbol_by_value('AstronomicalEventType', Value) ->
    enum_symbol_by_value_AstronomicalEventType(Value);
enum_symbol_by_value('AstronomicalEventZenith',
		     Value) ->
    enum_symbol_by_value_AstronomicalEventZenith(Value);
enum_symbol_by_value('WiFiAuthType', Value) ->
    enum_symbol_by_value_WiFiAuthType(Value);
enum_symbol_by_value('GpsActionType', Value) ->
    enum_symbol_by_value_GpsActionType(Value).


enum_value_by_symbol('LightingCtrlQualifier', Sym) ->
    enum_value_by_symbol_LightingCtrlQualifier(Sym);
enum_value_by_symbol('LightingForceType', Sym) ->
    enum_value_by_symbol_LightingForceType(Sym);
enum_value_by_symbol('AlarmType', Sym) ->
    enum_value_by_symbol_AlarmType(Sym);
enum_value_by_symbol('AlarmSeverity', Sym) ->
    enum_value_by_symbol_AlarmSeverity(Sym);
enum_value_by_symbol('ActionType', Sym) ->
    enum_value_by_symbol_ActionType(Sym);
enum_value_by_symbol('AstronomicalBody', Sym) ->
    enum_value_by_symbol_AstronomicalBody(Sym);
enum_value_by_symbol('AstronomicalEventType', Sym) ->
    enum_value_by_symbol_AstronomicalEventType(Sym);
enum_value_by_symbol('AstronomicalEventZenith', Sym) ->
    enum_value_by_symbol_AstronomicalEventZenith(Sym);
enum_value_by_symbol('WiFiAuthType', Sym) ->
    enum_value_by_symbol_WiFiAuthType(Sym);
enum_value_by_symbol('GpsActionType', Sym) ->
    enum_value_by_symbol_GpsActionType(Sym).


enum_symbol_by_value_LightingCtrlQualifier(0) ->
    'MotionSensor';
enum_symbol_by_value_LightingCtrlQualifier(1) ->
    'LightSensor';
enum_symbol_by_value_LightingCtrlQualifier(2) ->
    'NoNetwork';
enum_symbol_by_value_LightingCtrlQualifier(3) ->
    'RemoteMotion';
enum_symbol_by_value_LightingCtrlQualifier(4) ->
    'RemoteLightSensor';
enum_symbol_by_value_LightingCtrlQualifier(7) ->
    'Disqualified'.


enum_value_by_symbol_LightingCtrlQualifier('MotionSensor') ->
    0;
enum_value_by_symbol_LightingCtrlQualifier('LightSensor') ->
    1;
enum_value_by_symbol_LightingCtrlQualifier('NoNetwork') ->
    2;
enum_value_by_symbol_LightingCtrlQualifier('RemoteMotion') ->
    3;
enum_value_by_symbol_LightingCtrlQualifier('RemoteLightSensor') ->
    4;
enum_value_by_symbol_LightingCtrlQualifier('Disqualified') ->
    7.

enum_symbol_by_value_LightingForceType(1) ->
    'Persistent';
enum_symbol_by_value_LightingForceType(2) -> 'Volatile'.


enum_value_by_symbol_LightingForceType('Persistent') ->
    1;
enum_value_by_symbol_LightingForceType('Volatile') -> 2.

enum_symbol_by_value_AlarmType(300) -> 'CommFail';
enum_symbol_by_value_AlarmType(301) -> 'SimFail';
enum_symbol_by_value_AlarmType(302) -> 'NotTested';
enum_symbol_by_value_AlarmType(303) ->
    'DownrevSoftware';
enum_symbol_by_value_AlarmType(304) -> 'BadSensorData';
enum_symbol_by_value_AlarmType(305) -> 'ConfigFail';
enum_symbol_by_value_AlarmType(306) ->
    'DegradedNetwork';
enum_symbol_by_value_AlarmType(307) ->
    'SoftwareUpdateFail';
enum_symbol_by_value_AlarmType(308) -> 'ScheduleFail';
enum_symbol_by_value_AlarmType(309) -> 'PreRuninFail';
enum_symbol_by_value_AlarmType(310) -> 'PostRuninFail';
enum_symbol_by_value_AlarmType(200) -> 'USPFail';
enum_symbol_by_value_AlarmType(201) -> 'PMACFail';
enum_symbol_by_value_AlarmType(202) -> 'DriverFail';
enum_symbol_by_value_AlarmType(203) -> 'FarmUSPFail';
enum_symbol_by_value_AlarmType(204) -> 'SensorFail';
enum_symbol_by_value_AlarmType(205) -> 'StrangeReboot';
enum_symbol_by_value_AlarmType(206) -> 'Assert';
enum_symbol_by_value_AlarmType(207) -> 'X509ClientFail';
enum_symbol_by_value_AlarmType(208) -> 'X509ServerFail';
enum_symbol_by_value_AlarmType(209) -> 'UnderPower';
enum_symbol_by_value_AlarmType(210) -> 'OverPower';
enum_symbol_by_value_AlarmType(211) -> 'HardFault';
enum_symbol_by_value_AlarmType(220) -> 'HWFail_generic';
enum_symbol_by_value_AlarmType(221) -> 'HWFail_HIH6131';
enum_symbol_by_value_AlarmType(222) ->
    'HWFail_ISL29023';
enum_symbol_by_value_AlarmType(223) -> 'HWFail_SE95';
enum_symbol_by_value_AlarmType(224) -> 'HWFail_ZMotion';
enum_symbol_by_value_AlarmType(225) -> 'HWFail_MMA8451';
enum_symbol_by_value_AlarmType(226) -> 'HWFail_TSC3414';
enum_symbol_by_value_AlarmType(227) ->
    'HWFail_UrbanUSP';
enum_symbol_by_value_AlarmType(229) -> 'HWFail_RTC';
enum_symbol_by_value_AlarmType(230) -> 'HWFail_EEPROM';
enum_symbol_by_value_AlarmType(231) ->
    'HWFail_NIGHTHAWK';
enum_symbol_by_value_AlarmType(232) ->
    'SWUpdateFail_SENSORPOD';
enum_symbol_by_value_AlarmType(233) ->
    'HWFail_STUCK_RELAY';
enum_symbol_by_value_AlarmType(234) -> 'HWFAIL_SIHAWK';
enum_symbol_by_value_AlarmType(235) -> 'HWFAIL_GPS';
enum_symbol_by_value_AlarmType(236) -> 'HWFail_PodBus';
enum_symbol_by_value_AlarmType(31337) -> 'Epic_Fail'.


enum_value_by_symbol_AlarmType('CommFail') -> 300;
enum_value_by_symbol_AlarmType('SimFail') -> 301;
enum_value_by_symbol_AlarmType('NotTested') -> 302;
enum_value_by_symbol_AlarmType('DownrevSoftware') ->
    303;
enum_value_by_symbol_AlarmType('BadSensorData') -> 304;
enum_value_by_symbol_AlarmType('ConfigFail') -> 305;
enum_value_by_symbol_AlarmType('DegradedNetwork') ->
    306;
enum_value_by_symbol_AlarmType('SoftwareUpdateFail') ->
    307;
enum_value_by_symbol_AlarmType('ScheduleFail') -> 308;
enum_value_by_symbol_AlarmType('PreRuninFail') -> 309;
enum_value_by_symbol_AlarmType('PostRuninFail') -> 310;
enum_value_by_symbol_AlarmType('USPFail') -> 200;
enum_value_by_symbol_AlarmType('PMACFail') -> 201;
enum_value_by_symbol_AlarmType('DriverFail') -> 202;
enum_value_by_symbol_AlarmType('FarmUSPFail') -> 203;
enum_value_by_symbol_AlarmType('SensorFail') -> 204;
enum_value_by_symbol_AlarmType('StrangeReboot') -> 205;
enum_value_by_symbol_AlarmType('Assert') -> 206;
enum_value_by_symbol_AlarmType('X509ClientFail') -> 207;
enum_value_by_symbol_AlarmType('X509ServerFail') -> 208;
enum_value_by_symbol_AlarmType('UnderPower') -> 209;
enum_value_by_symbol_AlarmType('OverPower') -> 210;
enum_value_by_symbol_AlarmType('HardFault') -> 211;
enum_value_by_symbol_AlarmType('HWFail_generic') -> 220;
enum_value_by_symbol_AlarmType('HWFail_HIH6131') -> 221;
enum_value_by_symbol_AlarmType('HWFail_ISL29023') ->
    222;
enum_value_by_symbol_AlarmType('HWFail_SE95') -> 223;
enum_value_by_symbol_AlarmType('HWFail_ZMotion') -> 224;
enum_value_by_symbol_AlarmType('HWFail_MMA8451') -> 225;
enum_value_by_symbol_AlarmType('HWFail_TSC3414') -> 226;
enum_value_by_symbol_AlarmType('HWFail_UrbanUSP') ->
    227;
enum_value_by_symbol_AlarmType('HWFail_RTC') -> 229;
enum_value_by_symbol_AlarmType('HWFail_EEPROM') -> 230;
enum_value_by_symbol_AlarmType('HWFail_NIGHTHAWK') ->
    231;
enum_value_by_symbol_AlarmType('SWUpdateFail_SENSORPOD') ->
    232;
enum_value_by_symbol_AlarmType('HWFail_STUCK_RELAY') ->
    233;
enum_value_by_symbol_AlarmType('HWFail_PCT2075') -> 223;
enum_value_by_symbol_AlarmType('HWFAIL_SIHAWK') -> 234;
enum_value_by_symbol_AlarmType('HWFAIL_GPS') -> 235;
enum_value_by_symbol_AlarmType('HWFail_PodBus') -> 236;
enum_value_by_symbol_AlarmType('Epic_Fail') -> 31337.

enum_symbol_by_value_AlarmSeverity(0) -> 'Clear';
enum_symbol_by_value_AlarmSeverity(1) -> 'Warning';
enum_symbol_by_value_AlarmSeverity(2) -> 'Minor';
enum_symbol_by_value_AlarmSeverity(3) -> 'Major';
enum_symbol_by_value_AlarmSeverity(4) -> 'Critical'.


enum_value_by_symbol_AlarmSeverity('Clear') -> 0;
enum_value_by_symbol_AlarmSeverity('Warning') -> 1;
enum_value_by_symbol_AlarmSeverity('Minor') -> 2;
enum_value_by_symbol_AlarmSeverity('Major') -> 3;
enum_value_by_symbol_AlarmSeverity('Critical') -> 4.

enum_symbol_by_value_ActionType(0) -> 'ColdReset';
enum_symbol_by_value_ActionType(1) -> 'ResetFactory';
enum_symbol_by_value_ActionType(2) ->
    'ResetProvisioning';
enum_symbol_by_value_ActionType(3) ->
    'ChangeFWPartition'.


enum_value_by_symbol_ActionType('ColdReset') -> 0;
enum_value_by_symbol_ActionType('ResetFactory') -> 1;
enum_value_by_symbol_ActionType('ResetProvisioning') ->
    2;
enum_value_by_symbol_ActionType('ChangeFWPartition') ->
    3.

enum_symbol_by_value_AstronomicalBody(1) -> 'Sun';
enum_symbol_by_value_AstronomicalBody(2) -> 'Moon'.


enum_value_by_symbol_AstronomicalBody('Sun') -> 1;
enum_value_by_symbol_AstronomicalBody('Moon') -> 2.

enum_symbol_by_value_AstronomicalEventType(1) -> 'Rise';
enum_symbol_by_value_AstronomicalEventType(2) -> 'Set';
enum_symbol_by_value_AstronomicalEventType(3) -> 'Noon'.


enum_value_by_symbol_AstronomicalEventType('Rise') -> 1;
enum_value_by_symbol_AstronomicalEventType('Set') -> 2;
enum_value_by_symbol_AstronomicalEventType('Noon') -> 3.

enum_symbol_by_value_AstronomicalEventZenith(1) ->
    'Official';
enum_symbol_by_value_AstronomicalEventZenith(2) ->
    'Civil';
enum_symbol_by_value_AstronomicalEventZenith(3) ->
    'Nautical';
enum_symbol_by_value_AstronomicalEventZenith(4) ->
    'Astronomical'.


enum_value_by_symbol_AstronomicalEventZenith('Official') ->
    1;
enum_value_by_symbol_AstronomicalEventZenith('Civil') ->
    2;
enum_value_by_symbol_AstronomicalEventZenith('Nautical') ->
    3;
enum_value_by_symbol_AstronomicalEventZenith('Astronomical') ->
    4.

enum_symbol_by_value_WiFiAuthType(0) -> 'Other';
enum_symbol_by_value_WiFiAuthType(1) -> 'Open';
enum_symbol_by_value_WiFiAuthType(2) -> 'WEP';
enum_symbol_by_value_WiFiAuthType(3) -> 'WPA2_PSK';
enum_symbol_by_value_WiFiAuthType(4) -> 'WPA2_EAP_TLS'.


enum_value_by_symbol_WiFiAuthType('Other') -> 0;
enum_value_by_symbol_WiFiAuthType('Open') -> 1;
enum_value_by_symbol_WiFiAuthType('WEP') -> 2;
enum_value_by_symbol_WiFiAuthType('WPA2_PSK') -> 3;
enum_value_by_symbol_WiFiAuthType('WPA2_EAP_TLS') -> 4.

enum_symbol_by_value_GpsActionType(0) -> 'SendSample';
enum_symbol_by_value_GpsActionType(1) -> 'SetCtlMode';
enum_symbol_by_value_GpsActionType(2) ->
    'SetOpSchedule';
enum_symbol_by_value_GpsActionType(3) ->
    'GetOpSchedule'.


enum_value_by_symbol_GpsActionType('SendSample') -> 0;
enum_value_by_symbol_GpsActionType('SetCtlMode') -> 1;
enum_value_by_symbol_GpsActionType('SetOpSchedule') ->
    2;
enum_value_by_symbol_GpsActionType('GetOpSchedule') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.xeralux.device'.



gpb_version_as_string() ->
    "3.20.1".

gpb_version_as_list() ->
    [3,20,1].
