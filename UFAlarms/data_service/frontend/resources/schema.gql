
type Address {
  id: ID!
  street: String
  streetTwo: String
  city: String
  state: String
  country: String
  postalCode: String
}

type Organization {
  id: ID!
  name: String!
  contact: String
  parent: Customer!
  users: [User]
}

type Principal {
  id: ID!
  name: String!
  partners: [Partner]
}

type Partner {
  id: ID!
  name: String!
  address: Address
  principal: Principal
}

union Provider = Partner | Principal

type Customer {
  id: ID!
  name: String
  address: Address
  sites: [Site]
  organizations: [Organization]
  provider: Provider
}

union Employer = Customer | Principal

type User {
  id: ID!
  username: String
  displayName: String
  employer: Employer!
  passwordHash: String
}

union SiteOwner = Customer | Organization

type OperationalTimePeriod {
  id: ID!
  open: AbsoluteTime!
  close: AbsoluteTime!
  begin: Date!
  end: Date!
}

type Site {
  id: ID!
  name: String
  address: Address
  owner: SiteOwner
  nodeGroups: [NodeGroup]
  operationalTimePeriods: [OperationalTimePeriod]
}

enum NodeType { Core_v1, Core_v2, Media_v1 }

enum LicenseType { Lighting, Parking, Traffic, Surveillance }

type License {
  id: ID!
  customer: Customer
  start: Int
  termLength: Int
  type: LicenseType
}

type NodeGroup {
  id: ID!
  nodes: [Node]
  type: NodeType
  licenses: [License]
  schedules: [Schedule]
}

type Node {
  id: ID!
  latitude: Float
  longitude: Float
  hardwareID: String
  hardwareModel: String
  localIP: String
  fixtures: [Fixture]
}

type Fixture {
  id: ID!
  parent: Node!
  power: Int!
}

type AbsoluteTime {
  id: ID!
  hour: Int!
  minute: Int!
  second: Int!
}

enum RelativeTimeBasis { Sunrise, Sunset, OperationalHoursOpen, OperationalHoursClose }
type RelativeTime {
  id: ID!
  time: AbsoluteTime!
  basis: RelativeTimeBasis!
}

union ScheduleTime = AbsoluteTime | RelativeTime

enum DayOfWeek { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }

enum ScheduleEventType { LightAdjust, LightGradualAdjust }

enum Month { January, February, March, April, May, June, July, August, September, October, November, December }

type Date {
  id: ID!
  month: Month!
  day: Int!
}

enum LightIntensityUnit { Lumens, PercentDrive }

type LightIntensity {
  id: ID!
  amount: Int!
  units: LightIntensityUnit!
}

type ScheduleLightAmountEvent {
  id: ID!
  type: ScheduleEventType!
  intensity: LightIntensity!
  time: ScheduleTime!
  day: DayOfWeek
  date: Date
  year: Int
}

type TimeSpan {
  id: ID!
  seconds: Int!
  minutes: Int!
  hours: Int!
  days: Int!
}

type ScheduleLightMotionEvent {
  id: ID!
  haloOnly: Boolean!
  baselineIntensity: LightIntensity!
  activatedIntensity: LightIntensity!
  delay: TimeSpan!
  time: ScheduleTime!
  date: Date
  year: Int
}

type ScheduleLightBinaryEvent {
  id: ID!
  illumined: Boolean!
  time: ScheduleTime!
  day: DayOfWeek
  date: Date
  year: Int
}

union ScheduleEvent = ScheduleLightAmountEvent | ScheduleLightBinaryEvent | ScheduleLightMotionEvent

enum RepeatBasis { Daily, Weekly }

type Schedule {
  id: ID!
  events: [ScheduleEvent]
  repeatBasis: RepeatBasis
}
