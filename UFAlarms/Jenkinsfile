#!/usr/bin/env groovy
node('cicd_pipeline_runner') {
    def commit_id = checkout(scm).GIT_COMMIT
    def branch = checkout(scm).GIT_BRANCH
    def desc = "${branch}#${commit_id}"
    def orchestration_branch="develop"
    def buildtype="POST_COMMIT"
    def nsn_environment="cicd"
    def pod="netsense-${nsn_environment}"
    ArrayList<String> comps = new ArrayList<String>();
    ArrayList<String> do_not_build=new ArrayList<String>();
    do_not_build.add("neo4j");do_not_build.add("parking-optimization-app");
    do_not_build.add("vn-simulator");do_not_build.add("ditto");
    println "commit_id = ${commit_id},branch = ${branch},buildtype = ${buildtype}"
    bd = "${commit_id}".toString().substring(0,7)
    currentBuild.description = "<a href=https://github.com/Xeralux/Farallones/commit/${commit_id}>commit#"+bd+"</a><br>${branch}"
    stage ('CodeCheckout') {
        println "Building farallones - ${desc}"
        sh "rm -rf Farallones-Docker-Orchestration; git clone -b ${orchestration_branch} git@github.com:Xeralux/Farallones-Docker-Orchestration.git"
        def lines = readFile("Farallones-Docker-Orchestration/config/image-version.conf").split("\n")
        ArrayList<String> h = new ArrayList<String>();
        for (int i=0; i < lines.size(); i++) {
            if(lines[i].length() > 0 && lines[i].contains("sensitydockerrepo/")){
                if(!lines[i].substring(0,1).equals("#") && lines[i].contains("latest")) {
                    def arr1=lines[i].tokenize(" ")
                    if(!h.contains(arr1[1])){
                        h.add(arr1[1])
                        comps.add(arr1[0])
                    }
                }
            }
        }
    }
    println comps
    stage ('Build') {
        def branches = [:]
        for (int i=0; i < comps.size(); i++) {
            def comp="${comps[i]}"
            if(do_not_build.contains(comp.toString())){continue;}
            branches["${comps[i]}"] = {
                build job: 'buildNetsense',id: "${comps[i]}", parameters: [
                        string(name: 'commit_id', value: "${commit_id}"),
                        string(name: 'orchestration_branch', value: "${orchestration_branch}"),
                        string(name: 'component', value: "${comp}")]
            }
        }
        parallel branches
    }
    stage ('Dev_Integration_Test') {
        build job: 'runMochaTest', parameters: [string(name: 'commit_id', value: "${commit_id}"),
                                                string(name: 'orchestration_branch', value: "${orchestration_branch}")]
    }
    stage ('Push_to_Docker') {
        def branches1 = [:]
        for (int i=0; i < comps.size(); i++) {
            def comp="${comps[i]}"
            branches1["${comps[i]}"] = {
                build job: 'pushImages',id: "${comps[i]}", parameters: [
                        string(name: 'commit_id', value: "${commit_id}"),
                        string(name: 'farallones_branch', value: "${branch}"),
                        string(name: 'orchestration_branch', value: "${orchestration_branch}"),
                        string(name: 'component', value: "${comp}")]
            }
        }
        parallel branches1
    }
    stage ('Deploy_to_Dcos') {
        build job: 'deployToDcos', parameters: [
        string(name: 'commit_id', value: "${commit_id}"),
        string(name: 'nsn_environment', value: "${nsn_environment}"),
        string(name: 'shared_services', value: ""),
        string(name: 'orchestration_branch', value: "${orchestration_branch}"),
        string(name: 'DO_NOT_UPDATE', value: ""),
        string(name: 'operation', value: "create"),
        string(name: 'dcoscluster', value: "dcoscicd")]
    }
    stage ('Run_Tests') {
        def branches = [:]
        branches["NetsenseAPITests"] = {
            build job: 'NetsenseAPITests', parameters: [
                string(name: 'SourceBuildNumber', value: "${BUILD_NUMBER}"),
                string(name: 'BranchName', value: "${branch}"),
                string(name: 'server', value: "${pod}"),
                string(name: 'JobName', value: "${JOB_NAME}"),
                string(name: 'GitCommitId', value: "${commit_id}"),
                string(name: 'PR', value: 'CI')
            ]
        }
        branches["nsnui_test"] = {
            build job: 'nsnui_test', parameters: [
                string(name: 'SourceBuildNumber', value: "${BUILD_NUMBER}"),
                string(name: 'BranchName', value: "${branch}"),
                string(name: 'server', value: "${pod}"),
                string(name: 'JobName', value: "${JOB_NAME}"),
                string(name: 'GitCommitId', value: "${commit_id}"),
                string(name: 'PR', value: 'CI')
            ]
        }
        branches["nsn_e2e_tests_core_node"] = {
            build job: 'nsn_e2e_tests_core_node', parameters: [
                string(name: 'SourceBuildNumber', value: "${BUILD_NUMBER}"),
                string(name: 'BranchName', value: "${branch}"),
                string(name: 'server', value: "${pod}"),
                string(name: 'JobName', value: "${JOB_NAME}"),
                string(name: 'GitCommitId', value: "${commit_id}"),
                string(name: 'PR', value: 'CI')
            ]
        }
        branches["nsn_e2e_tests_video_node"] = {
            build job: 'nsn_e2e_tests_video_node', parameters: [
                string(name: 'SourceBuildNumber', value: "${BUILD_NUMBER}"),
                string(name: 'BranchName', value: "${branch}"),
                string(name: 'server',value: "${pod}"),
                string(name: 'JobName', value: "${JOB_NAME}"),
                string(name: 'GitCommitId', value: "${commit_id}"),
                string(name: 'PR', value: 'CI')
            ]
        }
        parallel branches
    }
}
