%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8

-ifndef(deviceMessages_pb).
-define(deviceMessages_pb, true).

-define(deviceMessages_pb_gpb_version, "3.26.8").

-ifndef('DEVICEALARM_PB_H').
-define('DEVICEALARM_PB_H', true).
-record('DeviceAlarm',
        {alarmType              :: 'CommFail' | 'SimFail' | 'NotTested' | 'DownrevSoftware' | 'BadSensorData' | 'ConfigFail' | 'DegradedNetwork' | 'SoftwareUpdateFail' | 'ScheduleFail' | 'PreRuninFail' | 'PostRuninFail' | 'USPFail' | 'PMACFail' | 'DriverFail' | 'FarmUSPFail' | 'SensorFail' | 'StrangeReboot' | 'Assert' | 'X509ClientFail' | 'X509ServerFail' | 'UnderPower' | 'OverPower' | 'HardFault' | 'HWFail_generic' | 'HWFail_HIH6131' | 'HWFail_ISL29023' | 'HWFail_SE95' | 'HWFail_ZMotion' | 'HWFail_MMA8451' | 'HWFail_TSC3414' | 'HWFail_UrbanUSP' | 'HWFail_RTC' | 'HWFail_EEPROM' | 'HWFail_NIGHTHAWK' | 'SWUpdateFail_SENSORPOD' | 'HWFail_STUCK_RELAY' | 'HWFail_PCT2075' | 'HWFAIL_SIHAWK' | 'HWFAIL_GPS' | 'HWFail_PodBus' | 'Epic_Fail' | integer(), % = 1, enum AlarmType
         alarmSeverity          :: 'Clear' | 'Warning' | 'Minor' | 'Major' | 'Critical' | integer(), % = 2, enum AlarmSeverity
         msg                    :: binary() | iolist() | undefined % = 3
        }).
-endif.

-ifndef('LIGHTINGCLEARSCHEDULE_PB_H').
-define('LIGHTINGCLEARSCHEDULE_PB_H', true).
-record('LightingClearSchedule',
        {
        }).
-endif.

-ifndef('CALENDAREVENT_PB_H').
-define('CALENDAREVENT_PB_H', true).
-record('CalendarEvent',
        {sec                    :: non_neg_integer(), % = 1, 32 bits
         min                    :: non_neg_integer(), % = 2, 32 bits
         hr                     :: non_neg_integer(), % = 3, 32 bits
         wday                   :: non_neg_integer() | undefined, % = 4, 32 bits
         mday                   :: non_neg_integer() | undefined, % = 5, 32 bits
         mon                    :: non_neg_integer() | undefined, % = 6, 32 bits
         year                   :: non_neg_integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('LIGHTINGCTRL_PB_H').
-define('LIGHTINGCTRL_PB_H', true).
-record('LightingCtrl',
        {pri                    :: non_neg_integer(), % = 1, 32 bits
         mask                   :: non_neg_integer(), % = 2, 32 bits
         level                  :: binary(),        % = 3
         qualifiers             :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('LIGHTINGSCHEDULEDEVENT_PB_H').
-define('LIGHTINGSCHEDULEDEVENT_PB_H', true).
-record('LightingScheduledEvent',
        {id                     :: non_neg_integer(), % = 1, 32 bits
         event                  :: #'CalendarEvent'{}, % = 2
         state                  :: #'LightingCtrl'{} % = 3
        }).
-endif.

-ifndef('DEVICEACTIONREQ_PB_H').
-define('DEVICEACTIONREQ_PB_H', true).
-record('DeviceActionReq',
        {actionType             :: 'ColdReset' | 'ResetFactory' | 'ResetProvisioning' | 'ChangeFWPartition' | integer() % = 1, enum ActionType
        }).
-endif.

-ifndef('GPSACTIONREQ_PB_H').
-define('GPSACTIONREQ_PB_H', true).
-record('GpsActionReq',
        {actionType             :: 'SendSample' | 'SetCtlMode' | 'SetOpSchedule' | 'GetOpSchedule' | integer(), % = 1, enum GpsActionType
         iValue                 :: integer() | undefined, % = 2, 32 bits
         sValue                 :: binary() | iolist() | undefined % = 3
        }).
-endif.

-ifndef('LIGHTINGSETAUTO_PB_H').
-define('LIGHTINGSETAUTO_PB_H', true).
-record('LightingSetAuto',
        {
        }).
-endif.

-ifndef('GPSSAMPLE_PB_H').
-define('GPSSAMPLE_PB_H', true).
-record('GpsSample',
        {gpsVer                 :: non_neg_integer() | undefined, % = 1, 32 bits
         epochSecs              :: non_neg_integer() | undefined, % = 2, 32 bits
         latAndLon              :: non_neg_integer() | undefined, % = 3, 32 bits
         altAndMisc             :: non_neg_integer() | undefined, % = 4, 32 bits
         snrAndMisc             :: non_neg_integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('ASTRONOMICALEVENT_PB_H').
-define('ASTRONOMICALEVENT_PB_H', true).
-record('AstronomicalEvent',
        {body                   :: 'Sun' | 'Moon' | integer(), % = 1, enum AstronomicalBody
         atype                  :: 'Rise' | 'Set' | 'Noon' | integer(), % = 2, enum AstronomicalEventType
         zenith                 :: 'Official' | 'Civil' | 'Nautical' | 'Astronomical' | integer(), % = 3, enum AstronomicalEventZenith
         wday                   :: non_neg_integer() | undefined, % = 4, 32 bits
         mday                   :: non_neg_integer() | undefined, % = 5, 32 bits
         mon                    :: non_neg_integer() | undefined, % = 6, 32 bits
         year                   :: non_neg_integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('LIGHTINGFORCESTATE_PB_H').
-define('LIGHTINGFORCESTATE_PB_H', true).
-record('LightingForceState',
        {state                  :: #'LightingCtrl'{}, % = 1
         ftype                  :: 'Persistent' | 'Volatile' | integer() | undefined % = 2, enum LightingForceType
        }).
-endif.

-ifndef('SENSORSAMPLE_PB_H').
-define('SENSORSAMPLE_PB_H', true).
-record('SensorSample',
        {sensor                 :: binary() | iolist(), % = 1
         time                   :: non_neg_integer(), % = 2, 32 bits
         value                  :: non_neg_integer(), % = 3, 32 bits
         units                  :: binary() | iolist() | undefined % = 4
        }).
-endif.

-ifndef('LIGHTINGASTRONOMICALEVENT_PB_H').
-define('LIGHTINGASTRONOMICALEVENT_PB_H', true).
-record('LightingAstronomicalEvent',
        {id                     :: non_neg_integer(), % = 1, 32 bits
         event                  :: #'AstronomicalEvent'{}, % = 2
         state                  :: #'LightingCtrl'{} % = 3
        }).
-endif.

-ifndef('SENSORSAMPLEREQ_PB_H').
-define('SENSORSAMPLEREQ_PB_H', true).
-record('SensorSampleReq',
        {sensor                 :: binary() | iolist() % = 1
        }).
-endif.

-ifndef('GPSACTIONRSP_PB_H').
-define('GPSACTIONRSP_PB_H', true).
-record('GpsActionRsp',
        {actionType             :: 'SendSample' | 'SetCtlMode' | 'SetOpSchedule' | 'GetOpSchedule' | integer(), % = 1, enum GpsActionType
         iValue                 :: integer() | undefined, % = 2, 32 bits
         sValue                 :: binary() | iolist() | undefined % = 3
        }).
-endif.

-endif.
